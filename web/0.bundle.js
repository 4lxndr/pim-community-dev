webpackJsonp([0],Array(132).concat([
/* 132 */
/* unknown exports provided */
/* all exports used */
/*!*************************************!*\
  !*** ./src/Pim/Bundle ^\.\/.*\.js$ ***!
  \*************************************/
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"pimanalytics/js/data-collector": 72,
	"pimanalytics/js/patch-fetcher": 61,
	"pimdashboard/js/abstract-widget": 35,
	"pimdashboard/js/completeness-widget": 59,
	"pimdashboard/js/last-operations-widget": 60,
	"pimdashboard/js/widget-container": 63,
	"pimdashboard/templates/completeness-widget.html": 64,
	"pimdashboard/templates/last-operations-widget.html": 65,
	"pimdashboard/templates/view-all-btn.html": 66,
	"pimdatagrid/js/datafilter-builder": 379,
	"pimdatagrid/js/datafilter/collection-filters-manager": 319,
	"pimdatagrid/js/datafilter/filter/abstract-filter": 50,
	"pimdatagrid/js/datafilter/filter/ajax-choice-filter": 380,
	"pimdatagrid/js/datafilter/filter/choice-filter": 54,
	"pimdatagrid/js/datafilter/filter/date-filter": 320,
	"pimdatagrid/js/datafilter/filter/datetime-filter": 381,
	"pimdatagrid/js/datafilter/filter/metric-filter": 382,
	"pimdatagrid/js/datafilter/filter/multiselect-filter": 321,
	"pimdatagrid/js/datafilter/filter/none-filter": 383,
	"pimdatagrid/js/datafilter/filter/number-filter": 51,
	"pimdatagrid/js/datafilter/filter/price-filter": 384,
	"pimdatagrid/js/datafilter/filter/product_category-filter": 73,
	"pimdatagrid/js/datafilter/filter/product_completeness-filter": 385,
	"pimdatagrid/js/datafilter/filter/product_scope-filter": 386,
	"pimdatagrid/js/datafilter/filter/select-filter": 162,
	"pimdatagrid/js/datafilter/filter/select-row-filter": 387,
	"pimdatagrid/js/datafilter/filter/select2-choice-filter": 388,
	"pimdatagrid/js/datafilter/filter/select2-rest-choice-filter": 389,
	"pimdatagrid/js/datafilter/filter/text-filter": 52,
	"pimdatagrid/js/datafilter/filters-manager": 322,
	"pimdatagrid/js/datafilter/formatter/abstract-formatter": 390,
	"pimdatagrid/js/datagrid-builder": 53,
	"pimdatagrid/js/datagrid/action-launcher": 74,
	"pimdatagrid/js/datagrid/action/abstract-action": 22,
	"pimdatagrid/js/datagrid/action/ajax-action": 75,
	"pimdatagrid/js/datagrid/action/configure-columns-action": 391,
	"pimdatagrid/js/datagrid/action/delete-action": 76,
	"pimdatagrid/js/datagrid/action/mass-action": 77,
	"pimdatagrid/js/datagrid/action/model-action": 25,
	"pimdatagrid/js/datagrid/action/navigate-action": 36,
	"pimdatagrid/js/datagrid/action/refresh-collection-action": 78,
	"pimdatagrid/js/datagrid/action/reset-collection-action": 79,
	"pimdatagrid/js/datagrid/action/tab-redirect-action": 80,
	"pimdatagrid/js/datagrid/actions-panel": 81,
	"pimdatagrid/js/datagrid/body": 82,
	"pimdatagrid/js/datagrid/cell/action-cell": 83,
	"pimdatagrid/js/datagrid/cell/boolean-cell": 392,
	"pimdatagrid/js/datagrid/cell/date-cell": 84,
	"pimdatagrid/js/datagrid/cell/datetime-cell": 85,
	"pimdatagrid/js/datagrid/cell/html-cell": 86,
	"pimdatagrid/js/datagrid/cell/integer-cell": 393,
	"pimdatagrid/js/datagrid/cell/number-cell": 394,
	"pimdatagrid/js/datagrid/cell/select-cell": 395,
	"pimdatagrid/js/datagrid/cell/select-row-cell": 37,
	"pimdatagrid/js/datagrid/cell/string-cell": 26,
	"pimdatagrid/js/datagrid/column/action-column": 87,
	"pimdatagrid/js/datagrid/formatter/cell-formatter": 88,
	"pimdatagrid/js/datagrid/grid": 92,
	"pimdatagrid/js/datagrid/grid-views/collection": 89,
	"pimdatagrid/js/datagrid/grid-views/model": 90,
	"pimdatagrid/js/datagrid/grid-views/view": 91,
	"pimdatagrid/js/datagrid/header": 95,
	"pimdatagrid/js/datagrid/header-cell/header-cell": 93,
	"pimdatagrid/js/datagrid/header-cell/select-all-header-cell": 94,
	"pimdatagrid/js/datagrid/listener/abstract-listener": 164,
	"pimdatagrid/js/datagrid/listener/callback-listener": 396,
	"pimdatagrid/js/datagrid/listener/column-form-listener": 397,
	"pimdatagrid/js/datagrid/listener/oro-column-form-listener": 323,
	"pimdatagrid/js/datagrid/page-size": 96,
	"pimdatagrid/js/datagrid/pagination": 98,
	"pimdatagrid/js/datagrid/pagination-input": 97,
	"pimdatagrid/js/datagrid/row": 99,
	"pimdatagrid/js/datagrid/state": 44,
	"pimdatagrid/js/datagrid/state-listener": 398,
	"pimdatagrid/js/datagrid/toolbar": 100,
	"pimdatagrid/js/datagrid/widget/export-widget": 399,
	"pimdatagrid/js/fetcher/datagrid-view-fetcher": 400,
	"pimdatagrid/js/loading-mask": 18,
	"pimdatagrid/js/multiselect-decorator": 174,
	"pimdatagrid/js/pageable-collection": 24,
	"pimdatagrid/js/remover/datagrid-view-remover": 324,
	"pimdatagrid/js/saver/datagrid-view-saver": 175,
	"pimdatagrid/lib/backbone-pageable": 101,
	"pimdatagrid/lib/backgrid/backgrid": 9,
	"pimdatagrid/lib/multiselect/jquery.multiselect": 177,
	"pimdatagrid/lib/multiselect/jquery.multiselect.filter": 176,
	"pimdatagrid/templates/configure-columns-action.html": 192,
	"pimdatagrid/templates/datagrid/action-launcher-button.html": 67,
	"pimdatagrid/templates/datagrid/action-launcher-list-item.html": 68,
	"pimdatagrid/templates/datagrid/actions-group.html": 69,
	"pimdatagrid/templates/filter/date-filter.html": 193,
	"pimdatagrid/templates/filter/metric-filter.html": 194,
	"pimdatagrid/templates/filter/select2-choice-filter.html": 171,
	"pimenrich/js/app": 62,
	"pimenrich/js/association-type/form/delete": 401,
	"pimenrich/js/attribute-option/create": 178,
	"pimenrich/js/attribute-option/form": 402,
	"pimenrich/js/channel/form/delete": 403,
	"pimenrich/js/channel/form/properties/conversion-unit": 404,
	"pimenrich/js/channel/form/properties/general": 405,
	"pimenrich/js/channel/form/properties/general/currencies": 406,
	"pimenrich/js/channel/form/properties/general/locales": 407,
	"pimenrich/js/channel/form/save": 408,
	"pimenrich/js/common/column-list-view": 325,
	"pimenrich/js/common/property": 151,
	"pimenrich/js/controller/association-type": 102,
	"pimenrich/js/controller/base": 8,
	"pimenrich/js/controller/channel/edit": 103,
	"pimenrich/js/controller/common/index": 104,
	"pimenrich/js/controller/family": 105,
	"pimenrich/js/controller/form": 27,
	"pimenrich/js/controller/group": 38,
	"pimenrich/js/controller/group-type": 106,
	"pimenrich/js/controller/job-execution": 107,
	"pimenrich/js/controller/job-instance": 108,
	"pimenrich/js/controller/product": 109,
	"pimenrich/js/controller/redirect": 110,
	"pimenrich/js/controller/registry": 409,
	"pimenrich/js/controller/role": 111,
	"pimenrich/js/controller/system": 112,
	"pimenrich/js/controller/template": 28,
	"pimenrich/js/controller/user": 113,
	"pimenrich/js/controller/variant-group": 114,
	"pimenrich/js/date-context": 160,
	"pimenrich/js/error/error": 12,
	"pimenrich/js/family/form/attributes": 410,
	"pimenrich/js/family/form/attributes/attributes": 326,
	"pimenrich/js/family/form/attributes/toolbar": 411,
	"pimenrich/js/family/form/attributes/toolbar/add-select/attribute-group/select": 412,
	"pimenrich/js/family/form/attributes/toolbar/add-select/attribute/select": 327,
	"pimenrich/js/family/form/delete": 413,
	"pimenrich/js/family/form/properties/general": 414,
	"pimenrich/js/family/form/properties/general/attribute-as-label": 415,
	"pimenrich/js/family/form/properties/general/code": 416,
	"pimenrich/js/family/form/properties/general/translation": 417,
	"pimenrich/js/family/form/save": 418,
	"pimenrich/js/family/mass-edit/attributes": 419,
	"pimenrich/js/family/mass-edit/hidden-field-updater": 420,
	"pimenrich/js/family/mass-edit/toolbar/add-select/attribute/select": 421,
	"pimenrich/js/fetcher/attribute-fetcher": 422,
	"pimenrich/js/fetcher/attribute-group-fetcher": 423,
	"pimenrich/js/fetcher/base-fetcher": 32,
	"pimenrich/js/fetcher/completeness-fetcher": 424,
	"pimenrich/js/fetcher/fetcher-registry": 10,
	"pimenrich/js/fetcher/locale-fetcher": 425,
	"pimenrich/js/fetcher/product-fetcher": 426,
	"pimenrich/js/fetcher/variant-group-fetcher": 427,
	"pimenrich/js/filter/attribute/attribute": 156,
	"pimenrich/js/filter/attribute/boolean": 428,
	"pimenrich/js/filter/attribute/date": 429,
	"pimenrich/js/filter/attribute/identifier": 430,
	"pimenrich/js/filter/attribute/media": 431,
	"pimenrich/js/filter/attribute/metric": 432,
	"pimenrich/js/filter/attribute/number": 433,
	"pimenrich/js/filter/attribute/price-collection": 434,
	"pimenrich/js/filter/attribute/select": 435,
	"pimenrich/js/filter/attribute/string": 436,
	"pimenrich/js/filter/filter": 158,
	"pimenrich/js/filter/product/category": 437,
	"pimenrich/js/filter/product/category/selector": 328,
	"pimenrich/js/filter/product/completeness": 438,
	"pimenrich/js/filter/product/enabled": 439,
	"pimenrich/js/filter/product/family": 440,
	"pimenrich/js/filter/product/updated": 441,
	"pimenrich/js/form/builder": 7,
	"pimenrich/js/form/cache-invalidator": 179,
	"pimenrich/js/form/common/add-select/footer": 329,
	"pimenrich/js/form/common/add-select/line": 180,
	"pimenrich/js/form/common/add-select/select": 181,
	"pimenrich/js/form/common/attributes": 182,
	"pimenrich/js/form/common/attributes/attribute-group-selector": 442,
	"pimenrich/js/form/common/attributes/copy": 443,
	"pimenrich/js/form/common/attributes/copy-field": 330,
	"pimenrich/js/form/common/back-to-grid": 444,
	"pimenrich/js/form/common/delete": 154,
	"pimenrich/js/form/common/download-file": 331,
	"pimenrich/js/form/common/edit-form": 445,
	"pimenrich/js/form/common/form-tabs": 446,
	"pimenrich/js/form/common/grid": 165,
	"pimenrich/js/form/common/group-selector": 332,
	"pimenrich/js/form/common/index/confirm-button": 447,
	"pimenrich/js/form/common/index/create-button": 448,
	"pimenrich/js/form/common/index/grid": 449,
	"pimenrich/js/form/common/index/index": 450,
	"pimenrich/js/form/common/label": 166,
	"pimenrich/js/form/common/meta/created": 451,
	"pimenrich/js/form/common/meta/status": 452,
	"pimenrich/js/form/common/meta/updated": 453,
	"pimenrich/js/form/common/properties/general": 454,
	"pimenrich/js/form/common/properties/translation": 333,
	"pimenrich/js/form/common/redirect": 334,
	"pimenrich/js/form/common/save": 159,
	"pimenrich/js/form/common/save-buttons": 455,
	"pimenrich/js/form/common/save-form": 456,
	"pimenrich/js/form/common/state": 457,
	"pimenrich/js/form/common/tab/history": 458,
	"pimenrich/js/form/common/tab/properties": 459,
	"pimenrich/js/form/config-provider": 34,
	"pimenrich/js/form/form-modal": 460,
	"pimenrich/js/form/registry": 115,
	"pimenrich/js/formatter/choices/base": 46,
	"pimenrich/js/formatter/date-formatter": 167,
	"pimenrich/js/generator/media-url-generator": 335,
	"pimenrich/js/grid/view-selector": 466,
	"pimenrich/js/grid/view-selector-create-view": 461,
	"pimenrich/js/grid/view-selector-current": 462,
	"pimenrich/js/grid/view-selector-line": 463,
	"pimenrich/js/grid/view-selector-remove-view": 464,
	"pimenrich/js/grid/view-selector-save-view": 465,
	"pimenrich/js/group-type/form/delete": 467,
	"pimenrich/js/group/form/delete": 468,
	"pimenrich/js/group/form/meta/product-count": 469,
	"pimenrich/js/group/form/products": 470,
	"pimenrich/js/group/form/properties/general": 471,
	"pimenrich/js/group/form/save": 472,
	"pimenrich/js/i18n": 17,
	"pimenrich/js/job/common/edit/content/data/help": 473,
	"pimenrich/js/job/common/edit/field/decimal-separator": 474,
	"pimenrich/js/job/common/edit/field/field": 168,
	"pimenrich/js/job/common/edit/field/select": 183,
	"pimenrich/js/job/common/edit/field/switch": 475,
	"pimenrich/js/job/common/edit/field/text": 476,
	"pimenrich/js/job/common/edit/label": 477,
	"pimenrich/js/job/common/edit/launch": 336,
	"pimenrich/js/job/common/edit/meta": 478,
	"pimenrich/js/job/common/edit/properties": 479,
	"pimenrich/js/job/common/edit/save": 184,
	"pimenrich/js/job/common/edit/upload": 481,
	"pimenrich/js/job/common/edit/upload-launch": 480,
	"pimenrich/js/job/common/edit/validation": 482,
	"pimenrich/js/job/common/label": 483,
	"pimenrich/js/job/execution/auto-refresh": 484,
	"pimenrich/js/job/execution/download-archives-buttons": 485,
	"pimenrich/js/job/execution/download-log": 486,
	"pimenrich/js/job/execution/show-profile": 487,
	"pimenrich/js/job/execution/summary-table": 488,
	"pimenrich/js/job/export/edit/delete": 489,
	"pimenrich/js/job/export/edit/save": 490,
	"pimenrich/js/job/import/edit/delete": 491,
	"pimenrich/js/job/import/edit/save": 492,
	"pimenrich/js/job/product/edit/content": 493,
	"pimenrich/js/job/product/edit/content/data": 494,
	"pimenrich/js/job/product/edit/content/data/add-select/attribute/select": 495,
	"pimenrich/js/job/product/edit/content/data/default-attribute-filters": 496,
	"pimenrich/js/job/product/edit/content/readonly": 497,
	"pimenrich/js/job/product/edit/content/structure": 498,
	"pimenrich/js/job/product/edit/content/structure/attributes": 499,
	"pimenrich/js/job/product/edit/content/structure/attributes-selector": 337,
	"pimenrich/js/job/product/edit/content/structure/locales": 500,
	"pimenrich/js/job/product/edit/content/structure/scope": 501,
	"pimenrich/js/job/product/edit/field/date-format": 502,
	"pimenrich/js/jquery.wizard": 503,
	"pimenrich/js/jstree/jquery.jstree.nested_switch": 116,
	"pimenrich/js/jstree/jquery.jstree.tree_selector": 55,
	"pimenrich/js/manager/attribute-group-manager": 185,
	"pimenrich/js/manager/attribute-manager": 153,
	"pimenrich/js/manager/group-manager": 338,
	"pimenrich/js/manager/history-item-manager": 504,
	"pimenrich/js/manager/product-manager": 163,
	"pimenrich/js/manager/variant-group-manager": 339,
	"pimenrich/js/page-title": 13,
	"pimenrich/js/pim-async-tab": 117,
	"pimenrich/js/pim-attributeoptionview": 505,
	"pimenrich/js/pim-currencyfield": 506,
	"pimenrich/js/pim-init": 118,
	"pimenrich/js/pim-item-tableview": 507,
	"pimenrich/js/pim-item-view": 508,
	"pimenrich/js/pim-optionform": 340,
	"pimenrich/js/pim-popinform": 509,
	"pimenrich/js/pim-scopable": 510,
	"pimenrich/js/product/create/create": 119,
	"pimenrich/js/product/create/form": 511,
	"pimenrich/js/product/field-manager": 150,
	"pimenrich/js/product/field/boolean-field": 512,
	"pimenrich/js/product/field/date-field": 513,
	"pimenrich/js/product/field/field": 152,
	"pimenrich/js/product/field/media-field": 514,
	"pimenrich/js/product/field/metric-field": 515,
	"pimenrich/js/product/field/multi-select-field": 341,
	"pimenrich/js/product/field/number-field": 516,
	"pimenrich/js/product/field/price-collection-field": 517,
	"pimenrich/js/product/field/simple-select-field": 342,
	"pimenrich/js/product/field/text-field": 518,
	"pimenrich/js/product/field/textarea-field": 519,
	"pimenrich/js/product/field/wysiwyg-field": 520,
	"pimenrich/js/product/form": 149,
	"pimenrich/js/product/form/associations": 521,
	"pimenrich/js/product/form/attributes": 522,
	"pimenrich/js/product/form/attributes/add-select/attribute/line": 343,
	"pimenrich/js/product/form/attributes/add-select/attribute/select": 169,
	"pimenrich/js/product/form/attributes/completeness": 523,
	"pimenrich/js/product/form/attributes/locale-specific": 524,
	"pimenrich/js/product/form/attributes/localizable": 525,
	"pimenrich/js/product/form/attributes/validation": 526,
	"pimenrich/js/product/form/attributes/validation-error": 344,
	"pimenrich/js/product/form/attributes/variant-group": 527,
	"pimenrich/js/product/form/categories": 528,
	"pimenrich/js/product/form/delete": 529,
	"pimenrich/js/product/form/download-pdf": 530,
	"pimenrich/js/product/form/locale-switcher": 345,
	"pimenrich/js/product/form/mass-edit/attributes": 531,
	"pimenrich/js/product/form/mass-edit/hidden-field-updater": 532,
	"pimenrich/js/product/form/meta/change-family": 533,
	"pimenrich/js/product/form/meta/family": 534,
	"pimenrich/js/product/form/meta/groups": 535,
	"pimenrich/js/product/form/panel/comments": 536,
	"pimenrich/js/product/form/panel/completeness": 537,
	"pimenrich/js/product/form/panel/history": 538,
	"pimenrich/js/product/form/panel/panels": 539,
	"pimenrich/js/product/form/panel/selector": 540,
	"pimenrich/js/product/form/product-label": 541,
	"pimenrich/js/product/form/save": 543,
	"pimenrich/js/product/form/save-and-back": 542,
	"pimenrich/js/product/form/scope-switcher": 346,
	"pimenrich/js/product/form/sequential-edit": 544,
	"pimenrich/js/product/form/status-switcher": 545,
	"pimenrich/js/provider/to-fill-field-provider": 186,
	"pimenrich/js/remover/association-type-remover": 347,
	"pimenrich/js/remover/base-remover": 155,
	"pimenrich/js/remover/channel": 348,
	"pimenrich/js/remover/family": 349,
	"pimenrich/js/remover/group-remover": 350,
	"pimenrich/js/remover/group-type-remover": 351,
	"pimenrich/js/remover/job-instance-export-remover": 352,
	"pimenrich/js/remover/job-instance-import-remover": 353,
	"pimenrich/js/remover/product-remover": 354,
	"pimenrich/js/remover/variant-group-remover": 355,
	"pimenrich/js/route-matcher": 120,
	"pimenrich/js/router": 11,
	"pimenrich/js/saver/base-saver": 157,
	"pimenrich/js/saver/channel": 356,
	"pimenrich/js/saver/entity-saver": 357,
	"pimenrich/js/saver/family": 358,
	"pimenrich/js/saver/group-saver": 359,
	"pimenrich/js/saver/job-instance-export-saver": 360,
	"pimenrich/js/saver/job-instance-import-saver": 361,
	"pimenrich/js/saver/product-saver": 362,
	"pimenrich/js/saver/variant-group-saver": 363,
	"pimenrich/js/security-context": 31,
	"pimenrich/js/translator": 3,
	"pimenrich/js/tree-associate.jstree": 364,
	"pimenrich/js/tree-manage.jstree": 546,
	"pimenrich/js/tree-view.jstree": 121,
	"pimenrich/js/user-context": 5,
	"pimenrich/js/variant-group/form/attributes/add-select/attribute/select": 547,
	"pimenrich/js/variant-group/form/delete": 548,
	"pimenrich/js/variant-group/form/no-attribute": 549,
	"pimenrich/js/variant-group/form/properties/general": 550,
	"pimenrich/js/variant-group/form/save": 551,
	"pimenrich/lib/translator": 39,
	"pimenrich/templates/attribute-option/edit.html": 195,
	"pimenrich/templates/attribute-option/form.html": 196,
	"pimenrich/templates/attribute-option/index.html": 197,
	"pimenrich/templates/attribute-option/show.html": 198,
	"pimenrich/templates/attribute-option/validation-error.html": 199,
	"pimenrich/templates/channel/tab/properties/conversion-unit.html": 200,
	"pimenrich/templates/channel/tab/properties/general.html": 201,
	"pimenrich/templates/channel/tab/properties/general/category-tree.html": 373,
	"pimenrich/templates/channel/tab/properties/general/currencies.html": 202,
	"pimenrich/templates/channel/tab/properties/general/locales.html": 203,
	"pimenrich/templates/error/error.html": 70,
	"pimenrich/templates/export/common/edit/field/field.html": 204,
	"pimenrich/templates/export/common/edit/field/select.html": 205,
	"pimenrich/templates/export/common/edit/field/switch.html": 206,
	"pimenrich/templates/export/common/edit/field/text.html": 207,
	"pimenrich/templates/export/common/edit/launch.html": 208,
	"pimenrich/templates/export/common/edit/meta.html": 209,
	"pimenrich/templates/export/common/edit/properties.html": 210,
	"pimenrich/templates/export/common/edit/upload.html": 211,
	"pimenrich/templates/export/common/edit/validation.html": 212,
	"pimenrich/templates/export/product/edit/content.html": 213,
	"pimenrich/templates/export/product/edit/content/data.html": 214,
	"pimenrich/templates/export/product/edit/content/data/help.html": 215,
	"pimenrich/templates/export/product/edit/content/structure.html": 216,
	"pimenrich/templates/export/product/edit/content/structure/attribute-list.html": 217,
	"pimenrich/templates/export/product/edit/content/structure/attributes-selector.html": 218,
	"pimenrich/templates/export/product/edit/content/structure/attributes.html": 219,
	"pimenrich/templates/export/product/edit/content/structure/locales.html": 220,
	"pimenrich/templates/export/product/edit/content/structure/scope.html": 221,
	"pimenrich/templates/family/tab/attributes.html": 222,
	"pimenrich/templates/family/tab/attributes/attributes.html": 223,
	"pimenrich/templates/family/tab/attributes/toolbar.html": 224,
	"pimenrich/templates/family/tab/general/attribute-as-label.html": 225,
	"pimenrich/templates/filter/attribute/boolean.html": 226,
	"pimenrich/templates/filter/attribute/date.html": 227,
	"pimenrich/templates/filter/attribute/media.html": 228,
	"pimenrich/templates/filter/attribute/metric.html": 229,
	"pimenrich/templates/filter/attribute/number.html": 230,
	"pimenrich/templates/filter/attribute/price-collection.html": 231,
	"pimenrich/templates/filter/attribute/select.html": 232,
	"pimenrich/templates/filter/attribute/string.html": 233,
	"pimenrich/templates/filter/filter.html": 234,
	"pimenrich/templates/filter/product/category.html": 235,
	"pimenrich/templates/filter/product/category/selector.html": 236,
	"pimenrich/templates/filter/product/completeness.html": 237,
	"pimenrich/templates/filter/product/enabled.html": 238,
	"pimenrich/templates/filter/product/family.html": 239,
	"pimenrich/templates/filter/product/identifier.html": 240,
	"pimenrich/templates/filter/product/updated.html": 241,
	"pimenrich/templates/filter/simpleselect.html": 374,
	"pimenrich/templates/form/add-select/footer.html": 242,
	"pimenrich/templates/form/add-select/line.html": 243,
	"pimenrich/templates/form/add-select/select.html": 244,
	"pimenrich/templates/form/back-to-grid.html": 245,
	"pimenrich/templates/form/delete.html": 246,
	"pimenrich/templates/form/download-file.html": 247,
	"pimenrich/templates/form/edit-form.html": 248,
	"pimenrich/templates/form/form-tabs.html": 249,
	"pimenrich/templates/form/grid.html": 250,
	"pimenrich/templates/form/group-selector.html": 251,
	"pimenrich/templates/form/index/confirm-button.html": 252,
	"pimenrich/templates/form/index/create-button.html": 253,
	"pimenrich/templates/form/index/index.html": 254,
	"pimenrich/templates/form/meta/created.html": 255,
	"pimenrich/templates/form/meta/status.html": 256,
	"pimenrich/templates/form/meta/updated.html": 257,
	"pimenrich/templates/form/properties/general.html": 258,
	"pimenrich/templates/form/properties/input.html": 259,
	"pimenrich/templates/form/properties/translation.html": 172,
	"pimenrich/templates/form/redirect.html": 260,
	"pimenrich/templates/form/save-buttons.html": 261,
	"pimenrich/templates/form/save.html": 375,
	"pimenrich/templates/form/state.html": 262,
	"pimenrich/templates/form/tab/attributes.html": 263,
	"pimenrich/templates/form/tab/attributes/attribute-group-selector.html": 264,
	"pimenrich/templates/form/tab/attributes/copy-field.html": 265,
	"pimenrich/templates/form/tab/attributes/copy.html": 266,
	"pimenrich/templates/form/tab/history.html": 376,
	"pimenrich/templates/form/tab/properties.html": 267,
	"pimenrich/templates/form/tab/section.html": 268,
	"pimenrich/templates/grid/view-selector-create-view-label-input.html": 269,
	"pimenrich/templates/grid/view-selector-create-view.html": 270,
	"pimenrich/templates/grid/view-selector-current.html": 271,
	"pimenrich/templates/grid/view-selector-line.html": 272,
	"pimenrich/templates/grid/view-selector-remove-view.html": 273,
	"pimenrich/templates/grid/view-selector-save-view.html": 274,
	"pimenrich/templates/grid/view-selector.html": 275,
	"pimenrich/templates/group/meta/product-count.html": 276,
	"pimenrich/templates/group/tab/properties/general.html": 277,
	"pimenrich/templates/i18n/flag.html": 71,
	"pimenrich/templates/job-execution/auto-refresh.html": 278,
	"pimenrich/templates/job-execution/download-archives-buttons.html": 279,
	"pimenrich/templates/job-execution/summary-table.html": 280,
	"pimenrich/templates/product/create-error.html": 281,
	"pimenrich/templates/product/create-popin.html": 282,
	"pimenrich/templates/product/download-pdf.html": 283,
	"pimenrich/templates/product/field/boolean.html": 284,
	"pimenrich/templates/product/field/date.html": 285,
	"pimenrich/templates/product/field/field.html": 286,
	"pimenrich/templates/product/field/media.html": 287,
	"pimenrich/templates/product/field/metric.html": 288,
	"pimenrich/templates/product/field/multi-select.html": 289,
	"pimenrich/templates/product/field/number.html": 290,
	"pimenrich/templates/product/field/price-collection.html": 291,
	"pimenrich/templates/product/field/simple-select.html": 292,
	"pimenrich/templates/product/field/text.html": 293,
	"pimenrich/templates/product/field/textarea.html": 173,
	"pimenrich/templates/product/form/add-select/attribute/line.html": 294,
	"pimenrich/templates/product/locale-switcher.html": 295,
	"pimenrich/templates/product/meta/change-family-modal.html": 296,
	"pimenrich/templates/product/meta/family.html": 297,
	"pimenrich/templates/product/meta/group-modal.html": 298,
	"pimenrich/templates/product/meta/groups.html": 299,
	"pimenrich/templates/product/panel/comments.html": 300,
	"pimenrich/templates/product/panel/completeness.html": 301,
	"pimenrich/templates/product/panel/container.html": 302,
	"pimenrich/templates/product/panel/history.html": 303,
	"pimenrich/templates/product/panel/selector.html": 304,
	"pimenrich/templates/product/scope-switcher.html": 305,
	"pimenrich/templates/product/sequential-edit.html": 306,
	"pimenrich/templates/product/status-switcher.html": 307,
	"pimenrich/templates/product/tab/association-panes.html": 308,
	"pimenrich/templates/product/tab/associations.html": 309,
	"pimenrich/templates/product/tab/attributes/validation-error.html": 310,
	"pimenrich/templates/product/tab/attributes/variant-group.html": 311,
	"pimenrich/templates/product/tab/categories.html": 312,
	"pimenrich/templates/variant-group/form/no-attribute.html": 313,
	"pimenrich/templates/variant-group/tab/properties/general.html": 314,
	"pimimportexport/js/job-execution-view": 552,
	"pimnavigation/js/navigation/abstract-view": 187,
	"pimnavigation/js/navigation/collection": 188,
	"pimnavigation/js/navigation/dotmenu/item-view": 365,
	"pimnavigation/js/navigation/dotmenu/view": 366,
	"pimnavigation/js/navigation/favorites/view": 553,
	"pimnavigation/js/navigation/model": 170,
	"pimnavigation/js/navigation/pinbar/collection": 367,
	"pimnavigation/js/navigation/pinbar/item-view": 368,
	"pimnavigation/js/navigation/pinbar/model": 189,
	"pimnavigation/js/navigation/pinbar/view": 554,
	"pimnavigation/lib/jquery-form/jquery.form": 122,
	"pimnavigation/lib/url/url.min": 555,
	"pimnotification/js/indicator": 369,
	"pimnotification/js/notification-list": 370,
	"pimnotification/js/notifications": 556,
	"pimnotification/templates/notification/notification-footer.html": 315,
	"pimnotification/templates/notification/notification-list.html": 316,
	"pimnotification/templates/notification/notification.html": 317,
	"pimreferencedata/js/product/field/reference-multi-select-field": 557,
	"pimreferencedata/js/product/field/reference-simple-select-field": 558,
	"pimui/js/app": 19,
	"pimui/js/delete-confirmation": 40,
	"pimui/js/error": 47,
	"pimui/js/form/state.js": 559,
	"pimui/js/form/system/group/loading-message": 560,
	"pimui/js/init-layout": 123,
	"pimui/js/jquery-setup": 561,
	"pimui/js/jquery.sidebarize": 124,
	"pimui/js/layout": 125,
	"pimui/js/mediator": 6,
	"pimui/js/messenger": 16,
	"pimui/js/modal": 20,
	"pimui/js/pim-datepicker": 161,
	"pimui/js/pim-dialog": 14,
	"pimui/js/pim-dialogform": 190,
	"pimui/js/pim-fileinput": 371,
	"pimui/js/pim-formupdatelistener": 562,
	"pimui/js/pim-initselect2": 30,
	"pimui/js/pim-saveformstate": 126,
	"pimui/js/pim-ui": 56,
	"pimui/js/pim-wysiwyg": 57,
	"pimui/js/templates/system/group/loading-message.html": 318,
	"pimui/js/tools": 58,
	"pimui/lib/backbone.bootstrap-modal": 563,
	"pimui/lib/backbone/backbone": 2,
	"pimui/lib/base64/base64": 564,
	"pimui/lib/bootstrap-datetimepicker/js/bootstrap-datetimepicker": 372,
	"pimui/lib/bootstrap-switch/bootstrap.switch": 45,
	"pimui/lib/bootstrap/js/bootstrap": 23,
	"pimui/lib/dropzonejs/dist/dropzone-amd-module.js": 565,
	"pimui/lib/jquery-numeric/jquery.numeric": 127,
	"pimui/lib/jquery-ui/jquery-ui-1.11.4.custom.min": 48,
	"pimui/lib/jquery/jquery-1.10.2": 1,
	"pimui/lib/json2/json2": 128,
	"pimui/lib/jstree/jquery.hotkeys": 566,
	"pimui/lib/jstree/jquery.jstree": 49,
	"pimui/lib/select2/select2": 29,
	"pimui/lib/slimbox2/slimbox2": 191,
	"pimui/lib/text/text": 377,
	"pimui/lib/underscore/underscore": 0,
	"pimuser/js/init-user": 129,
	"undefined": 130
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 132;

/***/ }),
/* 133 */,
/* 134 */,
/* 135 */,
/* 136 */,
/* 137 */,
/* 138 */,
/* 139 */,
/* 140 */,
/* 141 */,
/* 142 */,
/* 143 */,
/* 144 */,
/* 145 */,
/* 146 */,
/* 147 */,
/* 148 */,
/* 149 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/form.js ***!
  \*************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Form main class
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! oro/mediator */ 6)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        Backbone,
        mediator
    ) {
        return Backbone.View.extend({
            code: 'form',
            parent: null,
            preUpdateEventName: 'pim_enrich:form:entity:pre_update',
            postUpdateEventName: 'pim_enrich:form:entity:post_update',

            /**
             * {@inheritdoc}
             */
            initialize: function () {
                this.extensions = {};
                this.zones      = {};
                this.targetZone = '';
                this.configured = false;
            },

            /**
             * Configure the extension and its child extensions
             *
             * @return {Promise}
             */
            configure: function () {
                if (null === this.parent) {
                    this.model = new Backbone.Model();
                }

                var extensionPromises = _.map(this.extensions, function (extension) {
                    return extension.configure();
                });

                return $.when.apply($, extensionPromises).then(function () {
                    this.configured = true;
                }.bind(this));
            },

            /**
             * Add a child extension to this extension
             *
             * @param {string} code      Extension's code
             * @param {Object} extension Backbone module of the extension
             * @param {string} zone      Targeted zone
             * @param {int} position     The position of the extension
             */
            addExtension: function (code, extension, zone, position) {
                extension.setParent(this);

                extension.code       = code;
                extension.targetZone = zone;
                extension.position   = position;

                this.extensions[code] = extension;
            },

            /**
             * Get a child extension (the first extension matching the given code or ends with the given code)
             *
             * @param {string} code
             *
             * @return {Object}
             */
            getExtension: function (code) {
                return this.extensions[_.findKey(this.extensions, function (extension) {
                    var expectedPosition = extension.code.length - code.length;

                    return expectedPosition >= 0 && expectedPosition === extension.code.indexOf(code, expectedPosition);
                })];
            },

            /**
             * Set the parent of this extension
             *
             * @param {Object} parent
             */
            setParent: function (parent) {
                this.parent = parent;

                return this;
            },

            /**
             * Get the parent of the extension
             *
             * @return {Object}
             */
            getParent: function () {
                return this.parent;
            },

            /**
             * Get the root extension
             *
             * @return {Object}
             */
            getRoot: function () {
                var rootView = this;
                var parent = this.getParent();
                while (parent) {
                    rootView = parent;
                    parent = parent.getParent();
                }

                return rootView;
            },

            /**
             * Set data in the root model
             *
             * @param {Object} data
             * @param {Object} options If silent is set to true, don't fire events
             *                         pim_enrich:form:entity:pre_update and pim_enrich:form:entity:post_update
             */
            setData: function (data, options) {
                options = options || {};

                if (!options.silent) {
                    this.getRoot().trigger(this.preUpdateEventName, data);
                }

                this.getRoot().model.set(data, options);

                if (!options.silent) {
                    this.getRoot().trigger(this.postUpdateEventName, data);
                }

                return this;
            },

            /**
             * Get the form raw data (vanilla javascript object)
             *
             * @return {Object}
             */
            getFormData: function () {
                return this.getRoot().model.toJSON();
            },

            /**
             * Get the form data (backbone model)
             *
             * @return {Object}
             */
            getFormModel: function () {
                return this.getRoot().model;
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                if (!this.configured) {
                    return this;
                }

                return this.renderExtensions();
            },

            /**
             * Render the child extensions
             *
             * @return {Object}
             */
            renderExtensions: function () {
                // If the view is no longer attached to the DOM, don't render the extensions
                if (undefined === this.el) {
                    return this;
                }

                this.initializeDropZones();

                _.each(this.extensions, function (extension) {
                    this.renderExtension(extension);
                }.bind(this));

                return this;
            },

            /**
             * Render a single extension
             *
             * @param {Object} extension
             */
            renderExtension: function (extension) {
                this.getZone(extension.targetZone).appendChild(extension.el);

                extension.render();
            },

            /**
             * Initialize dropzone cache
             */
            initializeDropZones: function () {
                this.zones = _.indexBy(this.$('[data-drop-zone]'), function (zone) {
                    return zone.dataset.dropZone;
                });

                this.zones.self = this.el;
            },

            /**
             * Get the drop zone for the given code
             *
             * @param {string} code
             *
             * @return {jQueryElement}
             */
            getZone: function (code) {
                if (!(code in this.zones)) {
                    this.zones[code] = this.$('[data-drop-zone="' + code + '"]')[0];
                }

                if (!this.zones[code]) {
                    throw new Error('Zone "' + code + '" does not exist');
                }

                return this.zones[code];
            },

            /**
             * Trigger event on each child extensions and their childs
             */
            triggerExtensions: function () {
                var options = _.toArray(arguments);

                _.each(this.extensions, function (extension) {
                    extension.trigger.apply(extension, options);
                    extension.triggerExtensions.apply(extension, options);
                });
            },

            /**
             * Listen on child extensions and their childs events
             *
             * @param {string}   code
             * @param {Function} callback
             */
            onExtensions: function (code, callback) {
                _.each(this.extensions, function (extension) {
                    this.listenTo(extension, code, callback);
                }.bind(this));
            },

            /**
             * Get the root form code
             *
             * @return {string}
             */
            getFormCode: function () {
                return this.getRoot().code;
            },

            /**
             * Listen to given mediator events to trigger them locally (in the local root).
             * This way, extensions attached to this form don't have to listen "globally" on the mediator.
             *
             * @param {Array} mediator events to forward:
             *                [ {'mediator:event:name': 'this:event:name'}, {...} ]
             */
            forwardMediatorEvents: function (events) {
                _.map(events, function (localEvent, mediatorEvent) {
                    this.listenTo(mediator, mediatorEvent, function (data) {
                        this.trigger(localEvent, data);
                    });
                }.bind(this));
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 150 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/field-manager.js ***!
  \**********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Field manager
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1), __webpack_require__(/*! underscore */ 0), __webpack_require__(/*! pim/fetcher-registry */ 10), __webpack_require__(/*! pim/form-config-provider */ 34)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, FetcherRegistry, ConfigProvider) {
        var fields = {};
        var visibleFields = {};
        var loadedModules = {};
        var getFieldForAttribute = function (attribute) {
            var deferred = $.Deferred();

            if (loadedModules[attribute.field_type]) {
                deferred.resolve(loadedModules[attribute.field_type]);

                return deferred.promise();
            }

            ConfigProvider.getAttributeFields().done(function (attributeFields) {
                var fieldModule = attributeFields[attribute.field_type];

                if (!fieldModule) {
                    throw new Error('No field defined for attribute type "' + attribute.field_type + '"');
                }

                __webpack_require__.e/* require */(1).then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(/*! . */ 378)(fieldModule)]; (function (Field) {
                    loadedModules[attribute.field_type] = Field;
                    deferred.resolve(Field);
                }.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}).catch(__webpack_require__.oe);
            });

            return deferred.promise();
        };

        return {
            getField: function (attributeCode) {
                var deferred = $.Deferred();

                if (fields[attributeCode]) {
                    deferred.resolve(fields[attributeCode]);

                    return deferred.promise();
                }

                FetcherRegistry.getFetcher('attribute').fetch(attributeCode).done(function (attribute) {
                    getFieldForAttribute(attribute).done(function (Field) {
                        fields[attributeCode] = new Field(attribute);
                        deferred.resolve(fields[attributeCode]);
                    });
                });

                return deferred.promise();
            },
            getNotReadyFields: function () {
                var notReadyFields = [];

                _.each(fields, function (field) {
                    if (!field.isReady()) {
                        notReadyFields.push(field);
                    }
                });

                return notReadyFields;
            },
            getFields: function () {
                return fields;
            },
            addVisibleField: function (attributeCode) {
                visibleFields[attributeCode] = fields[attributeCode];
            },
            getVisibleFields: function () {
                return visibleFields;
            },
            getVisibleField: function (attributeCode) {
                return visibleFields[attributeCode];
            },
            clearFields: function () {
                fields = {};
            },
            clearVisibleFields: function () {
                visibleFields = {};
            }
        };
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 151 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/common/property.js ***!
  \****************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Property accessor extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
    return {
        /**
         * Access a property in an object
         *
         * @param {object} data
         * @param {string} path
         * @param {mixed}  defaultValue
         *
         * @return {mixed}
         */
        accessProperty: function (data, path, defaultValue) {
            defaultValue = defaultValue || null;
            var pathPart = path.split('.');

            if (undefined === data[pathPart[0]]) {
                return defaultValue;
            }

            return 1 === pathPart.length ?
                data[pathPart[0]] :
                this.accessProperty(data[pathPart[0]], pathPart.slice(1).join('.'), defaultValue);
        },

        /**
         * Update a property in an object
         *
         * @param {object} data
         * @param {string} path
         * @param {mixed}  value
         *
         * @return {mixed}
         */
        updateProperty: function (data, path, value) {
            var pathPart = path.split('.');

            data[pathPart[0]] = 1 === pathPart.length ?
                value :
                this.updateProperty(data[pathPart[0]], pathPart.slice(1).join('.'), value);

            return data;
        }
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 152 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/field/field.js ***!
  \********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Field abstract class
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/template/product/field/field */ 286),
        __webpack_require__(/*! pim/attribute-manager */ 153),
        __webpack_require__(/*! pim/i18n */ 17),
        __webpack_require__(/*! oro/mediator */ 6)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, Backbone, _, fieldTemplate, AttributeManager, i18n, mediator) {
        var FieldModel = Backbone.Model.extend({
            values: []
        });

        return Backbone.View.extend({
            tagName: 'div',
            className: 'AknComparableFields field-container',
            options: {},
            attributes: function () {
                return {
                    'data-attribute': this.options ? this.options.code : null
                };
            },
            attribute: null,
            context: {},
            model: FieldModel,
            template: _.template(fieldTemplate),
            elements: {},
            editable: true,
            ready: true,
            valid: true,

            /**
             * Initialize this field
             *
             * @param {Object} attribute
             *
             * @returns {Object}
             */
            initialize: function (attribute) {
                this.attribute = attribute;
                this.model     = new FieldModel({values: []});
                this.elements  = {};
                this.context   = {};

                return this;
            },

            /**
             * Render this field
             *
             * @returns {Object}
             */
            render: function () {
                this.setEditable(true);
                this.setValid(true);
                this.elements = {};
                var promises  = [];
                mediator.trigger('pim_enrich:form:field:extension:add', {'field': this, 'promises': promises});

                $.when.apply($, promises)
                    .then(this.getTemplateContext.bind(this))
                    .then(function (templateContext) {
                        this.$el.html(this.template(templateContext));

                        this.$('.original-field .field-input').append(this.renderInput(templateContext));

                        this.renderElements();
                        this.postRender();
                        this.delegateEvents();
                    }.bind(this));

                return this;
            },

            /**
             * Render elements of this field in different available positions
             */
            renderElements: function () {
                _.each(this.elements, function (elements, position) {
                    var $container = 'field-input' === position ?
                        this.$('.original-field .field-input') :
                        this.$('.' + position + '-elements-container');

                    $container.empty();

                    _.each(elements, function (element) {
                        if (typeof element.render === 'function') {
                            $container.append(element.render().$el);
                        } else {
                            $container.append(element);
                        }
                    }.bind(this));

                }.bind(this));
            },

            /**
             * Render the input inside the field area
             *
             * @throws {Error} if this method is not implemented
             */
            renderInput: function () {
                throw new Error('You should implement your field template');
            },

            /**
             * Is called after rendering the input
             */
            postRender: function () {},

            /**
             * Render this input in copy mode
             *
             * @param {Object} value
             *
             * @returns {Promise}
             */
            renderCopyInput: function (value) {
                return this.getTemplateContext()
                    .then(function (context) {
                        var copyContext = $.extend(true, {}, context);
                        copyContext.value = value;
                        copyContext.context.locale = value.locale;
                        copyContext.context.scope = value.scope;
                        copyContext.editMode = 'view';

                        return this.renderInput(copyContext);
                    }.bind(this));
            },

            /**
             * Get the template context
             *
             * @returns {Promise}
             */
            getTemplateContext: function () {
                var deferred = $.Deferred();

                deferred.resolve({
                    type: this.attribute.field_type,
                    label: this.getLabel(),
                    value: this.getCurrentValue(),
                    fieldId: 'field-' + Math.random().toString(10).substring(2),
                    context: this.context,
                    attribute: this.attribute,
                    info: this.elements,
                    editMode: this.getEditMode(),
                    i18n: i18n
                });

                return deferred.promise();
            },

            /**
             * Update the model linked to this field
             */
            updateModel: function () {
                this.valid = true;
            },

            /**
             * Set values to the model linked to this field
             *
             * @param {Array} values
             */
            setValues: function (values) {
                if (_.isUndefined(values) || values.length === 0) {
                    /*global console: true */
                    console.error('Value array is empty');
                }

                this.model.set('values', values);
            },

            /**
             * Set the context of this field
             *
             * @param {Object} context
             */
            setContext: function (context) {
                this.context = context;
            },

            /**
             * Add an element to this field block
             *
             * @param {string} position 'footer', 'label' or 'comparison'
             * @param {string} code
             * @param {Object} element
             */
            addElement: function (position, code, element) {
                if (!this.elements[position]) {
                    this.elements[position] = {};
                }
                this.elements[position][code] = element;
            },

            /**
             * Remove an element of this field block, with the given position & code
             *
             * @param {string} position
             * @param {string} code
             */
            removeElement: function (position, code) {
                if (this.elements[position] && this.elements[position][code]) {
                    delete this.elements[position][code];
                }
            },

            /**
             * Set as valid
             *
             * @param {boolean} valid
             */
            setValid: function (valid) {
                this.valid = valid;
            },

            /**
             * Return whether is valid
             *
             * @returns {boolean}
             */
            isValid: function () {
                return this.valid;
            },

            /**
             * Set the focus on the input of this field
             */
            setFocus: function () {
                this.$('input:first').focus();
            },

            /**
             * Set this field as editable
             *
             * @param {boolean} editable
             */
            setEditable: function (editable) {
                this.editable = editable;
            },

            /**
             * Return whether this field is editable
             *
             * @returns {boolean}
             */
            isEditable: function () {
                return this.editable;
            },

            /**
             * Set this field as ready
             *
             * @param {boolean} ready
             */
            setReady: function (ready) {
                this.ready = ready;
            },

            /**
             * Return whether this field is ready
             *
             * @returns {boolean}
             */
            isReady: function () {
                return this.ready;
            },

            /**
             * Get the current edit mode (can be 'edit' or 'view')
             *
             * @returns {string}
             */
            getEditMode: function () {
                if (this.editable) {
                    return 'edit';
                } else {
                    return 'view';
                }
            },

            /**
             * Return whether this field can be seen
             *
             * @returns {boolean}
             */
            canBeSeen: function () {
                return true;
            },

            /**
             * Get current model value for this field, in this format:
             * {locale: 'en_US', scope: null, data: 'stuff'}
             *
             * @returns {Object}
             */
            getCurrentValue: function () {
                return AttributeManager.getValue(
                    this.model.get('values'),
                    this.attribute,
                    this.context.locale,
                    this.context.scope
                );
            },

            /**
             * Set current model value for this field
             *
             * @param {*} value
             */
            setCurrentValue: function (value) {
                var productValue = this.getCurrentValue();

                productValue.data = value;
                mediator.trigger('pim_enrich:form:entity:update_state');
            },

            /**
             * Get the label of this field (default is code surrounded by brackets)
             *
             * @returns {string}
             */
            getLabel: function () {
                return this.attribute.labels[this.context.uiLocale] ?
                    this.attribute.labels[this.context.uiLocale] :
                    '[' + this.attribute.code + ']';
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 153 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/manager/attribute-manager.js ***!
  \**************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/fetcher-registry */ 10)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        FetcherRegistry
    ) {
        return {
            /**
             * Get the attributes of the given entity
             *
             * @param {Object} entity
             *
             * @return {Promise}
             */
            getAttributes: function (entity) {
                if (!entity.family) {
                    return $.Deferred().resolve(_.keys(entity.values));
                } else {
                    return FetcherRegistry.getFetcher('family')
                        .fetch(entity.family)
                        .then(function (family) {
                            return _.union(
                                _.keys(entity.values),
                                _.pluck(family.attributes, 'code')
                            );
                        });
                }
            },

            /**
             * Get all optional attributes available for a product
             *
             * @param {Object} product
             *
             * @return {Array}
             */
            getAvailableOptionalAttributes: function (product) {
                return $.when(
                    FetcherRegistry.getFetcher('attribute').fetchAll(),
                    this.getAttributes(product)
                ).then(function (attributes, productAttributes) {
                    var optionalAttributes = _.map(
                        _.difference(_.pluck(attributes, 'code'), productAttributes),
                        function (attributeCode) {
                            return _.findWhere(attributes, { code: attributeCode });
                        }
                    );

                    return optionalAttributes;
                });
            },

            /**
             * Check if an attribute is optional
             *
             * @param {Object} attribute
             * @param {Object} product
             *
             * @return {Promise}
             */
            isOptional: function (attribute, product) {
                var promise = new $.Deferred();

                if ('pim_catalog_identifier' === attribute.type) {
                    promise.resolve(false);
                } else if (undefined !== product.family && null !== product.family) {
                    promise = FetcherRegistry.getFetcher('family').fetch(product.family).then(function (family) {
                        return !_.contains(_.pluck(family.attributes, 'code'), attribute.code);
                    });
                } else {
                    promise.resolve(true);
                }

                return promise;
            },

            /**
             * Get the value in the given collection for the given locale and scope
             *
             * @param {Array}  values
             * @param {Object} attribute
             * @param {string} locale
             * @param {string} scope
             *
             * @return {Object}
             */
            getValue: function (values, attribute, locale, scope) {
                locale = attribute.localizable ? locale : null;
                scope  = attribute.scopable ? scope : null;

                return _.findWhere(values, { scope: scope, locale: locale });
            },

            /**
             * Get values for the given object
             *
             * @param {Object} object
             *
             * @return {Promise}
             */
            getValues: function (object) {
                return this.getAttributes(object).then(function (attributes) {
                    _.each(attributes, function (attributeCode) {
                        if (!_.has(object.values, attributeCode)) {
                            object.values[attributeCode] = [];
                        }
                    });

                    return object.values;
                });
            },

            /**
             * Generate a single value for the given attribute, scope and locale
             *
             * @param {Object} attribute
             * @param {string} locale
             * @param {string} scope
             *
             * @return {Object}
             */
            generateValue: function (attribute, locale, scope) {
                locale = attribute.localizable ? locale : null;
                scope  = attribute.scopable ? scope : null;

                return {
                    'locale': locale,
                    'scope':  scope,
                    'data':   attribute.empty_value
                };
            },

            /**
             * Generate all missing values for an attribute
             *
             * @param {Array}  values
             * @param {Object} attribute
             * @param {Array}  locales
             * @param {Array}  channels
             * @param {Array}  currencies
             *
             * @return {Array}
             */
            generateMissingValues: function (values, attribute, locales, channels, currencies) {
                _.each(locales, function (locale) {
                    _.each(channels, function (channel) {
                        var newValue = this.getValue(
                            values,
                            attribute,
                            locale.code,
                            channel.code
                        );

                        if (!newValue) {
                            newValue = this.generateValue(attribute, locale.code, channel.code);
                            values.push(newValue);
                        }

                        if ('pim_catalog_price_collection' === attribute.type) {
                            newValue.data = this.generateMissingPrices(newValue.data, currencies);
                        }
                    }.bind(this));
                }.bind(this));

                return values;
            },

            /**
             * Generate missing prices in the given collection for the given currencies
             *
             * @param {Array} prices
             * @param {Array} currencies
             *
             * @return {Array}
             */
            generateMissingPrices: function (prices, currencies) {
                var generatedPrices = [];
                _.each(currencies, function (currency) {
                    var price = _.findWhere(prices, { currency: currency.code });

                    if (!price) {
                        price = { amount: null, currency: currency.code };
                    }

                    generatedPrices.push(price);
                });

                return _.sortBy(generatedPrices, 'currency');
            },

            /**
             * Generate missing product associations
             *
             * @param {Array} values
             *
             * @return {Array}
             */
            generateMissingAssociations: function (values) {
                values.products = _.result(values, 'products', []).sort();
                values.groups = _.result(values, 'groups', []).sort();

                return values;
            }
        };
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 154 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/common/delete.js ***!
  \*******************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Delete extension
 *
 * @author    Clement Gautier <clement.gautier@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/form/delete */ 246),
        __webpack_require__(/*! pim/router */ 11),
        __webpack_require__(/*! oro/loading-mask */ 18),
        __webpack_require__(/*! oro/messenger */ 16),
        __webpack_require__(/*! pim/dialog */ 14)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        __,
        BaseForm,
        template,
        router,
        LoadingMask,
        messenger,
        Dialog
    ) {
        return BaseForm.extend({
            tagName: 'button',
            className: 'AknButton AknButton--important AknButton--withIcon AknTitleContainer-rightButton delete',
            template: _.template(template),
            events: {
                'click': 'delete'
            },

            /**
             * The remover should be injected / overridden by the concrete implementation
             * It is an object that define a remove function
             */
            remover: {
                remove: function () {
                    throw 'Remove function should be implemented in remover';
                }
            },

            /**
             * @param {Object} meta
             */
            initialize: function (meta) {
                this.config = _.extend({}, {
                    trans: {
                        title: 'confirmation.remove.item',
                        content: 'pim_enrich.confirmation.delete_item',
                        success: 'flash.item.removed',
                        fail: 'error.removing.item'
                    },
                    redirect: 'oro_default'
                }, meta.config);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                this.$el.html(this.template({'__': __}));
                this.delegateEvents();

                return this;
            },

            /**
             * Open a dialog to ask the user to confirm the deletion
             */
            delete: function () {
                Dialog.confirm(
                    __(this.config.trans.title),
                    __(this.config.trans.content),
                    this.doDelete.bind(this)
                );
            },

            /**
             * Send a request to the backend in order to delete the element
             */
            doDelete: function () {
                var loadingMask = new LoadingMask();
                loadingMask.render().$el.appendTo(this.getRoot().$el).show();

                this.remover.remove(this.getIdentifier())
                    .done(function () {
                        messenger.notificationFlashMessage('success', __(this.config.trans.success));
                        router.redirectToRoute(this.config.redirect);
                    }.bind(this))
                    .fail(function (xhr) {
                        var message = xhr.responseJSON && xhr.responseJSON.message ?
                            xhr.responseJSON.message :
                            __(this.config.trans.failed);

                        messenger.notificationFlashMessage('error', message);
                    })
                    .always(function () {
                        loadingMask.hide().$el.remove();
                    });
            },

            /**
             * Get the current form identifier
             *
             * @return {String}
             */
            getIdentifier: function () {
                return this.getFormData().code;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 155 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/remover/base-remover.js ***!
  \*********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! module-config */ 21),
        __webpack_require__(/*! oro/mediator */ 6)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        module,
        mediator
    ) {
        return {
            /**
             * Remove an entity
             *
             * @param {String} code
             *
             * @return {Promise}
             */
            remove: function (code) {
                return $.ajax({
                    type: 'DELETE',
                    url: this.getUrl(code)
                }).then(function (entity) {
                    mediator.trigger('pim_enrich:form:entity:post_remove', code);

                    return entity;
                }.bind(this));
            },

            /**
             * Get the entity url
             *
             * @return {String}
             */
            getUrl: function () {
                throw new Error('This method need to be implemented');
            }
        };
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 156 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/filter/attribute/attribute.js ***!
  \***************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Abstract attribute filter
 *
 * @author    Yohan Blain <yohan.blain@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)
 */



!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(/*! jquery */ 1),
    __webpack_require__(/*! underscore */ 0),
    __webpack_require__(/*! oro/translator */ 3),
    __webpack_require__(/*! pim/filter/filter */ 158),
    __webpack_require__(/*! pim/fetcher-registry */ 10),
    __webpack_require__(/*! pim/i18n */ 17),
    __webpack_require__(/*! pim/user-context */ 5),
    __webpack_require__(/*! pim/product-edit-form/scope-switcher */ 346),
    __webpack_require__(/*! pim/product-edit-form/locale-switcher */ 345)
], __WEBPACK_AMD_DEFINE_RESULT__ = function (
    $,
    _,
    __,
    BaseFilter,
    FetcherRegistry,
    i18n,
    UserContext,
    ScopeSwitcher,
    LocaleSwitcher
) {
    return BaseFilter.extend({
        /**
         * {@inherit}
         */
        initialize: function (config) {
            if (config.config) {
                this.config = config.config;
            }

            return BaseFilter.prototype.initialize.apply(this, arguments);
        },

        /**
         * Sets the scope code on which this filter operates.
         *
         * @param {string} scope
         * @param {Object} options
         */
        setScope: function (scope, options) {
            var context = this.getFormData().context || {};
            context.scope = scope;

            this.setData({context: context}, options);
        },

        /**
         * Gets the scope code on which this filter operates.
         *
         * @return {string}
         */
        getScope: function () {
            if (undefined === this.getFormData().context) {
                return null;
            }

            return this.getFormData().context.scope;
        },

        /**
         * Sets the locale code on which this filter operates.
         *
         * @param {string} locale
         * @param {Object} options
         */
        setLocale: function (locale, options) {
            var context = this.getFormData().context || {};
            context.locale = locale;

            this.setData({context: context}, options);
        },

        /**
         * Gets the locale code on which this filter operates.
         *
         * @return {string}
         */
        getLocale: function () {
            if (undefined === this.getFormData().context) {
                return null;
            }

            return this.getFormData().context.locale;
        },

        /**
         * {@inheritdoc}
         */
        renderElements: function () {
            FetcherRegistry.getFetcher('attribute')
                .fetch(this.getCode())
                .then(function (attribute) {
                    if (this.isEditable()) {
                        this.addContextDropdowns(attribute);
                    } else {
                        this.addContextLabels(attribute);
                    }
                }.bind(this))
                .then(function () {
                    BaseFilter.prototype.renderElements.apply(this, arguments);
                }.bind(this));
        },

        /**
         * Adds the context dropdown to the filter in edit mode according to attribute information.
         *
         * @param {Object} attribute
         */
        addContextDropdowns: function (attribute) {
            var container = $('<span class="filter-context">');

            if (attribute.scopable) {
                var scopeSwitcher = new ScopeSwitcher();

                this.listenTo(
                    scopeSwitcher,
                    'pim_enrich:form:scope_switcher:pre_render',
                    function (scopeEvent) {
                        if (this.getScope()) {
                            scopeEvent.scopeCode = this.getScope();
                        } else {
                            this.setScope(scopeEvent.scopeCode, {silent: true});
                        }
                    }.bind(this)
                );

                this.listenTo(
                    scopeSwitcher,
                    'pim_enrich:form:scope_switcher:change',
                    function (scopeEvent) {
                        this.setScope(scopeEvent.scopeCode, {silent: true});
                        this.trigger('pim_enrich:form:entity:post_update');
                    }.bind(this)
                );

                container.append(scopeSwitcher.render().$el);
            }

            if (attribute.localizable) {
                var localeSwitcher = new LocaleSwitcher();

                this.listenTo(
                    localeSwitcher,
                    'pim_enrich:form:locale_switcher:pre_render',
                    function (localeEvent) {
                        if (this.getLocale()) {
                            localeEvent.localeCode = this.getLocale();
                        } else {
                            this.setLocale(localeEvent.localeCode, {silent: true});
                        }
                    }.bind(this)
                );

                this.listenTo(
                    localeSwitcher,
                    'pim_enrich:form:locale_switcher:change',
                    function (localeEvent) {
                        this.setLocale(localeEvent.localeCode, {silent: true});
                        this.trigger('pim_enrich:form:entity:post_update');
                    }.bind(this)
                );

                container.append(localeSwitcher.render().$el);
            }

            this.addElement(
                'after-input',
                'filter-context',
                container
            );
        },

        /**
         * {@inheritdoc}
         */
        getTemplateContext: function () {
            return $.when(
                BaseFilter.prototype.getTemplateContext.apply(this, arguments),
                FetcherRegistry.getFetcher('attribute').fetch(this.getCode())
            ).then(function (templateContext, attribute) {
                return _.extend({}, templateContext, {
                    label: i18n.getLabel(attribute.labels, UserContext.get('uiLocale'), attribute.code),
                    attribute: attribute
                });
            }.bind(this));
        },

        /**
         * Adds the context labels to the filter in view mode according to attribute information.
         *
         * @param {Object} attribute
         */
        addContextLabels: function (attribute) {
            var promises = [];

            if (attribute.scopable && this.getScope()) {
                promises.push(FetcherRegistry.getFetcher('channel')
                    .fetch(this.getScope())
                    .then(function (channel) {
                        return $('<span>').html(channel.label);
                    })
                );
            }

            if (attribute.localizable && this.getLocale()) {
                promises.push(
                    $.Deferred()
                        .resolve($('<span>').html(i18n.getFlag(this.getLocale())))
                        .promise()
                );
            }

            $.when.apply($, promises)
                .then(function () {
                    var container = $('<span class="filter-context">');
                    _.each(_.toArray(arguments), function (item) {
                        container.append(item);
                    });

                    this.addElement(
                        'after-input',
                        'filter-context',
                        container
                    );
                }.bind(this));
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 157 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/saver/base-saver.js ***!
  \*****************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! module-config */ 21),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! routing */ 4)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        module,
        mediator,
        Routing
    ) {
        return {
            /**
             * Save an entity
             *
             * @param {String} code
             * @param {Object} data
             *
             * @return {Promise}
             */
            save: function (code, data, method) {
                return $.ajax({
                    /* todo: remove ternary when all instances using this module will provide method parameter */
                    type: 'undefined' === typeof method ? 'POST' : method,
                    url: this.getUrl(code),
                    data: JSON.stringify(data)
                }).then(function (entity) {
                    mediator.trigger('pim_enrich:form:entity:post_save', entity);

                    return entity;
                }.bind(this));
            },

            /**
             * Get the entity url
             * @param {String} code
             *
             * @return {String}
             */
            getUrl: function (code) {
                return Routing.generate(module.config().url, {code: code});
            }
        };
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 158 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/filter/filter.js ***!
  \**************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(/*! jquery */ 1),
    __webpack_require__(/*! underscore */ 0),
    __webpack_require__(/*! oro/translator */ 3),
    __webpack_require__(/*! oro/mediator */ 6),
    __webpack_require__(/*! pim/form */ 149),
    __webpack_require__(/*! pim/template/filter/filter */ 234)
], __WEBPACK_AMD_DEFINE_RESULT__ = function (
    $,
    _,
    __,
    mediator,
    BaseForm,
    filterTemplate
) {
    return BaseForm.extend({
        className: 'AknFieldContainer control-group filter-item',
        elements: {},
        editable: true,
        removable: false,
        filterTemplate: _.template(filterTemplate),

        configure: function () {
            this.listenTo(this.getRoot(), 'pim_enrich:form:entity:pre_update', function (data) {
                _.defaults(data, {field: this.getCode()});
            }.bind(this));

            return BaseForm.prototype.configure.apply(this, arguments);
        },

        /**
         * Sets the parentForm code on which this filter operates.
         *
         * @param {string} parentForm
         */
        setParentForm: function (parentForm) {
            this.parentForm = parentForm;
        },

        /**
         * Gets the parentForm code on which this filter operates.
         *
         * @return {string}
         */
        getParentForm: function () {
            return this.parentForm;
        },

        /**
         * Sets the filter code  (code: 'categories', field: 'categories')
         *
         * @param {string} code
         */
        setCode: function (code) {
            this.filterCode = code;
        },

        /**
         * Gets the filter code (code: 'categories', field: 'categories')
         *
         * @return {string}
         */
        getCode: function () {
            return this.filterCode;
        },

        /**
         * Sets the field code on which this filter operates. (code: 'categories', field: 'categories')
         *
         * @param {string} field
         */
        setField: function (field) {
            this.setData(
                {field: field},
                {silent: true}
            );
        },

        /**
         * Gets the field code on which this filter operates.  (code: 'categories', field: 'categories')
         *
         * @return {string}
         */
        getField: function () {
            return this.getFormData().field;
        },

        /**
         * Type setter
         *
         * @param {string} type
         */
        setType: function (type) {
            this.type = type;
        },

        /**
         * Get the type identifier
         *
         * @return {string}
         */
        getType: function () {
            return this.type;
        },

        /**
         * Set the field operator
         *
         * @param {string} operator
         */
        setOperator: function (operator) {
            this.setData(
                {operator: operator},
                {silent: true}
            );
        },

        /**
         * Gets the current operator.
         *
         * @return {string}
         */
        getOperator: function () {
            return this.getFormData().operator;
        },

        /**
         * Sets the current value.
         *
         * @param {string} value
         * @param {object} options
         */
        setValue: function (value, options) {
            options = options || {silent: true};

            this.setData(
                {value: value},
                options
            );
        },

        /**
         * Gets the current value.
         *
         * @return {string}
         */
        getValue: function () {
            return this.getFormData().value;
        },

        /**
         * Sets this filter as editable or not.
         *
         * @param {boolean} editable
         */
        setEditable: function (editable) {
            this.editable = Boolean(editable);
        },

        /**
         * Is this filter editable?
         *
         * @returns {boolean}
         */
        isEditable: function () {
            return this.editable;
        },

        /**
         * Returns whether this filter is empty.
         *
         * @returns {boolean}
         */
        isEmpty: function () {
            return false;
        },

        /**
         * Sets this filter as removable or not.
         *
         * @param {boolean} removable
         */
        setRemovable: function (removable) {
            this.removable = removable;
        },

        /**
         * Is this filter removable?
         *
         * @return {boolean}
         */
        isRemovable: function () {
            return this.removable;
        },

        /**
         * Triggers the filter removal event.
         */
        removeFilter: function () {
            this.trigger('filter:remove', this.getField());
        },

        /**
         * Renders the filter.
         *
         * @return {Object}
         */
        render: function () {
            var promises  = [];
            this.elements = {};
            this.setEditable(true);

            mediator.trigger('pim_enrich:form:filter:extension:add', {filter: this, promises: promises});

            $.when.apply($, promises)
                .then(this.getTemplateContext.bind(this))
                .then(function (templateContext) {
                    this.el.dataset.name = this.getField();
                    this.el.dataset.type = this.getType();

                    this.$el.html(this.filterTemplate(templateContext));
                    this.$('.remove').on('click', this.removeFilter.bind(this));
                    this.$('.filter-input').replaceWith(this.renderInput(templateContext));

                    this.renderElements();
                    this.postRender(templateContext);
                    this.delegateEvents();
                }.bind(this));

            return this;
        },

        /**
         * Gets the template context.
         *
         * @returns {Promise}
         */
        getTemplateContext: function () {
            return $.Deferred().resolve({
                label: __('pim_enrich.export.product.filter.' + this.shortname + '.title'),
                removable: this.isRemovable(),
                editable: this.isEditable()
            }).promise();
        },

        /**
         * Renders the input inside the filter area.
         *
         * @throws {Error} if this method is not implemented
         */
        renderInput: function () {
            throw new Error('You should implement your filter template');
        },

        /**
         * Renders extension elements of the filter.
         */
        renderElements: function () {
            _.each(this.elements, function (elements, position) {
                var $container = this.$('.' + position + '-elements-container');
                $container.empty();

                _.each(elements, function (element) {
                    if ('function' === typeof element.render) {
                        $container.append(element.render().$el);
                    } else {
                        $container.append(element);
                    }
                });
            }.bind(this));
        },

        /**
         * Called after rendering the input.
         */
        postRender: function () {},

        /**
         * Adds an extension element to this filter.
         *
         * @param {string} position 'label', 'after-input' or 'below-input'
         * @param {string} code
         * @param {Object} element
         */
        addElement: function (position, code, element) {
            if (!this.elements[position]) {
                this.elements[position] = {};
            }

            this.elements[position][code] = element;
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 159 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/common/save.js ***!
  \*****************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Save extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! module-config */ 21),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! oro/loading-mask */ 18),
        __webpack_require__(/*! oro/messenger */ 16)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        __,
        module,
        BaseForm,
        mediator,
        LoadingMask,
        messenger
    ) {
        return BaseForm.extend({
            loadingMask: null,
            updateFailureMessage: __('pim_enrich.entity.info.update_failed'),
            updateSuccessMessage: __('pim_enrich.entity.info.update_successful'),
            label: __('pim_enrich.entity.save.label'),

            /**
             * {@inheritdoc}
             */
            initialize: function (config) {
                this.config = config.config;

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            configure: function () {
                this.trigger('save-buttons:register-button', {
                    className: 'save',
                    priority: 200,
                    label: this.label,
                    events: {
                        'click .save': this.save.bind(this)
                    }
                });

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * Save the current form
             */
            save: function () {
                throw new Error('This method must be implemented');
            },

            /**
             * Show the loading mask
             */
            showLoadingMask: function () {
                this.loadingMask = new LoadingMask();
                this.loadingMask.render().$el.appendTo(this.getRoot().$el).show();
            },

            /**
             * Hide the loading mask
             */
            hideLoadingMask: function () {
                this.loadingMask.hide().$el.remove();
            },

            /**
             * What to do after a save
             */
            postSave: function () {
                this.getRoot().trigger('pim_enrich:form:entity:post_save');

                messenger.notificationFlashMessage(
                    'success',
                    this.updateSuccessMessage
                );
            },

            /**
             * On save fail
             *
             * @param {Object} response
             */
            fail: function (response) {
                switch (response.status) {
                    case 400:
                        mediator.trigger(
                            'pim_enrich:form:entity:bad_request',
                            {'sentData': this.getFormData(), 'response': response.responseJSON}
                        );
                        break;
                    case 500:
                        /* global console */
                        var message = response.responseJSON ? response.responseJSON : response;

                        console.error('Errors:', message);
                        this.getRoot().trigger('pim_enrich:form:entity:error:save', message);
                        break;
                    default:
                }

                messenger.notificationFlashMessage(
                    'error',
                    this.updateFailureMessage
                );
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 160 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/date-context.js ***!
  \*************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! backbone */ 2), __webpack_require__(/*! routing */ 4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Backbone, Routing) {
        var DateContext = Backbone.Model.extend({
            url: Routing.generate('pim_localization_format_date')
        });

        var instance = new DateContext();

        instance.fetch({async: false});

        return instance;
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 161 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************!*\
  !*** ./src/Pim/Bundle/UIBundle/Resources/public/js/pim-datepicker.js ***!
  \***********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1), __webpack_require__(/*! underscore */ 0), __webpack_require__(/*! oro/translator */ 3), __webpack_require__(/*! bootstrap.datetimepicker */ 372)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, __) {
        'use strict';

        return {
            options: {
                language: 'en',
                pickTime: false
            },
            init: function ($target, options) {
                options = $.extend(true, {}, this.options, options);

                if (('en' !== options.language) && (undefined === $.fn.datetimepicker.dates[options.language])) {
                    var languageOptions = {};
                    var defaultOptions = $.fn.datetimepicker.dates.en;

                    _.each(_.keys(defaultOptions), function (key) {
                        languageOptions[key] = [];
                        _.each(defaultOptions[key], function (value) {
                            languageOptions[key].push(__('datetimepicker.' + key + '.' + value));
                        });
                    });

                    $.fn.datetimepicker.dates[options.language] = languageOptions;
                }

                $target.datetimepicker(options);

                return $target;
            }
        };
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 162 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/js/datafilter/filter/select-filter.js ***!
  \**********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global define */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ 0), __webpack_require__(/*! oro/translator */ 3), __webpack_require__(/*! oro/datafilter/abstract-filter */ 50), __webpack_require__(/*! oro/multiselect-decorator */ 174)], __WEBPACK_AMD_DEFINE_RESULT__ = function(_, __, AbstractFilter, MultiselectDecorator) {
    'use strict';

    /**
     * Select filter: filter value as select option
     *
     * @export  oro/datafilter/select-filter
     * @class   oro.datafilter.SelectFilter
     * @extends oro.datafilter.AbstractFilter
     */
    return AbstractFilter.extend({
        /**
         * Filter template
         *
         * @property
         */
        template: _.template(
            '<div class="AknActionButton filter-select filter-criteria-selector">' +
                '<% if (showLabel) { %><%= label %>: <% } %>' +
                '<select>' +
                    '<% _.each(options, function (option) { %>' +
                        '<option value="<%= option.value %>"<% if (option.value == emptyValue.type) { %> selected="selected"<% } %>><%= option.label %></option>' +
                    '<% }); %>' +
                '</select>' +
            '</div>' +
            '<% if (canDisable) { %><a href="<%= nullLink %>" class="disable-filter"><i class="icon-remove hide-text"><%- _.__("Close") %></i></a><% } %>'
        ),

        /**
         * Should default value be added to options list
         *
         * @property
         */
        populateDefault: true,

        /**
         * Selector for filter area
         *
         * @property
         */
        containerSelector: '.filter-select',

        /**
         * Selector for close button
         *
         * @property
         */
        disableSelector: '.disable-filter',

        /**
         * Selector for widget button
         *
         * @property
         */
        buttonSelector: '.select-filter-widget.ui-multiselect:first',

        /**
         * Selector for select input element
         *
         * @property
         */
        inputSelector: 'select',

        /**
         * Select widget object
         *
         * @property
         */
        selectWidget: null,

        /**
         * Minimum widget menu width, calculated depends on filter options
         *
         * @property
         */
        minimumWidth: null,

        /**
         * Select widget options
         *
         * @property
         */
        widgetOptions: {
            multiple: false,
            classes: 'AknActionButton-selectButton select-filter-widget'
        },

        /**
         * Select widget menu opened flag
         *
         * @property
         */
        selectDropdownOpened: false,

        /**
         * @property {Boolean}
         */
        contextSearch: true,

        /**
         * Filter events
         *
         * @property
         */
        events: {
            'keydown select': '_preventEnterProcessing',
            'click .filter-select': '_onClickFilterArea',
            'click .disable-filter': '_onClickDisableFilter',
            'change select': '_onSelectChange'
        },

        /**
         * Initialize.
         *
         * @param {Object} options
         */
        initialize: function() {
            // init filter content options if it was not initialized so far
            if (_.isUndefined(this.choices)) {
                this.choices = [];
            }
            // temp code to keep backward compatible
            this.choices = _.map(this.choices, function(option, i) {
                return _.isString(option) ? {value: i, label: option} : option;
            });

            // init empty value object if it was not initialized so far
            if (_.isUndefined(this.emptyValue)) {
                this.emptyValue = {
                    value: ''
                };
            }

            AbstractFilter.prototype.initialize.apply(this, arguments);
        },

        /**
         * Render filter template
         *
         * @return {*}
         */
        render: function () {
            var options =  this.choices.slice(0);
            this.$el.empty();

            if (this.populateDefault) {
                options.unshift({value: '', label: this.placeholder});
            }

            this.$el.append(
                this.template({
                    label: this.label,
                    showLabel: this.showLabel,
                    options: options,
                    placeholder: this.placeholder,
                    nullLink: this.nullLink,
                    canDisable: this.canDisable,
                    emptyValue: this.emptyValue
                })
            );

            this._updateDOMValue();
            this._initializeSelectWidget();

            return this;
        },

        /**
         * Initialize multiselect widget
         *
         * @protected
         */
        _initializeSelectWidget: function() {
            this.selectWidget = new MultiselectDecorator({
                element: this.$(this.inputSelector),
                parameters: _.extend({
                    noneSelectedText: this.placeholder,
                    selectedText: _.bind(function(numChecked, numTotal, checkedItems) {
                        return this._getSelectedText(checkedItems);
                    }, this),
                    position: {
                        my: 'left top+2',
                        at: 'left bottom',
                        of: this.$(this.containerSelector)
                    },
                    open: _.bind(function() {
                        this.selectWidget.onOpenDropdown();
                        this._setDropdownWidth();
                        this._setButtonPressed(this.$(this.containerSelector), true);
                        this.selectDropdownOpened = true;
                    }, this),
                    close: _.bind(function() {
                        this._setButtonPressed(this.$(this.containerSelector), false);
                        setTimeout(_.bind(function() {
                            this.selectDropdownOpened = false;
                        }, this), 100);
                    }, this)
                }, this.widgetOptions),
                contextSearch: this.contextSearch
            });

            this.selectWidget.setViewDesign(this);
            this.$(this.buttonSelector)
                .append('<span class="AknActionButton-caret AknCaret"></span>')
                .find('span:first-child').addClass('filter-criteria-hint');
        },

        /**
         * Get text for filter hint
         *
         * @param {Array} checkedItems
         * @protected
         */
        _getSelectedText: function(checkedItems) {
            if (_.isEmpty(checkedItems)) {
                return this.placeholder;
            }

            var elements = [];
            _.each(checkedItems, function(element) {
                var title = element.getAttribute('title');
                if (title) {
                    elements.push(title);
                }
            });
            return elements.join(', ');
        },

        /**
         * Get criteria hint value
         *
         * @return {String}
         */
        _getCriteriaHint: function() {
            var value = (arguments.length > 0) ? this._getDisplayValue(arguments[0]) : this._getDisplayValue();
            var choice = _.find(this.choices, function (c) {
                return (c.value == value.value);
            });
            return !_.isUndefined(choice) ? choice.label : this.placeholder;
        },

        /**
         * Set design for select dropdown
         *
         * @protected
         */
        _setDropdownWidth: function() {
            if (!this.minimumWidth) {
                this.minimumWidth = this.selectWidget.getMinimumDropdownWidth() + 22;
            }
            var widget = this.selectWidget.getWidget(),
                filterWidth = this.$(this.containerSelector).width(),
                requiredWidth = Math.max(filterWidth + 10, this.minimumWidth);
            widget.width(requiredWidth).css('min-width', requiredWidth + 'px');
            widget.find('input[type="search"]').width(requiredWidth - 22);
        },

        /**
         * Open/close select dropdown
         *
         * @param {Event} e
         * @protected
         */
        _onClickFilterArea: function(e) {
            if (!this.selectDropdownOpened) {
                setTimeout(_.bind(function() {
                    this.selectWidget.multiselect('open');
                }, this), 50);
            } else {
                setTimeout(_.bind(function() {
                    this.selectWidget.multiselect('close');
                }, this), 50);
            }

            e.stopPropagation();
        },

        /**
         * Triggers change data event
         *
         * @protected
         */
        _onSelectChange: function() {
            // set value
            this.setValue(this._formatRawValue(this._readDOMValue()));

            // update dropdown
            var widget = this.$(this.containerSelector);
            this.selectWidget.updateDropdownPosition(widget);
        },

        /**
         * Handle click on filter disabler
         *
         * @param {Event} e
         */
        _onClickDisableFilter: function(e) {
            e.preventDefault();
            this.disable();
        },

        /**
         * @inheritDoc
         */
        _isNewValueUpdated: function(newValue) {
            return !_.isEqual(this.getValue().value || '', newValue.value);
        },

        /**
         * @inheritDoc
         */
        _onValueUpdated: function(newValue, oldValue) {
            AbstractFilter.prototype._onValueUpdated.apply(this, arguments);

            if (this.selectWidget) {
                this.selectWidget.multiselect('refresh');
            }
        },

        /**
         * @inheritDoc
         */
        _writeDOMValue: function(value) {
            this._setInputValue(this.inputSelector, value.value);
            return this;
        },

        /**
         * @inheritDoc
         */
        _readDOMValue: function() {
            return {
                value: this._getInputValue(this.inputSelector)
            };
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 163 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/manager/product-manager.js ***!
  \************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! module-config */ 21),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! pim/attribute-manager */ 153),
        __webpack_require__(/*! pim/fetcher-registry */ 10)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        module,
        mediator,
        Routing,
        AttributeManager,
        FetcherRegistry
    ) {
        return {
            productValues: null,
            doGenerateMissing: function (product) {
                return AttributeManager.getAttributes(product)
                    .then(function (productAttributeCodes) {
                        return $.when(
                            FetcherRegistry.getFetcher('attribute').fetchByIdentifiers(productAttributeCodes),
                            FetcherRegistry.getFetcher('locale').fetchActivated(),
                            FetcherRegistry.getFetcher('channel').fetchAll(),
                            FetcherRegistry.getFetcher('currency').fetchAll(),
                            FetcherRegistry.getFetcher('association-type').fetchAll()
                        );
                    })
                    .then(function (attributes, locales, channels, currencies, associationTypes) {
                        var oldValues = _.isArray(product.values) && 0 === product.values.length ? {} : product.values;
                        var newValues = {};

                        _.each(attributes, function (attribute) {
                            newValues[attribute.code] = AttributeManager.generateMissingValues(
                                _.has(oldValues, attribute.code) ? oldValues[attribute.code] : [],
                                attribute,
                                locales,
                                channels,
                                currencies
                            );
                        });

                        var associations = {};
                        _.each(associationTypes, function (assocType) {
                            associations[assocType.code] = AttributeManager.generateMissingAssociations(
                                _.has(product.associations, assocType.code) ? product.associations[assocType.code] : {}
                            );
                        });

                        product.values       = newValues;
                        product.associations = associations;

                        return product;
                    });
            },
            generateMissing: function (product) {
                return this.doGenerateMissing(product);
            }
        };
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 164 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/js/datagrid/listener/abstract-listener.js ***!
  \**************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, nomen: true*/
/*global define*/
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ 0), __webpack_require__(/*! jquery */ 1), __webpack_require__(/*! backbone */ 2)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, $, Backbone) {
    'use strict';

    /**
     * Abstarct listener for datagrid
     *
     * @export  oro/datagrid/abstract-listener
     * @class   oro.datagrid.AbstractListener
     * @extends Backbone.Model
     */
    return Backbone.Model.extend({
        /** @param {String} Column name of cells that will be listened for changing their values */
        columnName: 'id',

        /** @param {String} Model field that contains data */
        dataField: 'id',

        /**
         * Initialize listener object
         *
         * @param {Object} options
         */
        initialize: function (options) {
            if (!_.has(options, 'columnName')) {
                throw new Error('Data column name is not specified');
            }
            this.columnName = options.columnName;

            if (options.dataField) {
                this.dataField = options.dataField;
            }

            Backbone.Model.prototype.initialize.apply(this, arguments);

            if (!options.$gridContainer) {
                throw new Error('gridSelector is not specified');
            }
            this.$gridContainer = options.$gridContainer;
            this.gridName = options.gridName;

            this.setDatagridAndSubscribe();
        },

        /**
         * Set datagrid instance
         */
        setDatagridAndSubscribe: function () {
            this.$gridContainer.on('datagrid:change:' + this.gridName, this._onModelEdited.bind(this));
        },

        /**
         * Process cell editing
         *
         * @param {Backbone.Model} model
         * @protected
         */
        _onModelEdited: function (e, model) {
            if (!model.hasChanged(this.columnName)) {
                return;
            }

            var value = model.get(this.dataField);

            if (!_.isUndefined(value)) {
                this._processValue(value, model);
            }
        },

        /**
         * Process value
         *
         * @param {*} value Value of model property with name of this.dataField
         * @param {Backbone.Model} model
         * @protected
         * @abstract
         */
        _processValue: function (value, model) {
            throw new Error('_processValue method is abstract and must be implemented');
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 165 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/common/grid.js ***!
  \*****************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! oro/datagrid-builder */ 53),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! pim/template/form/grid */ 250),
        __webpack_require__(/*! oro/pageable-collection */ 24),
        __webpack_require__(/*! pim/datagrid/state */ 44)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        Backbone,
        datagridBuilder,
        Routing,
        mediator,
        template,
        PageableCollection,
        DatagridState
    ) {
        return Backbone.View.extend({
            template: _.template(template),
            className: 'AknTabContainer-content--fullWidth',
            urlParams: {},

            /**
             * {@inheritdoc}
             */
            initialize: function (alias, options) {
                this.alias = alias;
                this.selection = options.selection || [];
                this.selection = _.map(this.selection, function (item) {
                    return String(item);
                });
                this.options = options;

                mediator.on('datagrid:selectModel:' + this.alias, function (model) {
                    this.addElement(model.get('id'));
                }.bind(this));

                mediator.on('datagrid:unselectModel:' + this.alias, function (model) {
                    this.removeElement(model.get('id'));
                }.bind(this));
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                this.$el.html(this.template({}));

                this.renderGrid(this.alias, this.options);

                return this;
            },

            /**
             * Render the given grid
             *
             * @param {String} alias
             * @param {Object} params
             */
            renderGrid: function (alias, params) {
                this.urlParams = $.extend(true, {}, params);
                this.urlParams.alias = alias;
                this.urlParams.params = $.extend(true, {}, params);
                this.urlParams[alias] = $.extend(true, {}, params);

                var viewStored = DatagridState.get(alias, ['view']);
                if (!viewStored.view) {
                    DatagridState.refreshFiltersFromUrl(alias);
                }

                var state = DatagridState.get(alias, ['view', 'filters', 'columns']) || {};
                this.applyView(state.view, alias);
                this.applyFilters(state.filters, alias);
                this.applyColumns(state.columns, alias);

                //TODO Manage columns for product form (when refactoring product form index)
                //TODO Manage category filter (when refactoring category index)

                $.get(Routing.generate('pim_datagrid_load', this.urlParams)).then(function (response) {

                    this.$el.find('.grid-drop').data({
                        metadata: response.metadata,
                        data: JSON.parse(response.data)
                    });

                    !(function webpackMissingModule() { var e = new Error("Cannot find module \"unsupported\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())
                }.bind(this));
            },

            /**
             * Get the current grid selection
             *
             * @return {Array}
             */
            getSelection: function () {
                return this.selection;
            },

            /**
             * Add an element to the selection
             *
             * @param {Object} element
             */
            addElement: function (element) {
                this.selection = _.union(this.selection, [element]);
                this.trigger('grid:selection:updated', this.selection);
            },

            /**
             * Remove an element to the selection
             *
             * @param {Object} element
             */
            removeElement: function (element) {
                this.selection = _.without(this.selection, element);
                this.trigger('grid:selection:updated', this.selection);
            },

            /**
             * Ask for a refresh of the grid (aware that we should not call the mediator for that but we don't have
             * the choice for now)
             */
            refresh: function () {
                mediator.trigger('datagrid:doRefresh:' + this.alias);
            },

            /**
             * Apply the view to the DatagridState
             * @param viewId
             * @param alias
             */
            applyView: function (viewId, alias) {
                if (!viewId) {
                    return;
                }

                this.urlParams[alias + '[_parameters][view][id]'] = viewId;

                DatagridState.set(alias, {
                    view: viewId
                });
            },

            /**
             * Apply the filters to the DatagridState
             * @param rawFilters
             * @param alias
             */
            applyFilters: function (rawFilters, alias) {
                if (!rawFilters) {
                    return;
                }

                var filters = PageableCollection.prototype.decodeStateData(rawFilters);
                var options = {};

                if (!_.isEmpty(filters.filters)) {
                    options = {
                        state: {
                            filters: _.omit(filters.filters, 'scope')
                        }
                    };
                }

                var collection = new PageableCollection(null, options);
                collection.processFiltersParams(this.urlParams, filters, alias + '[_filter]');

                for (var column in filters.sorters) {
                    this.urlParams[alias + '[_sort_by][' + column + ']'] =
                        1 === parseInt(filters.sorters[column]) ?
                            'DESC' :
                            'ASC';
                }

                if (undefined !== filters.pageSize) {
                    this.urlParams[alias + '[_pager][_per_page]'] = filters.pageSize;
                }

                if (undefined !== filters.currentPage) {
                    this.urlParams[alias + '[_pager][_page]'] = filters.currentPage;
                }

                DatagridState.set(alias, {
                    filters: rawFilters
                });
            },

            /**
             * Apply the columns to the DatagridState
             * @param columns
             * @param alias
             */
            applyColumns: function (columns, alias) {
                if (!columns) {
                    return;
                }

                if (_.isArray(columns)) {
                    columns = columns.join();
                }
                this.urlParams[alias + '[_parameters][view][columns]'] = columns;

                DatagridState.set(alias, {
                    columns: columns
                });
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 166 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/common/label.js ***!
  \******************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Label extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! pim/form */ 149), __webpack_require__(/*! pim/user-context */ 5), __webpack_require__(/*! pim/i18n */ 17)], __WEBPACK_AMD_DEFINE_RESULT__ = function (BaseForm, UserContext, i18n) {
        return BaseForm.extend({
            tagName: 'h1',
            className: 'AknTitleContainer-title',

            /**
             * {@inheritdoc}
             */
            configure: function () {
                UserContext.off('change:catalogLocale', this.render);
                this.listenTo(UserContext, 'change:catalogLocale', this.render);
                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:post_update', this.render);

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                this.$el.text(
                    this.getLabel()
                );

                return this;
            },

            /**
             * Provide the object label
             *
             * @return {String}
             */
            getLabel: function () {
                var data = this.getFormData();

                return i18n.getLabel(
                    data.labels,
                    UserContext.get('catalogLocale'),
                    data.code
                );
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 167 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/formatter/date-formatter.js ***!
  \*************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Format a date according to specified format.
 * It instantiates a datepicker on-the-fly to perform the conversion.
 *
 * @author    Willy Mesnage <willy.mesnage@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! datepicker */ 161),
        __webpack_require__(/*! pim/date-context */ 160)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        Datepicker,
        DateContext
    ) {
        return {
            /**
             * Date widget options
             */
            datetimepickerOptions: {
                format: DateContext.get('date').format,
                defaultFormat: DateContext.get('date').defaultFormat,
                language: DateContext.get('language')
            },

            /**
             * Format a date according to specified format.
             * It instantiates a datepicker on-the-fly to perform the conversion. Not possible to use the "real"
             * ones since we need to format a date even when the UI is not initialized yet.
             *
             * @param {String} date
             * @param {String} fromFormat
             * @param {String} toFormat
             *
             * @return {String}
             */
            format: function (date, fromFormat, toFormat) {
                if (_.isEmpty(date) || _.isUndefined(date) || _.isArray(date)) {
                    return null;
                }

                var options = $.extend({}, this.datetimepickerOptions, {format: fromFormat});
                var fakeDatepicker = Datepicker.init($('<input>'), options).data('datetimepicker');

                if (null !== fakeDatepicker.parseDate(date)) {
                    fakeDatepicker.setValue(date);
                    fakeDatepicker.format = toFormat;
                    fakeDatepicker._compileFormat();
                }

                return fakeDatepicker.formatDate(fakeDatepicker.getDate());
            }
        };
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 168 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/common/edit/field/field.js ***!
  \****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Base field form extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(/*! underscore */ 0),
    __webpack_require__(/*! oro/translator */ 3),
    __webpack_require__(/*! pim/form */ 149),
    __webpack_require__(/*! pim/common/property */ 151),
    __webpack_require__(/*! pim/template/export/common/edit/field/field */ 204)
], __WEBPACK_AMD_DEFINE_RESULT__ = function (
    _,
    __,
    BaseForm,
    propertyAccessor,
    template
) {
    return BaseForm.extend({
        template: _.template(template),

        /**
         * {@inheritdoc}
         */
        initialize: function (config) {
            this.config = config.config;

            BaseForm.prototype.initialize.apply(this, arguments);
        },

        /**
         * {@inheritdoc}
         */
        render: function () {
            this.$el.html(
                this.template(this.getTemplateContext())
            );

            this.$('.field-input').prepend(this.renderInput(this.getTemplateContext()));
            this.$('[data-toggle="tooltip"]').tooltip();

            this.delegateEvents();

            return this;
        },

        /**
         * Render the input itself
         *
         * @param {object} templateContext
         *
         * @return {string}
         */
        renderInput: function (templateContext) {
            return this.fieldTemplate(templateContext);
        },

        /**
         * Get the template object for the field
         *
         * @return {object}
         */
        getTemplateContext: function () {
            return {
                __: __,
                value: this.getValue(),
                config: this.config,
                error: this.getParent().getValidationErrorsForField(this.getFieldCode())
            };
        },

        /**
         * Get the current value of the field
         *
         * @return {mixed}
         */
        getValue: function () {
            return propertyAccessor.accessProperty(this.getFormData(), this.getFieldCode());
        },

        /**
         * Get the field code of the property
         *
         * @return {strign}
         */
        getFieldCode: function () {
            return this.config.fieldCode;
        },

        /**
         * Update the model after dom update
         */
        updateState: function () {
            var data = propertyAccessor.updateProperty(this.getFormData(), this.getFieldCode(), this.getFieldValue());

            this.setData(data);
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 169 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/form/attributes/add-select/attribute/select.js ***!
  \****************************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Product add attribute select extension view
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/common/add-select */ 181),
        __webpack_require__(/*! pim/product/add-select/attribute/line */ 343),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/attribute-manager */ 153),
        __webpack_require__(/*! pim/formatter/choices/base */ 46)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        __,
        BaseAddSelect,
        LineView,
        FetcherRegistry,
        AttributeManager,
        ChoicesFormatter
    ) {
        return BaseAddSelect.extend({
            className: 'add-attribute',
            lineView: LineView,
            defaultConfig: {
                select2: {
                    placeholder: 'pim_enrich.form.common.tab.attributes.btn.add_attributes',
                    title: 'pim_enrich.form.common.tab.attributes.info.search_attributes',
                    buttonTitle: 'pim_enrich.form.common.tab.attributes.btn.add',
                    countTitle: 'pim_enrich.form.product.tab.attributes.info.attributes_selected',
                    emptyText: 'pim_enrich.form.common.tab.attributes.info.no_available_attributes',
                    classes: 'pim-add-attributes-multiselect',
                    minimumInputLength: 0,
                    dropdownCssClass: 'add-attribute',
                    closeOnSelect: false
                },
                resultsPerPage: 10,
                searchParameters: {options: {exclude_unique: true}},
                mainFetcher: 'attribute',
                events: {
                    disable: null,
                    enable: null,
                    add: 'add-attribute:add'
                }
            },

            /**
             * {@inheritdoc}
             */
            getItemsToExclude: function () {
                return AttributeManager.getAttributes(this.getFormData());
            },

            /**
             * {@inheritdoc}
             */
            prepareChoices: function (items) {
                return _.chain(items).map(function (item) {
                    var group = ChoicesFormatter.formatOne(item.group);
                    var choice = ChoicesFormatter.formatOne(item);
                    choice.group = group;

                    return choice;
                }).value();
            },

            /**
             * Triggers configured event with items codes selected
             */
            addItems: function () {
                this.trigger(this.addEvent, { codes: this.selection });
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));



/***/ }),
/* 170 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************************!*\
  !*** ./src/Pim/Bundle/NavigationBundle/Resources/public/js/navigation/model.js ***!
  \*********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global define */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ 0), __webpack_require__(/*! routing */ 4), __webpack_require__(/*! backbone */ 2)], __WEBPACK_AMD_DEFINE_RESULT__ = function(_, routing, Backbone) {
    'use strict';

    /**
     * @export  oro/navigation/model
     * @class   oro.navigation.Model
     * @extends Backbone.Model
     */
    return Backbone.Model.extend({
        defaults: {
            title: '',
            url: null,
            position: null,
            type: null
        },

        url: function() {
            var base = _.result(this, 'urlRoot') || _.result(this.collection, 'url');
            if (base && base.indexOf(this.get('type')) === -1) {
                base += (base.charAt(base.length - 1) === '/' ? '' : '/') + this.get('type');
            } else if (!base) {
                base = routing.generate('oro_api_get_navigationitems', { type: this.get('type') });
            }
            if (this.isNew()) {
                return base;
            }
            return base + (base.charAt(base.length - 1) === '/' ? '' : '/') + 'ids/' + encodeURIComponent(this.id);
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 171 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/templates/filter/select2-choice-filter.html ***!
  \****************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"AknFilterChoice choicefilter\">\n    <div class=\"AknFilterChoice-operator AknDropdown\">\n        <% if (emptyChoice) { %>\n            <button type=\"button\" class=\"AknActionButton AknActionButton--big AknActionButton--noRightBorder dropdown-toggle\" data-toggle=\"dropdown\">\n                <%= selectedOperatorLabel %>\n                <span class=\"AknCaret\"></span>\n            </button>\n            <ul class=\"dropdown-menu\">\n                <% _.each(operatorChoices, function (label, operator) { %>\n                    <li<% if (selectedOperator == operator) { %> class=\"active\"<% } %>>\n                        <a class=\"operator_choice\" href=\"#\" data-value=\"<%= operator %>\"><%= label %></a>\n                    </li>\n                <% }); %>\n            </ul>\n        <% } %>\n    </div>\n    <input type=\"text\" name=\"value\" class=\"AknTextField AknTextField--select2 AknTextField--noRadius AknFilterChoice-field select-field\">\n    <button type=\"button\" class=\"AknFilterChoice-button AknButton AknButton--apply AknButton--noLeftRadius filter-update\"><%- _.__('Update') %></button>\n</div>\n"

/***/ }),
/* 172 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/form/properties/translation.html ***!
  \*************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"tabsection-title\">\n    <%- _.__(label) %>\n</div>\n<div class=\"tabsection-content\">\n    <div class=\"AknFormContainer AknFormContainer--withPadding\">\n        <% _.each(locales, function (locale) { %>\n            <div class=\"AknFieldContainer\">\n                <div class=\"AknFieldContainer-header\">\n                    <label class=\"AknFieldContainer-label\" for=\"<%- fieldBaseId %><%- locale.code %>\">\n                        <%= locale.label %>\n                    </label>\n                </div>\n                <div class=\"AknFieldContainer-inputContainer field-input\">\n                    <input id=\"<%- fieldBaseId %><%- locale.code %>\"\n                           class=\"AknTextField label-field\"\n                           type=\"text\"\n                           data-locale=\"<%- locale.code %>\"\n                           value=\"<%- model.labels[locale.code] %>\"\n                           <%- isReadOnly ? 'readonly disabled' : '' %>\n                    >\n                </div>\n                <% if (errors[locale.code]) { %>\n                    <div class=\"AknFieldContainer-footer\">\n                        <span class=\"validation-error\">\n                            <i class=\"icon-warning-sign\"></i>\n                            <span class=\"error-message\"><%- errors[locale.code].message %></span>\n                        </span>\n                    </div>\n                <% } %>\n            </div>\n        <% }) %>\n    </div>\n</div>\n"

/***/ }),
/* 173 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/field/textarea.html ***!
  \********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<textarea id=\"<%- fieldId %>\" class=\"AknTextareaField\" data-locale=\"<%- value.locale %>\" data-scope=\"<%- value.scope %>\" <%- editMode === 'view' ? 'disabled' : '' %>><%- value.data %></textarea>\n"

/***/ }),
/* 174 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/js/multiselect-decorator.js ***!
  \************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global define */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1), __webpack_require__(/*! underscore */ 0), __webpack_require__(/*! oro/mediator */ 6), __webpack_require__(/*! jquery.multiselect */ 177), __webpack_require__(/*! jquery.multiselect.filter */ 176)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, _, mediator) {
    'use strict';

    /**
     * Multiselect decorator class.
     * Wraps multiselect widget and provides design modifications
     *
     * @export oro/multiselect-decorator
     * @class  oro.MultiselectDecorator
     */
    var MultiselectDecorator = function(options) {
        this.initialize(options);
    };

    MultiselectDecorator.prototype = {
        /**
         * Multiselect widget element container
         *
         * @property {Object}
         */
        element: null,

        /**
         * Default multiselect widget parameters
         *
         * @property {Object}
         */
        parameters: {
            height: 'auto'
        },

        /**
         * @property {Boolean}
         */
        contextSearch: true,

        /**
         * Minimum width of this multiselect
         *
         * @property {int}
         */
        minimumWidth: null,

        /**
         * Initialize all required properties
         */
        initialize: function(options) {
            if (!options.element) {
                throw new Error('Select element must be defined');
            }
            this.element = options.element;

            if (options.parameters) {
                _.extend(this.parameters, options.parameters);
            }

            if (_.has(options, 'contextSearch')) {
                this.contextSearch = options.contextSearch;
            }

            // initialize multiselect widget
            this.multiselect(this.parameters);

            // initialize multiselect filter
            if (this.contextSearch) {
                this.multiselectfilter({
                    label: '',
                    placeholder: '',
                    autoReset: true
                });
            }

            // destroy DOM garbage after change page via hash-navigation
            mediator.once('hash_navigation_request:start', function() {
                if (this.element.closest('body').length) {
                    this.multiselect('destroy');
                    this.element.hide();
                }
            }, this);
        },

        /**
         * Set design for view
         *
         * @param {Backbone.View} view
         */
        setViewDesign: function(view) {
            view.$('.ui-multiselect').removeClass('ui-widget').removeClass('ui-state-default');
            view.$('.ui-multiselect span.ui-icon').remove();
        },

        /**
         * Fix dropdown design
         *
         * @protected
         */
        _setDropdownDesign: function() {
            var widget = this.getWidget();
            widget.addClass('dropdown-menu');
            widget.addClass('AknDropdown-menu');
            widget.removeClass('ui-widget-content');
            widget.removeClass('ui-widget');
            widget.find('.ui-widget-header').removeClass('ui-widget-header');
            widget.find('.ui-multiselect-filter').removeClass('ui-multiselect-filter');
            widget.find('ul li label').removeClass('ui-corner-all');
        },

        /**
         * Action performed on dropdown open
         */
        onOpenDropdown: function() {
            this._setDropdownDesign();
            this.getWidget().find('input[type="search"]').focus();
            $('body').trigger('click');
        },

        /**
         * Get minimum width of dropdown menu
         *
         * @return {Number}
         */
        getMinimumDropdownWidth: function() {
            if (_.isNull(this.minimumWidth)) {
                var elements = this.getWidget().find('.ui-multiselect-checkboxes li');
                var margin = 26;

                var longestElement = _.max(elements, function (element) {
                    var htmlContent = $(element).find('span:first').html();
                    var length = htmlContent ? htmlContent.length : 0;

                    return length;
                });

                this.minimumWidth = $(longestElement).find('span:first').width() + margin;
            }

            return this.minimumWidth;
        },

        /**
         * Get multiselect widget
         *
         * @return {Object}
         */
        getWidget: function() {
            try {
                return this.multiselect('widget');
            } catch (error) {
                return $('.ui-multiselect-menu.pimmultiselect');
            }
        },

        /**
         * Proxy for multiselect method
         *
         * @param functionName
         * @return {Object}
         */
        multiselect: function(functionName) {
            return this.element.multiselect(functionName);
        },

        /**
         * Proxy for multiselectfilter method
         *
         * @param functionName
         * @return {Object}
         */
        multiselectfilter: function(functionName) {
            return this.element.multiselectfilter(functionName);
        },

        /**
         *  Set dropdown position according to button element
         *
         * @param {Object} button
         */
        updateDropdownPosition: function(button) {
            var position = button.offset();

            this.getWidget().css({
                top: position.top + button.outerHeight(),
                right: position.right
            });
        }
    };

    return MultiselectDecorator;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 175 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/js/saver/datagrid-view-saver.js ***!
  \****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! module-config */ 21),
        __webpack_require__(/*! routing */ 4)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        module,
        Routing
    ) {
        return {
            /**
             * Save the given datagridView for the given gridAlias.
             * Return the POST request promise.
             *
             * @param {object} datagridView
             * @param {string} gridAlias
             *
             * @returns {Promise}
             */
            save: function (datagridView, gridAlias) {
                var saveRoute = Routing.generate(module.config().url, {alias: gridAlias});

                return $.post(saveRoute, {view: datagridView});
            }
        };
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 176 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/lib/multiselect/jquery.multiselect.filter.js ***!
  \*****************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
 * jQuery MultiSelect UI ImportExport Filtering Plugin 1.5pre
 * Copyright (c) 2012 Eric Hynds
 *
 * http://www.erichynds.com/jquery/jquery-ui-multiselect-widget/
 *
 * Depends:
 *   - jQuery UI MultiSelect widget
 *
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 *
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($) {
  var rEscape = /[\-\[\]{}()*+?.,\\\^$|#\s]/g;

  $.widget('ech.multiselectfilter', {

    options: {
      label: 'Filter:',
      width: null, /* override default width set in css file (px). null will inherit */
      placeholder: 'Enter keywords',
      autoReset: false
    },

    _create: function() {
      var opts = this.options;
      var elem = $(this.element);

      // get the multiselect instance
      var instance = (this.instance = (elem.data('echMultiselect') || elem.data("multiselect")));

      // store header; add filter class so the close/check all/uncheck all links can be positioned correctly
      var header = (this.header = instance.menu.find('.ui-multiselect-header').addClass('ui-multiselect-hasfilter'));

      // wrapper elem
      var wrapper = (this.wrapper = $('<div class="ui-multiselect-filter">' + (opts.label.length ? opts.label : '') + '<input placeholder="'+opts.placeholder+'" type="search"' + (/\d/.test(opts.width) ? 'style="width:'+opts.width+'px"' : '') + ' /></div>').prependTo(this.header));

      // reference to the actual inputs
      this.inputs = instance.menu.find('input[type="checkbox"], input[type="radio"]');

      // build the input box
      this.input = wrapper.find('input').bind({
        keydown: function(e) {
          // prevent the enter key from submitting the form / closing the widget
          if(e.which === 13) {
            e.preventDefault();
          }
        },
        keyup: $.proxy(this._handler, this),
        click: $.proxy(this._handler, this)
      });

      // cache input values for searching
      this.updateCache();

      // rewrite internal _toggleChecked fn so that when checkAll/uncheckAll is fired,
      // only the currently filtered elements are checked
      instance._toggleChecked = function(flag, group) {
        var $inputs = (group && group.length) ?  group : this.labels.find('input');
        var _self = this;

        // do not include hidden elems if the menu isn't open.
        var selector = instance._isOpen ?  ':disabled, :hidden' : ':disabled';

        $inputs = $inputs
          .not(selector)
          .each(this._toggleState('checked', flag));

        // update text
        this.update();

        // gather an array of the values that actually changed
        var values = $inputs.map(function() {
          return this.value;
        }).get();

        // select option tags
        this.element.find('option').filter(function() {
          if(!this.disabled && $.inArray(this.value, values) > -1) {
            _self._toggleState('selected', flag).call(this);
          }
        });

        // trigger the change event on the select
        if($inputs.length) {
          this.element.trigger('change');
        }
      };

      // rebuild cache when multiselect is updated
      var doc = $(document).bind('multiselectrefresh', $.proxy(function() {
        this.updateCache();
        this._handler();
      }, this));

      // automatically reset the widget on close?
      if(this.options.autoReset) {
        doc.bind('multiselectclose', $.proxy(this._reset, this));
      }
    },

    // thx for the logic here ben alman
    _handler: function(e) {
      var term = $.trim(this.input[0].value.toLowerCase()),

      // speed up lookups
      rows = this.rows, inputs = this.inputs, cache = this.cache;

      if(!term) {
        rows.show();
      } else {
        rows.hide();

        var regex = new RegExp(term.replace(rEscape, "\\$&"), 'gi');

        this._trigger("filter", e, $.map(cache, function(v, i) {
          var found = false;
          if(v.search(regex) !== -1) {
            found = true;
          } else {
            // look for 'value' attibute if innerHTML doesn't match
            var val = rows.eq(i).find('input').attr('value');
            if(val.search(regex) !== -1) {
              found = true;
            }
          }

          if(found) {
            rows.eq(i).show();
            return inputs.get(i);
          }

          return null;
        }));
      }

      // show/hide optgroups
      this.instance.menu.find(".ui-multiselect-optgroup-label").each(function() {
        var $this = $(this);
        var isVisible = $this.nextUntil('.ui-multiselect-optgroup-label').filter(function() {
          return $.css(this, "display") !== 'none';
        }).length;

        $this[isVisible ? 'show' : 'hide']();
      });
    },

    _reset: function() {
      this.input.val('').trigger('keyup');
    },

    updateCache: function() {
      // each list item
      this.rows = this.instance.menu.find(".ui-multiselect-checkboxes li:not(.ui-multiselect-optgroup-label)");

      // cache
      this.cache = this.element.children().map(function() {
        var elem = $(this);

        // account for optgroups
        if(this.tagName.toLowerCase() === "optgroup") {
          elem = elem.children();
        }

        return elem.map(function() {
          return this.innerHTML.toLowerCase();
        }).get();
      }).get();
    },

    widget: function() {
      return this.wrapper;
    },

    destroy: function() {
      $.Widget.prototype.destroy.call(this);
      this.input.val('').trigger("keyup");
      this.wrapper.remove();
    }
  });

}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 177 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/lib/multiselect/jquery.multiselect.js ***!
  \**********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
 * jQuery MultiSelect UI ImportExport 1.14pre
 * Copyright (c) 2012 Eric Hynds
 *
 * http://www.erichynds.com/jquery/jquery-ui-multiselect-widget/
 *
 * Depends:
 *   - jQuery 1.4.2+
 *   - jQuery UI 1.8 widget factory
 *
 * Optional:
 *   - jQuery UI effects
 *   - jQuery UI position utility
 *
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 *
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($) {

  var multiselectID = 0;
  var $doc = $(document);

  $.widget("ech.multiselect", {

    // default options
    options: {
      header: true,
      height: 175,
      minWidth: 225,
      classes: '',
      checkAllText: 'Check all',
      uncheckAllText: 'Uncheck all',
      noneSelectedText: 'Select options',
      selectedText: '# selected',
      selectedList: 0,
      show: null,
      hide: null,
      autoOpen: false,
      multiple: true,
      position: {}
    },

    _create: function() {
      var el = this.element.hide();
      var o = this.options;

      this.speed = $.fx.speeds._default; // default speed for effects
      this._isOpen = false; // assume no

      // create a unique namespace for events that the widget
      // factory cannot unbind automatically. Use eventNamespace if on
      // jQuery UI 1.9+, and otherwise fallback to a custom string.
      this._namespaceID = this.eventNamespace || ('multiselect' + multiselectID);

      var button = (this.button = $('<button type="button"><span class="ui-icon ui-icon-triangle-1-s"></span></button>'))
        .addClass('ui-multiselect ui-widget ui-state-default ui-corner-all')
        .addClass(o.classes)
        .attr({ 'title':el.attr('title'), 'aria-haspopup':true, 'tabIndex':el.attr('tabIndex') })
        .insertAfter(el),

        buttonlabel = (this.buttonlabel = $('<span />'))
          .html(o.noneSelectedText)
          .appendTo(button),

        menu = (this.menu = $('<div />'))
          .addClass('ui-multiselect-menu ui-widget ui-widget-content ui-corner-all')
          .addClass(o.classes)
          .appendTo(document.body),

        header = (this.header = $('<div />'))
          .addClass('ui-widget-header ui-corner-all ui-multiselect-header ui-helper-clearfix')
          .appendTo(menu),

        headerLinkContainer = (this.headerLinkContainer = $('<ul />'))
          .addClass('ui-helper-reset')
          .html(function() {
            if(o.header === true) {
              return '<li><a class="ui-multiselect-all" href="#"><span class="ui-icon ui-icon-check"></span><span>' + o.checkAllText + '</span></a></li><li><a class="ui-multiselect-none" href="#"><span class="ui-icon ui-icon-closethick"></span><span>' + o.uncheckAllText + '</span></a></li>';
            } else if(typeof o.header === "string") {
              return '<li>' + o.header + '</li>';
            } else {
              return '';
            }
          })
          .append('<li class="ui-multiselect-close"><a href="#" class="ui-multiselect-close"><span class="ui-icon ui-icon-circle-close"></span></a></li>')
          .appendTo(header),

        checkboxContainer = (this.checkboxContainer = $('<ul />'))
          .addClass('ui-multiselect-checkboxes ui-helper-reset')
          .appendTo(menu);

        // perform event bindings
        this._bindEvents();

        // build menu
        this.refresh(true);

        // some addl. logic for single selects
        if(!o.multiple) {
          menu.addClass('ui-multiselect-single');
        }

        // bump unique ID
        multiselectID++;
    },

    _init: function() {
      if(this.options.header === false) {
        this.header.hide();
      }
      if(!this.options.multiple) {
        this.headerLinkContainer.find('.ui-multiselect-all, .ui-multiselect-none').hide();
      }
      if(this.options.autoOpen) {
        this.open();
      }
      if(this.element.is(':disabled')) {
        this.disable();
      }
    },

    refresh: function(init) {
      var el = this.element;
      var o = this.options;
      var menu = this.menu;
      var checkboxContainer = this.checkboxContainer;
      var optgroups = [];
      var html = "";
      var id = el.attr('id') || multiselectID++; // unique ID for the label & option tags

      // build items
      el.find('option').each(function(i) {
        var $this = $(this);
        var parent = this.parentNode;
        var title = this.innerHTML;
        var description = this.title;
        var value = this.value;
        var inputID = 'ui-multiselect-' + (this.id || id + '-option-' + i);
        var isDisabled = this.disabled;
        var isSelected = this.selected;
        var labelClasses = [ 'ui-corner-all' ];
        var liClasses = (isDisabled ? 'ui-multiselect-disabled ' : ' ') + this.className;
        var optLabel;

        // is this an optgroup?
        if(parent.tagName === 'OPTGROUP') {
          optLabel = parent.getAttribute('label');

          // has this optgroup been added already?
          if($.inArray(optLabel, optgroups) === -1) {
            html += '<li class="ui-multiselect-optgroup-label ' + parent.className + '"><a href="#">' + optLabel + '</a></li>';
            optgroups.push(optLabel);
          }
        }

        if(isDisabled) {
          labelClasses.push('ui-state-disabled');
        }

        // browsers automatically select the first option
        // by default with single selects
        if(isSelected && !o.multiple) {
          labelClasses.push('ui-state-active');
        }

        html += '<li class="' + liClasses + '">';

        // create the label
        html += '<label for="' + inputID + '" title="' + description + '" class="' + labelClasses.join(' ') + '">';
        html += '<input id="' + inputID + '" name="multiselect_' + id + '" type="' + (o.multiple ? "checkbox" : "radio") + '" value="' + value + '" title="' + title + '"';

        // pre-selected?
        if(isSelected) {
          html += ' checked="checked"';
          html += ' aria-selected="true"';
        }

        // disabled?
        if(isDisabled) {
          html += ' disabled="disabled"';
          html += ' aria-disabled="true"';
        }

        // add the title and close everything off
        html += ' /><span>' + title + '</span></label></li>';
      });

      // insert into the DOM
      checkboxContainer.html(html);

      // cache some moar useful elements
      this.labels = menu.find('label');
      this.inputs = this.labels.children('input');

      // set widths
      this._setButtonWidth();
      this._setMenuWidth();

      // remember default value
      this.button[0].defaultValue = this.update();

      // broadcast refresh event; useful for widgets
      if(!init) {
        this._trigger('refresh');
      }
    },

    // updates the button text. call refresh() to rebuild
    update: function() {
      var o = this.options;
      var $inputs = this.inputs;
      var $checked = $inputs.filter(':checked');
      var numChecked = $checked.length;
      var value;

      if(numChecked === 0) {
        value = o.noneSelectedText;
      } else {
        if($.isFunction(o.selectedText)) {
          value = o.selectedText.call(this, numChecked, $inputs.length, $checked.get());
        } else if(/\d/.test(o.selectedList) && o.selectedList > 0 && numChecked <= o.selectedList) {
          value = $checked.map(function() { return $(this).next().html(); }).get().join(', ');
        } else {
          value = o.selectedText.replace('#', numChecked).replace('#', $inputs.length);
        }
      }

      this._setButtonValue(value);

      return value;
    },

    // this exists as a separate method so that the developer
    // can easily override it.
    _setButtonValue: function(value) {
      this.buttonlabel.text(value);
    },

    // binds events
    _bindEvents: function() {
      var self = this;
      var button = this.button;

      function clickHandler() {
        self[ self._isOpen ? 'close' : 'open' ]();
        return false;
      }

      // webkit doesn't like it when you click on the span :(
      button
        .find('span')
        .bind('click.multiselect', clickHandler);

      // button events
      button.bind({
        click: clickHandler,
        keypress: function(e) {
          switch(e.which) {
            case 27: // esc
              case 38: // up
              case 37: // left
              self.close();
            break;
            case 39: // right
              case 40: // down
              self.open();
            break;
          }
        },
        mouseenter: function() {
          if(!button.hasClass('ui-state-disabled')) {
            $(this).addClass('ui-state-hover');
          }
        },
        mouseleave: function() {
          $(this).removeClass('ui-state-hover');
        },
        focus: function() {
          if(!button.hasClass('ui-state-disabled')) {
            $(this).addClass('ui-state-focus');
          }
        },
        blur: function() {
          $(this).removeClass('ui-state-focus');
        }
      });

      // header links
      this.header.delegate('a', 'click.multiselect', function(e) {
        // close link
        if($(this).hasClass('ui-multiselect-close')) {
          self.close();

          // check all / uncheck all
        } else {
          self[$(this).hasClass('ui-multiselect-all') ? 'checkAll' : 'uncheckAll']();
        }

        e.preventDefault();
      });

      // optgroup label toggle support
      this.menu.delegate('li.ui-multiselect-optgroup-label a', 'click.multiselect', function(e) {
        e.preventDefault();

        var $this = $(this);
        var $inputs = $this.parent().nextUntil('li.ui-multiselect-optgroup-label').find('input:visible:not(:disabled)');
        var nodes = $inputs.get();
        var label = $this.parent().text();

        // trigger event and bail if the return is false
        if(self._trigger('beforeoptgrouptoggle', e, { inputs:nodes, label:label }) === false) {
          return;
        }

        // toggle inputs
        self._toggleChecked(
          $inputs.filter(':checked').length !== $inputs.length,
          $inputs
        );

        self._trigger('optgrouptoggle', e, {
          inputs: nodes,
          label: label,
          checked: nodes[0].checked
        });
      })
      .delegate('label', 'mouseenter.multiselect', function() {
        if(!$(this).hasClass('ui-state-disabled')) {
          self.labels.removeClass('ui-state-hover');
          $(this).addClass('ui-state-hover').find('input').focus();
        }
      })
      .delegate('label', 'keydown.multiselect', function(e) {
        e.preventDefault();

        switch(e.which) {
          case 9: // tab
            case 27: // esc
            self.close();
          break;
          case 38: // up
            case 40: // down
            case 37: // left
            case 39: // right
            self._traverse(e.which, this);
          break;
          case 13: // enter
            $(this).find('input')[0].click();
          break;
        }
      })
      .delegate('input[type="checkbox"], input[type="radio"]', 'click.multiselect', function(e) {
        var $this = $(this);
        var val = this.value;
        var checked = this.checked;
        var tags = self.element.find('option');

        // bail if this input is disabled or the event is cancelled
        if(this.disabled || self._trigger('click', e, { value: val, text: this.title, checked: checked }) === false) {
          e.preventDefault();
          return;
        }

        // make sure the input has focus. otherwise, the esc key
        // won't close the menu after clicking an item.
        $this.focus();

        // toggle aria state
        $this.attr('aria-selected', checked);

        // change state on the original option tags
        tags.each(function() {
          if(this.value === val) {
            this.selected = checked;
          } else if(!self.options.multiple) {
            this.selected = false;
          }
        });

        // some additional single select-specific logic
        if(!self.options.multiple) {
          self.labels.removeClass('ui-state-active');
          $this.closest('label').toggleClass('ui-state-active', checked);

          // close menu
          self.close();
        }

        // fire change on the select box
        self.element.trigger("change");

        // setTimeout is to fix multiselect issue #14 and #47. caused by jQuery issue #3827
        // http://bugs.jquery.com/ticket/3827
        setTimeout($.proxy(self.update, self), 10);
      });

      // close each widget when clicking on any other element/anywhere else on the page
      $doc.bind('mousedown.' + this._namespaceID, function(event) {
        var target = event.target;

        if(self._isOpen
            && !$.contains(self.menu[0], target)
            && !$.contains(self.button[0], target)
            && target !== self.button[0]
            && target !== self.menu[0])
        {
          self.close();
        }
      });

      // deal with form resets.  the problem here is that buttons aren't
      // restored to their defaultValue prop on form reset, and the reset
      // handler fires before the form is actually reset.  delaying it a bit
      // gives the form inputs time to clear.
      $(this.element[0].form).bind('reset.multiselect', function() {
        setTimeout($.proxy(self.refresh, self), 10);
      });
    },

    // set button width
    _setButtonWidth: function() {
      var width = this.element.outerWidth();
      var o = this.options;

      if(/\d/.test(o.minWidth) && width < o.minWidth) {
        width = o.minWidth;
      }

      // set widths
      this.button.outerWidth(width);
    },

    // set menu width
    _setMenuWidth: function() {
      var m = this.menu;
      m.outerWidth(this.button.outerWidth());
    },

    // move up or down within the menu
    _traverse: function(which, start) {
      var $start = $(start);
      var moveToLast = which === 38 || which === 37;

      // select the first li that isn't an optgroup label / disabled
      $next = $start.parent()[moveToLast ? 'prevAll' : 'nextAll']('li:not(.ui-multiselect-disabled, .ui-multiselect-optgroup-label)')[ moveToLast ? 'last' : 'first']();

      // if at the first/last element
      if(!$next.length) {
        var $container = this.menu.find('ul').last();

        // move to the first/last
        this.menu.find('label')[ moveToLast ? 'last' : 'first' ]().trigger('mouseover');

        // set scroll position
        $container.scrollTop(moveToLast ? $container.height() : 0);

      } else {
        $next.find('label').trigger('mouseover');
      }
    },

    // This is an internal function to toggle the checked property and
    // other related attributes of a checkbox.
    //
    // The context of this function should be a checkbox; do not proxy it.
    _toggleState: function(prop, flag) {
      return function() {
        if(!this.disabled) {
          this[ prop ] = flag;
        }

        if(flag) {
          this.setAttribute('aria-selected', true);
        } else {
          this.removeAttribute('aria-selected');
        }
      };
    },

    _toggleChecked: function(flag, group) {
      var $inputs = (group && group.length) ?  group : this.inputs;
      var self = this;

      // toggle state on inputs
      $inputs.each(this._toggleState('checked', flag));

      // give the first input focus
      $inputs.eq(0).focus();

      // update button text
      this.update();

      // gather an array of the values that actually changed
      var values = $inputs.map(function() {
        return this.value;
      }).get();

      // toggle state on original option tags
      this.element
        .find('option')
        .each(function() {
          if(!this.disabled && $.inArray(this.value, values) > -1) {
            self._toggleState('selected', flag).call(this);
          }
        });

      // trigger the change event on the select
      if($inputs.length) {
        this.element.trigger("change");
      }
    },

    _toggleDisabled: function(flag) {
      this.button.attr({ 'disabled':flag, 'aria-disabled':flag })[ flag ? 'addClass' : 'removeClass' ]('ui-state-disabled');

      var inputs = this.menu.find('input');
      var key = "ech-multiselect-disabled";

      if(flag) {
        // remember which elements this widget disabled (not pre-disabled)
        // elements, so that they can be restored if the widget is re-enabled.
        inputs = inputs.filter(':enabled').data(key, true)
      } else {
        inputs = inputs.filter(function() {
          return $.data(this, key) === true;
        }).removeData(key);
      }

      inputs
        .attr({ 'disabled':flag, 'arial-disabled':flag })
        .parent()[ flag ? 'addClass' : 'removeClass' ]('ui-state-disabled');

      this.element.attr({
        'disabled':flag,
        'aria-disabled':flag
      });
    },

    // open the menu
    open: function(e) {
      var self = this;
      var button = this.button;
      var menu = this.menu;
      var speed = this.speed;
      var o = this.options;
      var args = [];

      // bail if the multiselectopen event returns false, this widget is disabled, or is already open
      if(this._trigger('beforeopen') === false || button.hasClass('ui-state-disabled') || this._isOpen) {
        return;
      }

      var $container = menu.find('ul').last();
      var effect = o.show;

      // figure out opening effects/speeds
      if($.isArray(o.show)) {
        effect = o.show[0];
        speed = o.show[1] || self.speed;
      }

      // if there's an effect, assume jQuery UI is in use
      // build the arguments to pass to show()
      if(effect) {
        args = [ effect, speed ];
      }

      // set the scroll of the checkbox container
      $container.scrollTop(0).height(o.height);

      // positon
      this.position();

      // show the menu, maybe with a speed/effect combo
      $.fn.show.apply(menu, args);

      // select the first not disabled option
      // triggering both mouseover and mouseover because 1.4.2+ has a bug where triggering mouseover
      // will actually trigger mouseenter.  the mouseenter trigger is there for when it's eventually fixed
      this.labels.filter(':not(.ui-state-disabled)').eq(0).trigger('mouseover').trigger('mouseenter').find('input').trigger('focus');

      button.addClass('ui-state-active');
      this._isOpen = true;
      this._trigger('open');
    },

    // close the menu
    close: function() {
      if(this._trigger('beforeclose') === false) {
        return;
      }

      var o = this.options;
      var effect = o.hide;
      var speed = this.speed;
      var args = [];

      // figure out opening effects/speeds
      if($.isArray(o.hide)) {
        effect = o.hide[0];
        speed = o.hide[1] || this.speed;
      }

      if(effect) {
        args = [ effect, speed ];
      }

      $.fn.hide.apply(this.menu, args);
      this.button.removeClass('ui-state-active').trigger('blur').trigger('mouseleave');
      this._isOpen = false;
      this._trigger('close');
    },

    enable: function() {
      this._toggleDisabled(false);
    },

    disable: function() {
      this._toggleDisabled(true);
    },

    checkAll: function(e) {
      this._toggleChecked(true);
      this._trigger('checkAll');
    },

    uncheckAll: function() {
      this._toggleChecked(false);
      this._trigger('uncheckAll');
    },

    getChecked: function() {
      return this.menu.find('input').filter(':checked');
    },

    destroy: function() {
      // remove classes + data
      $.Widget.prototype.destroy.call(this);

      // unbind events
      $doc.unbind(this._namespaceID);

      this.button.remove();
      this.menu.remove();
      this.element.show();

      return this;
    },

    isOpen: function() {
      return this._isOpen;
    },

    widget: function() {
      return this.menu;
    },

    getButton: function() {
      return this.button;
    },

    position: function() {
      var o = this.options;

      // use the position utility if it exists and options are specifified
      if($.ui.position && !$.isEmptyObject(o.position)) {
        o.position.of = o.position.of || this.button;

        this.menu
          .show()
          .position(o.position)
          .hide();

        // otherwise fallback to custom positioning
      } else {
        var pos = this.button.offset();

        this.menu.css({
          top: pos.top + this.button.outerHeight(),
          left: pos.left
        });
      }
    },

    // react to option changes after initialization
    _setOption: function(key, value) {
      var menu = this.menu;

      switch(key) {
        case 'header':
          menu.find('div.ui-multiselect-header')[value ? 'show' : 'hide']();
          break;
        case 'checkAllText':
          menu.find('a.ui-multiselect-all span').eq(-1).text(value);
          break;
        case 'uncheckAllText':
          menu.find('a.ui-multiselect-none span').eq(-1).text(value);
          break;
        case 'height':
          menu.find('ul').last().height(parseInt(value, 10));
          break;
        case 'minWidth':
          this.options[key] = parseInt(value, 10);
          this._setButtonWidth();
          this._setMenuWidth();
          break;
        case 'selectedText':
        case 'selectedList':
        case 'noneSelectedText':
          this.options[key] = value; // these all needs to update immediately for the update() call
          this.update();
          break;
        case 'classes':
          menu.add(this.button).removeClass(this.options.classes).addClass(value);
          break;
        case 'multiple':
          menu.toggleClass('ui-multiselect-single', !value);
          this.options.multiple = value;
          this.element[0].multiple = value;
          this.refresh();
          break;
        case 'position':
          this.position();
      }

      $.Widget.prototype._setOption.apply(this, arguments);
    }
  });

}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 178 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/attribute-option/create.js ***!
  \************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! pim/form-builder */ 7),
        __webpack_require__(/*! oro/messenger */ 16),
        __webpack_require__(/*! pim/template/attribute-option/validation-error */ 199)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        Backbone,
        Routing,
        FormBuilder,
        messenger,
        errorTemplate
    ) {
        var CreateOptionView = Backbone.View.extend({
            errorTemplate: _.template(errorTemplate),
            attribute: null,
            initialize: function (options) {
                this.attribute = options.attribute;
            },
            createOption: function () {
                var deferred = $.Deferred();

                FormBuilder.build('pim-attribute-option-form').done(function (form) {
                    var modal = new Backbone.BootstrapModal({
                        modalOptions: {
                            backdrop: 'static',
                            keyboard: false
                        },
                        allowCancel: true,
                        okCloses: false,
                        title: _.__('pim_enrich.form.attribute_option.add_option_modal.title'),
                        content: '',
                        cancelText: _.__('pim_enrich.form.attribute_option.add_option_modal.cancel'),
                        okText: _.__('pim_enrich.form.attribute_option.add_option_modal.confirm')
                    });
                    modal.open();

                    form.setElement(modal.$('.modal-body')).render();

                    modal.on('cancel', deferred.reject);
                    modal.on('ok', function () {
                        form.$('.validation-errors').remove();
                        $.ajax({
                            method: 'POST',
                            url: Routing.generate(
                                'pim_enrich_attributeoption_create',
                                { attributeId: this.attribute.id }
                            ),
                            data: JSON.stringify(form.getFormData())
                        }).done(function (option) {
                            modal.close();
                            messenger.notificationFlashMessage(
                                'success',
                                _.__('pim_enrich.form.attribute_option.flash.option_created')
                            );
                            deferred.resolve(option);
                        }).fail(function (xhr) {
                            var response = xhr.responseJSON;

                            if (response.code) {
                                form.$('input[name="code"]').after(
                                    this.errorTemplate({
                                        errors: [response.code]
                                    })
                                );
                            } else {
                                messenger.notificationFlashMessage(
                                    'error',
                                    _.__('pim_enrich.form.attribute_option.flash.error_creating_option')
                                );
                            }
                        }.bind(this));
                    }.bind(this));
                }.bind(this));

                return deferred.promise();
            }
        });

        return function (attribute) {
            if (!attribute) {
                throw new Error('Attribute must be provided to create a new option');
            }

            var view = new CreateOptionView({ attribute: attribute });

            return view.createOption().always(function () {
                view.remove();
            });
        };
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 179 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/cache-invalidator.js ***!
  \***********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! module-config */ 21),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! pim/fetcher-registry */ 10)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (module, _, BaseForm, mediator, FetcherRegistry) {
        return BaseForm.extend({
            /**
             * {@inheritdoc}
             */
            configure: function () {
                _.each(module.config().events, function (event) {
                    this.listenTo(mediator, event, this.checkStructureVersion);
                }.bind(this));

                this.listenTo(this.getRoot(), 'pim_enrich:form:cache:clear', this.clearCache);

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * Check if the given entity need e newer version of the cache
             *
             * @param {Object} entity
             */
            checkStructureVersion: function (entity) {
                if (entity.meta.structure_version !== this.getLocaleStructureVersion(entity.meta.model_type)) {
                    this.clearCache();
                }

                this.setLocaleStructureVersion(entity.meta.model_type, entity.meta.structure_version);
            },

            /**
             * Get the in locale storage structure version
             *
             * @param {string} modelType
             *
             * @return {int}
             */
            getLocaleStructureVersion: function (modelType) {
                return parseInt(sessionStorage.getItem('structure_version_' + modelType));
            },

            /**
             * Set the current locale structure version in locale storage
             *
             * @param {string} modelType
             * @param {int}    structureVersion
             */
            setLocaleStructureVersion: function (modelType, structureVersion) {
                sessionStorage.setItem('structure_version_' + modelType, structureVersion);
            },

            /**
             * Clear the cache for all fetchers
             */
            clearCache: function () {
                FetcherRegistry.clearAll();
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 180 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/common/add-select/line.js ***!
  \****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Common add select line view
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! pim/template/form/add-select/line */ 243)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        Backbone,
        template
    ) {
        return Backbone.View.extend({
            className: '.select2-results',
            template: _.template(template),
            checked: false,
            item: null,

            /**
             * {@inheritdoc}
             */
            initialize: function () {
                this.item = this.options.item;
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                this.$el.html(this.template({
                    item:    this.item,
                    checked: this.checked
                }));

                return this;
            },

            /**
             * Update the checkbox status then render the view
             *
             * @param {bool} checked
             */
            setCheckedCheckbox: function (checked) {
                this.checked = checked;

                this.render();
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 181 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/common/add-select/select.js ***!
  \******************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Common add select extension view
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/template/form/add-select/select */ 244),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/common/add-select/line */ 180),
        __webpack_require__(/*! pim/common/add-select/footer */ 329),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/formatter/choices/base */ 46),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! pim/initselect2 */ 30)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        __,
        template,
        BaseForm,
        LineView,
        FooterView,
        UserContext,
        FetcherRegistry,
        ChoicesFormatter,
        mediator,
        initSelect2
    ) {
        return BaseForm.extend({
            tagName: 'div',
            targetElement: 'input[type="hidden"]',
            className: null,
            mainFetcher: null,
            template: _.template(template),
            lineView: LineView,
            footerView: FooterView,
            config: {},
            resultsPerPage: null,
            selection: [],
            itemViews: [],
            footerViewInstance: null,
            queryTimer: null,
            addEvent: null,
            disableEvent: null,
            enableEvent: null,
            disabled: false,
            defaultConfig: {
                select2: {
                    placeholder: 'pim_enrich.form.common.base-add-select.btn.add',
                    title: '',
                    buttonTitle: '',
                    emptyText: '',
                    classes: '',
                    minimumInputLength: 0,
                    dropdownCssClass: '',
                    closeOnSelect: false,
                    countTitle: 'pim_enrich.form.common.base-add-select.label.select_count'
                },
                resultsPerPage: 10,
                searchParameters: {},
                mainFetcher: null,
                events: {
                    disable: null,
                    enable: null,
                    add: null
                }
            },

            /**
             * {@inheritdoc}
             */
            initialize: function (meta) {
                this.config = $.extend(true, {}, this.defaultConfig, meta.config);

                if (_.isNull(this.config.mainFetcher)) {
                    throw new Error('Fetcher code MUST be provided in config');
                }

                this.config.select2.placeholder = __(this.config.select2.placeholder);
                this.config.select2.title       = __(this.config.select2.title);
                this.config.select2.buttonTitle = __(this.config.select2.buttonTitle);
                this.config.select2.emptyText   = __(this.config.select2.emptyText);

                this.resultsPerPage = this.config.resultsPerPage;
                this.mainFetcher    = this.config.mainFetcher;
                this.className      = this.config.className;

                this.disableEvent = this.config.events.disable;
                this.enableEvent  = this.config.events.enable;
                this.addEvent     = this.config.events.add;
            },

            /**
             * {@inheritdoc}
             */
            configure: function () {
                if (!_.isNull(this.enableEvent) && !_.isNull(this.disableEvent)) {
                    mediator.on(
                        this.disableEvent,
                        this.onDisable.bind(this)
                    );

                    mediator.on(
                        this.enableEvent,
                        this.onEnable.bind(this)
                    );
                }

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * Render this extension
             *
             * @return {Object}
             */
            render: function () {
                this.$el.html(this.template());

                this.$('input[type="hidden"]').prop('readonly', this.disabled);

                this.initializeSelectWidget();
                this.delegateEvents();

                return this;
            },

            /**
             * Initialize select2 and format elements.
             */
            initializeSelectWidget: function () {
                var $select = this.$(this.targetElement);

                var opts = {
                    dropdownCssClass: 'select2--bigDrop select2--annotedLabels ' + this.config.select2.dropdownCssClass,
                    formatResult: this.onGetResult.bind(this),
                    query: this.onGetQuery.bind(this)
                };

                opts = $.extend(true, {}, this.config.select2, opts);

                $select = initSelect2.init($select, opts);

                mediator.once('hash_navigation_request:start', function () {
                    $select.select2('close');
                    $select.select2('destroy');
                });

                $select.on('select2-selecting', this.onSelecting.bind(this));

                $select.on('select2-open', this.onSelectOpen.bind(this));

                this.footerViewInstance = new this.footerView({
                    buttonTitle: this.config.select2.buttonTitle,
                    countTitle: this.config.select2.countTitle,
                    addEvent: this.addEvent
                });

                this.footerViewInstance.on(this.addEvent, function () {
                    $select.select2('close');
                    if (0 < this.selection.length) {
                        this.addItems();
                    }
                }.bind(this));

                var $menu = this.$('.select2-drop');

                $menu.append(this.footerViewInstance.render().$el);
            },

            /**
             * Triggers configured event with items codes selected
             */
            addItems: function () {
                this.getRoot().trigger(this.addEvent, { codes: this.selection });
            },

            /**
             * Gets search parameters
             *
             * @param {string} term
             * @param {int}    page
             *
             * @return {Object}
             */
            getSelectSearchParameters: function (term, page) {
                return $.extend(true, {}, this.config.searchParameters, {
                    search: term,
                    options: {
                        limit: this.resultsPerPage,
                        page: page,
                        locale: UserContext.get('catalogLocale')
                    }
                });
            },

            /**
             * Gets items to exclude
             *
             * @return {Promise}
             */
            getItemsToExclude: function () {
                return $.Deferred().resolve([]);
            },

            /**
             * @param {Object} items
             *
             * @return {Object}
             */
            prepareChoices: function (items) {
                return _.chain(_.sortBy(items, function (item) {
                    return item.sort_order;
                })).map(function (item) {
                    return ChoicesFormatter.formatOne(item);
                }).value();
            },

            /**
             * Formats and updates list of items
             *
             * @param {Object} item
             *
             * @returns {Object}
             */
            onGetResult: function (item) {
                var line = _.findWhere(this.itemViews, {itemCode: item.id});

                if (_.isUndefined(line) || _.isNull(line)) {
                    line = {
                        itemCode: item.id,
                        itemView: new this.lineView({
                            checked: _.contains(this.selection, item.id),
                            item: item
                        })
                    };

                    this.itemViews.push(line);
                }

                return line.itemView.render().$el;
            },

            /**
             * Creates request according to recieved options
             *
             * @param {Object} options
             */
            onGetQuery: function (options) {
                clearTimeout(this.queryTimer);
                this.queryTimer = setTimeout(function () {
                    var page = 1;
                    if (options.context && options.context.page) {
                        page = options.context.page;
                    }
                    var searchParameters = this.getSelectSearchParameters(options.term, page);

                    this.getItemsToExclude()
                        .then(function (identifiersToExclude) {
                            searchParameters.options.excluded_identifiers = identifiersToExclude;

                            return FetcherRegistry.getFetcher(this.mainFetcher).search(searchParameters);
                        }.bind(this))
                        .then(function (items) {
                            var choices = this.prepareChoices(items);

                            options.callback({
                                results: choices,
                                more: choices.length === this.resultsPerPage,
                                context: {
                                    page: page + 1
                                }
                            });
                        }.bind(this));
                }.bind(this), 400);
            },

            /**
             * Intercepts default select2 selecting event and handles it
             *
             * @param {Object} event
             */
            onSelecting: function (event) {
                var itemCode = event.val;
                var alreadySelected = _.contains(this.selection, itemCode);

                if (alreadySelected) {
                    this.selection = _.without(this.selection, itemCode);
                } else {
                    this.selection.push(itemCode);
                }

                var line = _.findWhere(this.itemViews, {itemCode: itemCode});
                line.itemView.setCheckedCheckbox(!alreadySelected);

                this.updateSelectedCounter();
                event.preventDefault();
            },

            /**
             * Cleans select2 when open
             */
            onSelectOpen: function () {
                this.selection = [];
                this.itemViews = [];
                this.updateSelectedCounter();
            },

            /**
             * Update counter of selected items
             */
            updateSelectedCounter: function () {
                this.footerViewInstance.updateNumberOfItems(this.selection.length);
            },

            /**
             * Disable callback
             */
            onDisable: function () {
                this.disabled = true;
                this.render();
            },

            /**
             * Enable callback
             */
            onEnable: function () {
                this.disabled = false;
                this.render();
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));



/***/ }),
/* 182 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/common/attributes.js ***!
  \***********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__; 
/**
 * Attribute tab extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/field-manager */ 150),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/attribute-manager */ 153),
        __webpack_require__(/*! pim/attribute-group-manager */ 185),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! pim/security-context */ 31),
        __webpack_require__(/*! pim/template/form/tab/attributes */ 263),
        __webpack_require__(/*! pim/dialog */ 14),
        __webpack_require__(/*! oro/messenger */ 16)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        Backbone,
        mediator,
        Routing,
        BaseForm,
        FieldManager,
        FetcherRegistry,
        AttributeManager,
        AttributeGroupManager,
        UserContext,
        SecurityContext,
        formTemplate,
        Dialog,
        messenger
    ) {
        return BaseForm.extend({
            template: _.template(formTemplate),
            className: 'tabbable tabs-left object-attributes',
            events: {
                'click .remove-attribute': 'removeAttribute'
            },
            rendering: false,

            /**
             * {@inheritdoc}
             */
            initialize: function (meta) {
                this.config = meta.config;

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            configure: function () {
                this.trigger('tab:register', {
                    code: this.code,
                    label: _.__(this.config.tabTitle)
                });

                UserContext.off('change:catalogLocale change:catalogScope', this.render);
                this.listenTo(UserContext, 'change:catalogLocale change:catalogScope', this.render);
                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:validation_error', this.render);
                this.listenTo(this.getRoot(), 'pim_enrich:form:change-family:after', this.render);
                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:post_fetch', this.render);
                this.listenTo(this.getRoot(), 'pim_enrich:form:add-attribute:after', this.render);
                this.listenTo(this.getRoot(), 'pim_enrich:form:show_attribute', this.showAttribute);

                FieldManager.clearFields();

                this.onExtensions('comparison:change', this.comparisonChange.bind(this));
                this.onExtensions('group:change', this.render.bind(this));
                this.onExtensions('add-attribute:add', this.addAttributes.bind(this));
                this.onExtensions('copy:copy-fields:after', this.render.bind(this));
                this.onExtensions('copy:select:after', this.render.bind(this));
                this.onExtensions('copy:context:change', this.render.bind(this));
                this.onExtensions('pim_enrich:form:scope_switcher:pre_render', this.initScope.bind(this));
                this.onExtensions('pim_enrich:form:locale_switcher:pre_render', this.initLocale.bind(this));
                this.onExtensions('pim_enrich:form:scope_switcher:change', function (event) {
                    this.setScope(event.scopeCode);
                }.bind(this));
                this.onExtensions('pim_enrich:form:locale_switcher:change', function (event) {
                    this.setLocale(event.localeCode);
                }.bind(this));

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                if (!this.configured || this.rendering) {
                    return this;
                }

                this.rendering = true;
                this.$el.html(this.template({}));
                this.getConfig().then(function () {
                    var object = this.getFormData();
                    AttributeManager.getValues(object)
                        .then(function (values) {
                            var attributeGroupValues = AttributeGroupManager.getAttributeGroupValues(
                                values,
                                this.getExtension('attribute-group-selector').getCurrentElement()
                            );

                            var fieldPromises = [];
                            _.each(attributeGroupValues, function (value, attributeCode) {
                                fieldPromises.push(this.renderField(object, attributeCode, value));
                            }.bind(this));

                            this.rendering = false;

                            return $.when.apply($, fieldPromises);
                        }.bind(this)).then(function () {
                            return _.sortBy(arguments, function (field) {
                                return field.attribute.sort_order;
                            });
                        }).then(function (fields) {
                            var $valuesPanel = this.$('.object-values');
                            $valuesPanel.empty();

                            FieldManager.clearVisibleFields();
                            _.each(fields, function (field) {
                                if (field.canBeSeen()) {
                                    field.render();
                                    FieldManager.addVisibleField(field.attribute.code);
                                    $valuesPanel.append(field.$el);
                                }
                            }.bind(this));
                        }.bind(this));
                    this.delegateEvents();

                    this.renderExtensions();
                }.bind(this));

                return this;
            },

            /**
             * Render a single field
             *
             * @param {Object} object
             * @param {String} attributeCode
             * @param {Array} values
             *
             * @return {Promise}
             */
            renderField: function (object, attributeCode, values) {
                return FieldManager.getField(attributeCode).then(function (field) {
                    return $.when(
                        (new $.Deferred().resolve(field)),
                        FetcherRegistry.getFetcher('channel').fetchAll(),
                        AttributeManager.isOptional(field.attribute, object)
                    );
                }).then(function (field, channels, isOptional) {
                    var scope = _.findWhere(channels, { code: UserContext.get('catalogScope') });

                    field.setContext({
                        locale: UserContext.get('catalogLocale'),
                        scope: scope.code,
                        scopeLabel: scope.label,
                        uiLocale: UserContext.get('catalogLocale'),
                        optional: isOptional,
                        removable: SecurityContext.isGranted(this.config.removeAttributeACL)
                    });
                    field.setValues(values);

                    return field;
                }.bind(this));
            },

            /**
             * Get the configuration needed to load the attribute tab
             *
             * @return {Promise}
             */
            getConfig: function () {
                var promises = [];
                var object = this.getFormData();

                promises.push(AttributeGroupManager.getAttributeGroupsForObject(object)
                    .then(function (attributeGroups) {
                        this.getExtension('attribute-group-selector').setElements(
                            _.indexBy(_.sortBy(attributeGroups, 'sort_order'), 'code')
                        );
                    }.bind(this))
                );

                return $.when.apply($, promises).promise();
            },

            /**
             * Add an attribute to the current attribute list
             *
             * @param {Event} event
             */
            addAttributes: function (event) {
                var attributeCodes = event.codes;

                $.when(
                    FetcherRegistry.getFetcher('attribute').fetchByIdentifiers(attributeCodes),
                    FetcherRegistry.getFetcher('locale').fetchActivated(),
                    FetcherRegistry.getFetcher('channel').fetchAll(),
                    FetcherRegistry.getFetcher('currency').fetchAll()
                ).then(function (attributes, locales, channels, currencies) {
                    var formData = this.getFormData();

                    _.each(attributes, function (attribute) {
                        if (!formData.values[attribute.code]) {
                            formData.values[attribute.code] = AttributeManager.generateMissingValues(
                                [],
                                attribute,
                                locales,
                                channels,
                                currencies
                            );
                        }
                    });

                    this.getExtension('attribute-group-selector').setCurrent(
                        _.first(attributes).group_code
                    );

                    this.setData(formData);

                    this.getRoot().trigger('pim_enrich:form:add-attribute:after');
                }.bind(this));
            },

            /**
             * Remove an attribute from the collection
             *
             * @param {Event} event
             */
            removeAttribute: function (event) {
                if (!SecurityContext.isGranted(this.config.removeAttributeACL)) {
                    return;
                }
                var attributeCode = event.currentTarget.dataset.attribute;
                var formData = this.getFormData();
                var fields = FieldManager.getFields();

                Dialog.confirm(
                    _.__('pim_enrich.confirmation.delete.attribute'),
                    _.__('pim_enrich.confirmation.delete_item'),
                    function () {
                        FetcherRegistry.getFetcher('attribute').fetch(attributeCode).then(function (attribute) {
                            $.ajax({
                                type: 'DELETE',
                                url: this.generateRemoveAttributeUrl(attribute),
                                contentType: 'application/json'
                            }).then(function () {
                                this.triggerExtensions('add-attribute:update:available-attributes');

                                delete formData.values[attributeCode];
                                delete fields[attributeCode];

                                this.setData(formData);

                                this.getRoot().trigger('pim_enrich:form:remove-attribute:after');

                                this.render();
                            }.bind(this)).fail(function () {
                                messenger.notificationFlashMessage(
                                    'error',
                                    _.__(this.config.deletionFailed)
                                );
                            });
                        }.bind(this));
                    }.bind(this)
                );
            },

            /**
             * Generate the remove attribute url
             *
             * @return {String}
             */
            generateRemoveAttributeUrl: function (attribute) {
                return Routing.generate(
                    this.config.removeAttributeRoute,
                    {
                        code: this.getFormData().code,
                        attributeId: attribute.id
                    }
                );
            },

            /**
             * Initialize  the scope if there is none, or modify it by reference if there is already one
             *
             * @param {Object} event
             */
            initScope: function (event) {
                if (undefined === this.getScope()) {
                    this.setScope(event.scopeCode, {silent: true});
                } else {
                    event.scopeCode = this.getScope();
                }
            },

            /**
             * Set the current scope
             *
             * @param {String} scope
             * @param {Object} options
             */
            setScope: function (scope, options) {
                UserContext.set('catalogScope', scope, options);
            },

            /**
             * Get the current scope
             */
            getScope: function () {
                return UserContext.get('catalogScope');
            },

            /**
             * Initialize  the locale if there is none, or modify it by reference if there is already one
             *
             * @param {Object} event
             */
            initLocale: function (event) {
                if (undefined === this.getLocale()) {
                    this.setLocale(event.localeCode, {silent: true});
                } else {
                    event.localeCode = this.getLocale();
                }
            },

            /**
             * Set the current locale
             *
             * @param {String} locale
             * @param {Object} options
             */
            setLocale: function (locale, options) {
                UserContext.set('catalogLocale', locale, options);
            },

            /**
             * Get the current locale
             */
            getLocale: function () {
                return UserContext.get('catalogLocale');
            },

            /**
             * Post save actions
             */
            postSave: function () {
                FieldManager.fields = {};
                this.render();
            },

            /**
             * Switch to the given attribute
             *
             * @param {Event} event
             */
            showAttribute: function (event) {
                AttributeGroupManager.getAttributeGroupsForObject(this.getFormData())
                    .then(function (attributeGroups) {
                        this.getRoot().trigger('pim_enrich:form:form-tabs:change', this.code);

                        var attributeGroup = AttributeGroupManager.getAttributeGroupForAttribute(
                            attributeGroups,
                            event.attribute
                        );
                        var needRendering = false;

                        if (!attributeGroup) {
                            return;
                        }

                        if (event.scope) {
                            this.setScope(event.scope, {silent: true});
                            needRendering = true;
                        }
                        if (event.locale) {
                            this.setLocale(event.locale, {silent: true});
                            needRendering = true;
                        }

                        var attributeGroupSelector = this.getExtension('attribute-group-selector');
                        if (attributeGroup !== attributeGroupSelector.getCurrent()) {
                            attributeGroupSelector.setCurrent(attributeGroup);
                            needRendering = true;
                        }

                        if (needRendering) {
                            this.render();
                        }

                        var displayedAttributes = FieldManager.getFields();

                        if (_.has(displayedAttributes, event.attribute)) {
                            displayedAttributes[event.attribute].setFocus();
                        }
                    }.bind(this));
            },

            /**
             * Toggle the comparison mode
             *
             * @param {Boolean} open
             */
            comparisonChange: function (open) {
                this.$el[open ? 'addClass' : 'removeClass']('comparison-mode');
                this.$el.find('.AknAttributeActions')[open ? 'addClass' : 'removeClass'](
                    'AknAttributeActions--comparisonMode'
                );
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 183 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/common/edit/field/select.js ***!
  \*****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Select field extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(/*! underscore */ 0),
    __webpack_require__(/*! pim/job/common/edit/field/field */ 168),
    __webpack_require__(/*! pim/template/export/common/edit/field/select */ 205),
    __webpack_require__(/*! jquery.select2 */ 29)
], __WEBPACK_AMD_DEFINE_RESULT__ = function (
    _,
    BaseField,
    fieldTemplate
) {
    return BaseField.extend({
        fieldTemplate: _.template(fieldTemplate),
        events: {
            'change select': 'updateState'
        },

        /**
         * {@inheritdoc}
         */
        render: function () {
            BaseField.prototype.render.apply(this, arguments);

            this.$('.select2').select2();
        },

        /**
         * Get the field dom value
         *
         * @return {string}
         */
        getFieldValue: function () {
            return this.$('select').val();
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 184 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/common/edit/save.js ***!
  \*********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Save extension for job instance
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form/common/save */ 159),
        __webpack_require__(/*! oro/messenger */ 16),
        __webpack_require__(/*! pim/field-manager */ 150),
        __webpack_require__(/*! pim/i18n */ 17),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! pim/router */ 11)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        __,
        BaseSave,
        messenger,
        FieldManager,
        i18n,
        UserContext,
        Routing,
        router
    ) {
        return BaseSave.extend({
            updateSuccessMessage: __('pim_enrich.entity.job_instance.info.update_successful'),
            updateFailureMessage: __('pim_enrich.entity.job_instance.info.update_failed'),

            /**
             * {@inheritdoc}
             */
            save: function () {
                var jobInstance = $.extend(true, {}, this.getFormData());

                delete jobInstance.meta;
                delete jobInstance.connector;

                this.showLoadingMask();
                this.getRoot().trigger('pim_enrich:form:entity:pre_save');

                return this.getJobInstanceSaver()
                    .save(jobInstance.code, jobInstance)
                    .then(function (data) {
                        this.postSave();

                        this.setData(data);
                        this.getRoot().trigger('pim_enrich:form:entity:post_fetch', data);
                        router.redirectToRoute(
                            this.config.redirectPath,
                            {code: jobInstance.code}
                        );
                    }.bind(this))
                    .fail(this.fail.bind(this))
                    .always(this.hideLoadingMask.bind(this));
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 185 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/manager/attribute-group-manager.js ***!
  \********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1), __webpack_require__(/*! underscore */ 0), __webpack_require__(/*! pim/fetcher-registry */ 10), __webpack_require__(/*! pim/attribute-manager */ 153)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, FetcherRegistry, AttributeManager) {
    return {
        /**
         * Get all the attribute group for the given object
         *
         * @param {Object} object
         *
         * @return {Promise}
         */
        getAttributeGroupsForObject: function (object) {
            return $.when(
                FetcherRegistry.getFetcher('attribute-group').fetchAll(),
                AttributeManager.getAttributes(object)
            ).then(function (attributeGroups, ObjectAttributes) {
                var activeAttributeGroups = {};
                _.each(attributeGroups, function (attributeGroup) {
                    if (_.intersection(attributeGroup.attributes, ObjectAttributes).length > 0) {
                        activeAttributeGroups[attributeGroup.code] = attributeGroup;
                    }
                });

                return activeAttributeGroups;
            });
        },

        /**
         * Get attribute group values filtered from the whole list
         *
         * @param {Object} values
         * @param {String} attributeGroup
         *
         * @return {Object}
         */
        getAttributeGroupValues: function (values, attributeGroup) {
            var matchingValues = {};
            if (!attributeGroup) {
                return matchingValues;
            }

            _.each(attributeGroup.attributes, function (attributeCode) {
                if (values[attributeCode]) {
                    matchingValues[attributeCode] = values[attributeCode];
                }
            });

            return matchingValues;
        },

        /**
         * Get the attribute group for the given attribute
         *
         * @param {Array} attributeGroups
         * @param {String} attributeCode
         *
         * @return {String}
         */
        getAttributeGroupForAttribute: function (attributeGroups, attributeCode) {
            var result = null;

            _.each(attributeGroups, function (attributeGroup) {
                if (-1 !== attributeGroup.attributes.indexOf(attributeCode)) {
                    result = attributeGroup.code;
                }
            });

            return result;
        }
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 186 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/provider/to-fill-field-provider.js ***!
  \********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Attribute group selector extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! pim/attribute-manager */ 153),
        __webpack_require__(/*! pim/fetcher-registry */ 10)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, mediator, attributeManager, fetcherRegistry) {
        return {
            /**
             * Get list of fields that need to be filled to complete the product
             *
             * @param {object} root
             * @param {object} product
             *
             * @return {promise}
             */
            getFields: function (root, product) {
                var filterPromises = [];
                root.trigger(
                    'pim_enrich:form:field:to-fill-filter',
                    {'filters': filterPromises}
                );

                return $.when.apply($, filterPromises).then(function () {
                    return arguments;
                }).then(function (filters) {
                    return attributeManager.getAttributes(product)
                        .then(function (attributeCodes) {
                            return fetcherRegistry.getFetcher('attribute').fetchByIdentifiers(attributeCodes);
                        })
                        .then(function (attributesToFilter) {
                            var filteredAttributes = _.reduce(filters, function (attributes, filter) {
                                return filter(attributes);
                            }, attributesToFilter);

                            return _.map(filteredAttributes, function (attribute) {
                                return attribute.code;
                            });
                        });
                });
            }
        };
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 187 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************!*\
  !*** ./src/Pim/Bundle/NavigationBundle/Resources/public/js/navigation/abstract-view.js ***!
  \*****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ 0), __webpack_require__(/*! backbone */ 2), __webpack_require__(/*! oro/navigation/dotmenu/view */ 366), __webpack_require__(/*! pim/router */ 11)], __WEBPACK_AMD_DEFINE_RESULT__ = function(_, Backbone, DotmenuView, router) {
    'use strict';

    /**
     * @export  oro/navigation/abstract-view
     * @class   oro.navigation.AbstractView
     * @extends Backbone.View
     */
    return Backbone.View.extend({
        options: {
            tabTitle: 'Tabs',
            tabIcon: 'icon-folder-close',
            tabId: 'tabs',
            hideTabOnEmpty: false,
            collection: null
        },

        initialize: function() {
            this.dotMenu = new DotmenuView();
        },

        getCollection: function() {
            return this.options.collection;
        },

        registerTab: function() {
            this.dotMenu.addTab({
                key: this.options.tabId,
                title: this.options.tabTitle,
                icon: this.options.tabIcon,
                hideOnEmpty: this.options.hideTabOnEmpty
            });
        },

        /**
         * Search for pinbar items for current page.
         * @param  {Boolean} excludeGridParams
         * @param  {String}  url
         * @return {*}
         */
        getItemForCurrentPage: function(excludeGridParams) {
            return this.getItemForPage(this.getCurrentPageItemData().url, excludeGridParams);
        },

        /**
         * Search for pinbar items for url.
         * @param  {String}  url
         * @param  {Boolean} excludeGridParams
         * @return {*}
         */
        getItemForPage: function(url, excludeGridParams) {
            return this.options.collection.filter(_.bind(function (item) {
                var itemUrl = item.get('url');
                if (!_.isUndefined(excludeGridParams) && excludeGridParams) {
                    itemUrl = itemUrl.split('#g')[0];
                    url = url.split('#g')[0];
                }
                return itemUrl == url;
            }, this));
        },

        /**
         * Get object with info about current page
         * @return {Object}
         */
        getCurrentPageItemData: function() {
            return { url: Backbone.history.getFragment() };
        },

        /**
         * Get data for new navigation item based on element options
         *
         * @param el
         * @returns {Object}
         */
        getNewItemData: function(el) {
            itemData['title'] = document.title;
            return itemData;
        },

        cleanupTab: function() {
            this.dotMenu.cleanup(this.options.tabId);
            this.dotMenu.hideTab(this.options.tabId);
        },

        addItemToTab: function(item, prepend) {
            this.dotMenu.addTabItem(this.options.tabId, item, prepend);
        },

        checkTabContent: function() {
            this.dotMenu.checkTabContent(this.options.tabId);
        },

        render: function() {
            this.checkTabContent();
            return this;
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 188 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************************!*\
  !*** ./src/Pim/Bundle/NavigationBundle/Resources/public/js/navigation/collection.js ***!
  \**************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global define */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! backbone */ 2), __webpack_require__(/*! oro/navigation/model */ 170)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Backbone, NavigationModel) {
    'use strict';

    /**
     * @export  oro/navigation/collection
     * @class   oro.navigation.Collection
     * @extends Backbone.Collection
     */
    return Backbone.Collection.extend({
        model: NavigationModel
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 189 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************!*\
  !*** ./src/Pim/Bundle/NavigationBundle/Resources/public/js/navigation/pinbar/model.js ***!
  \****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global define */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! oro/navigation/model */ 170)], __WEBPACK_AMD_DEFINE_RESULT__ = function(NavigationModel) {
    'use strict';

    /**
     * @export  oro/navigation/pinbar/model
     * @class   oro.navigation.pinbar.Model
     * @extends oro.navigation.Model
     */
    return NavigationModel.extend({
        defaults: {
            title: '',
            url: null,
            position: null,
            type: 'pinbar',
            display_type: null,
            maximized: false,
            remove: false
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 190 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************!*\
  !*** ./src/Pim/Bundle/UIBundle/Resources/public/js/pim-dialogform.js ***!
  \***********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global console */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1), __webpack_require__(/*! oro/mediator */ 6), __webpack_require__(/*! pim/router */ 11), __webpack_require__(/*! oro/loading-mask */ 18), __webpack_require__(/*! pim/initselect2 */ 30), __webpack_require__(/*! jquery-ui */ 48), __webpack_require__(/*! bootstrap */ 23)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, mediator, router, LoadingMask, initSelect2) {
        'use strict';

        // Allow using select2 search box in jquery ui dialog
        $.ui.dialog.prototype._allowInteraction = function (e) {
            return !!$(e.target).closest('.ui-dialog, .select2-drop').length;
        };

        return function (elementId, callback) {
            var $el = $(elementId);
            if (!$el.length) {
                return console.error('DialogForm: the element could not be found!');
            }
            var $dialog;
            var url = $el.attr('data-form-url');
            if (!url) {
                throw new Error('DialogForm: please specify the url');
            }
            var width = $el.attr('data-form-width') || 400;

            var loadingMask = null;

            function showLoadingMask() {
                if (!loadingMask) {
                    loadingMask = new LoadingMask();
                    loadingMask.render().$el.appendTo($('#container'));
                }
                loadingMask.show();
            }

            function destroyDialog() {
                if ($dialog && $dialog.length) {
                    $dialog.remove();
                }
                $dialog = null;
            }

            function createDialog(data) {
                destroyDialog();
                var $form = $(data);
                var formTitle = $form.data('title');
                var formId = '#' + $form.attr('id');

                var formButtons = [];
                var submitButton = $form.data('button-submit');
                var cancelButton = $form.data('button-cancel');
                if (submitButton) {
                    formButtons.push({
                        text: submitButton,
                        'class': 'btn btn-primary',
                        click: function () {
                            showLoadingMask();
                            $.ajax({
                                url: url,
                                type: 'post',
                                data: $(formId).serialize(),
                                success: function (data) {
                                    processResponse(data);
                                    mediator.trigger('dialog:open:after', this);
                                }
                            });
                        }
                    });
                }
                if (cancelButton) {
                    formButtons.push({
                        text: cancelButton,
                        'class': 'btn',
                        click: function () {
                            destroyDialog();
                        }
                    });
                }

                $dialog = $form.dialog({
                    title: formTitle,
                    modal: true,
                    resizable: false,
                    width: width,
                    buttons: formButtons,
                    open: function () {
                        $(this).parent().keypress(function (e) {
                            if (e.keyCode === $.ui.keyCode.ENTER) {
                                e.preventDefault();
                                e.stopPropagation();
                                $(this).find('button.btn-primary:eq(0)').click();
                            }
                        });
                    },
                    close: function () {
                        $(this).remove();
                    }
                });

                initSelect2.init($(formId));
                $(formId + ' .switch').bootstrapSwitch();

                $(formId).find('[data-toggle="tooltip"]').tooltip();
            }

            function isJSON(str) {
                try {
                    JSON.parse(str);
                } catch (e) {
                    return false;
                }

                return true;
            }

            function processResponse(data) {
                loadingMask.hide();
                if (isJSON(data)) {
                    data = $.parseJSON(data);
                    destroyDialog();
                    if (callback) {
                        callback(data);
                    } else {
                        router.redirect(data.url);
                    }
                } else if ($(data).prop('tagName').toLowerCase() === 'form') {
                    createDialog(data);
                }
            }

            $el.on('click', function (e) {
                e.preventDefault();
                showLoadingMask();
                $.ajax({
                    url: url,
                    type: 'get',
                    success: function (data) {
                        loadingMask.hide();
                        createDialog(data);
                        mediator.trigger('dialog:open:after', this);
                    }
                });
            });
        };
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 191 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************!*\
  !*** ./src/Pim/Bundle/UIBundle/Resources/public/lib/slimbox2/slimbox2.js ***!
  \***************************************************************************/
/***/ (function(module, exports) {

/*
	Slimbox v2.04 - The ultimate lightweight Lightbox clone for jQuery
	(c) 2007-2010 Christophe Beyls <http://www.digitalia.be>
	MIT-style license.
*/
(function (w) {
var E = w(window), u, f, F = -1, n, x, D, v, y, L, r, m = !window.XMLHttpRequest, s = [], l = document.documentElement, k = {}, t = new Image(), J = new Image(), H, a, g, p, I, d, G, c, A, K;w(function () {
    w("body").append(w([H = w('<div id="lbOverlay" />')[0], a = w('<div id="lbCenter" />')[0], G = w('<div id="lbBottomContainer" />')[0]]).css("display", "none"));g = w('<div id="lbImage" />').appendTo(a).append(p = w('<div style="position: relative;" />').append([I = w('<a id="lbPrevLink" href="#" />').click(B)[0], d = w('<a id="lbNextLink" href="#" />').click(e)[0]])[0])[0];c = w('<div id="lbBottom" />').appendTo(G).append([w('<a id="lbCloseLink" href="#" />').add(H).click(C)[0], A = w('<div id="lbCaption" />')[0], K = w('<div id="lbNumber" />')[0], w('<div style="clear: both;" />')[0]])[0]
});w.slimbox = function (O, N, M) {
    u = w.extend({loop: false, overlayOpacity: 0.8, overlayFadeDuration: 400, resizeDuration: 400, resizeEasing: "swing", initialWidth: 250, initialHeight: 250, imageFadeDuration: 400, captionAnimationDuration: 400, counterText: "Image {x} of {y}", closeKeys: [27, 88, 67], previousKeys: [37, 80], nextKeys: [39, 78]}, M);if (typeof O == "string") {
        O = [[O, N]];N = 0
    }y = E.scrollTop() + (E.height() / 2);L = u.initialWidth;r = u.initialHeight;w(a).css({top: Math.max(0, y - (r / 2)), width: L, height: r, marginLeft: -L / 2}).show();v = m || (H.currentStyle && (H.currentStyle.position != "fixed"));if (v) {
        H.style.position = "absolute"
    }w(H).css("opacity", u.overlayOpacity).fadeIn(u.overlayFadeDuration);z();j(1);f = O;u.loop = u.loop && (f.length > 1);return b(N)
};w.fn.slimbox = function (M, P, O) {
    P = P || function (Q) {
        return [Q.href, Q.title]
    };O = O || function () {
        return true
    };var N = this;return N.unbind("click").click(function () {
        var S = this, U = 0, T, Q = 0, R;T = w.grep(N, function (W, V) {
            return O.call(S, W, V)
        });for (R = T.length; Q < R; ++Q) {
            if (T[Q] == S) {
                U = Q
            }T[Q] = P(T[Q], Q)
        }return w.slimbox(T, U, M)
    })
};function z() {
    var N = E.scrollLeft(), M = E.width();w([a, G]).css("left", N + (M / 2));if (v) {
        w(H).css({left: N, top: E.scrollTop(), width: M, height: E.height()})
    }
}function j(M) {
    if (M) {
        w("object").add(m ? "select" : "embed").each(function (O, P) {
            s[O] = [P, P.style.visibility];P.style.visibility = "hidden"
        })
    }else {
        w.each(s, function (O, P) {
            P[0].style.visibility = P[1]
        });s = []
    }var N = M ? "bind" : "unbind";E[N]("scroll resize", z);w(document)[N]("keydown", o)
}function o(O) {
    var N = O.keyCode, M = w.inArray;return (M(N, u.closeKeys) >= 0) ? C() : (M(N, u.nextKeys) >= 0) ? e() : (M(N, u.previousKeys) >= 0) ? B() : false
}function B() {
    return b(x)
}function e() {
    return b(D)
}function b(M) {
    if (M >= 0) {
        F = M;n = f[F][0];x = (F || (u.loop ? f.length : 0)) - 1;D = ((F + 1) % f.length) || (u.loop ? 0 : -1);q();a.className = "lbLoading";k = new Image();k.onload = i;k.src = n
    }return false
}function i() {
    a.className = "";w(g).css({backgroundImage: "url(" + n + ")", visibility: "hidden", display: ""});w(p).width(k.width);w([p, I, d]).height(k.height);w(A).html(f[F][1] || "");w(K).html((((f.length > 1) && u.counterText) || "").replace(/{x}/, F + 1).replace(/{y}/, f.length));if (x >= 0) {
        t.src = f[x][0]
    }if (D >= 0) {
        J.src = f[D][0]
    }L = g.offsetWidth;r = g.offsetHeight;var M = Math.max(0, y - (r / 2));if (a.offsetHeight != r) {
        w(a).animate({height: r, top: M}, u.resizeDuration, u.resizeEasing)
    }if (a.offsetWidth != L) {
        w(a).animate({width: L, marginLeft: -L / 2}, u.resizeDuration, u.resizeEasing)
    }w(a).queue(function () {
        w(G).css({width: L, top: M + r, marginLeft: -L / 2, visibility: "hidden", display: ""});w(g).css({display: "none", visibility: "", opacity: ""}).fadeIn(u.imageFadeDuration, h)
    })
}function h() {
    if (x >= 0) {
        w(I).show()
    }if (D >= 0) {
        w(d).show()
    }w(c).css("marginTop", -c.offsetHeight).animate({marginTop: 0}, u.captionAnimationDuration);G.style.visibility = ""
}function q() {
    k.onload = null;k.src = t.src = J.src = n;w([a, g, c]).stop(true);w([I, d, g, G]).hide()
}function C() {
    if (F >= 0) {
        q();F = x = D = -1;w(a).hide();w(H).stop().fadeOut(u.overlayFadeDuration, j)
    }return false
}
})(jQuery);


/***/ }),
/* 192 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/templates/configure-columns-action.html ***!
  \************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"AknColumnConfigurator-column\">\n    <div class=\"AknColumnConfigurator-columnHeader\"></div>\n    <div class=\"AknColumnConfigurator-listContainer\">\n        <ul class=\"AknVerticalList nav-list\">\n            <li class=\"AknVerticalList-item AknVerticalList-item--selectable tab active\">\n                <%- _.__(\"pim_datagrid.column_configurator.all_groups\") %>\n                <span class=\"badge badge-transparent pull-right\"><%- columns.length %></span>\n            </li>\n            <% _.each(groups, function(group) { %>\n            <li class=\"AknVerticalList-item AknVerticalList-item--selectable tab\" data-value=\"<%- group.name %>\">\n                <%- group.name %>\n                <span class=\"AknBadge\"><%- group.itemCount %></span>\n            </li>\n            <% }); %>\n        </ul>\n    </div>\n</div>\n\n<div class=\"AknColumnConfigurator-column\">\n    <div class=\"AknColumnConfigurator-columnHeader\">\n        <i class=\"AknColumnConfigurator-searchIcon icon-search\"></i>\n        <input class=\"AknTextField AknColumnConfigurator-searchInput\" type=\"search\" placeholder=\"<%- _.__('pim_datagrid.column_configurator.search') %>\"/>\n    </div>\n    <div class=\"AknColumnConfigurator-listContainer\">\n        <ul id=\"column-list\" class=\"AknVerticalList connected-sortable\">\n            <% _.each(_.where(columns, {displayed: false}), function(column) { %>\n            <li class=\"AknVerticalList-item AknVerticalList-item--movable\" data-value=\"<%- column.code %>\" data-group=\"<%- column.group %>\">\n                <div>\n                    <i class=\"icon-th\"></i>\n                    <%- column.label %>\n                </div>\n                <a href=\"javascript:void(0);\" class=\"AknIconButton AknIconButton--small AknIconButton--grey action\" title=\"<%- _.__('pim_datagrid.column_configurator.remove_column') %>\">\n                    <i class=\"icon-trash\"></i>\n                </a>\n            </li>\n            <% }); %>\n        </ul>\n    </div>\n</div>\n\n<div class=\"AknColumnConfigurator-column\">\n    <div class=\"AknColumnConfigurator-columnHeader\">\n        <%- _.__(\"pim_datagrid.column_configurator.displayed_columns\") %>\n        <button class=\"AknButton AknButton--grey reset\">\n            <%- _.__(\"pim_datagrid.column_configurator.clear\") %>\n        </button>\n    </div>\n    <div class=\"AknColumnConfigurator-listContainer\">\n        <ul id=\"column-selection\" class=\"AknVerticalList connected-sortable\">\n            <% _.each(_.sortBy(_.where(columns, {displayed: true}), 'position'), function(column) { %>\n            <li class=\"AknVerticalList-item AknVerticalList-item--movable\" data-value=\"<%- column.code %>\" data-group=\"<%- column.group %>\">\n                <div>\n                    <i class=\"icon-th\"></i>\n                    <%- column.label %>\n                </div>\n                <a href=\"javascript:void(0);\" class=\"AknIconButton AknIconButton--small AknIconButton--grey action\" title=\"<%- _.__('pim_datagrid.column_configurator.remove_column') %>\">\n                    <% if (column.removable) { %><i class=\"icon-trash\"></i><% } %>\n                </a>\n            </li>\n            <% }); %>\n            <div class=\"AknMessageBox AknMessageBox--error AknMessageBox--hide alert alert-error\"><%- _.__(\"datagrid_view.columns.min_message\") %></div>\n        </ul>\n    </div>\n</div>\n"

/***/ }),
/* 193 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/templates/filter/date-filter.html ***!
  \******************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"AknFilterDate\">\n    <select class=\"AknFilterDate-select type\" name=\"<%= name %>\">\n        <% _.each(choices, function (option) { %>\n        <option value=\"<%= option.value %>\"<% if (option.value == selectedChoice) { %> selected=\"selected\"<% } %>><%= option.label %></option>\n        <% }); %>\n    </select>\n    <div class=\"AknFilterDate-dates\">\n        <span class=\"AknFilterDate-start\">\n            <input type=\"text\" value=\"\" class=\"<%= inputClass %> add-on\" name=\"start\" placeholder=\"<%- _.__('from') %>\" size=\"1\">\n        </span>\n        <span class=\"AknFilterDate-separator\">-</span>\n        <span class=\"AknFilterDate-end\">\n            <input type=\"text\" value=\"\" class=\"<%= inputClass %> add-on\" name=\"end\" placeholder=\"<%- _.__('to') %>\" size=\"1\">\n        </span>\n    </div>\n    <div class=\"AknButtonList AknButtonList--right\">\n        <button class=\"AknButtonList-item AknButton AknButton--apply filter-update\" type=\"button\"><%- _.__('Update') %></button>\n    </div>\n</div>\n"

/***/ }),
/* 194 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/templates/filter/metric-filter.html ***!
  \********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"AknFilterChoice metricfilter choicefilter\">\n    <div class=\"AknFilterChoice-operator AknDropdown btn-group\">\n        <button class=\"AknActionButton AknActionButton--big AknActionButton--noRightBorder dropdown-toggle\" data-toggle=\"dropdown\">\n            <%= _.__('Action') %>\n            <span class=\"AknCaret caret\"></span>\n        </button>\n        <ul class=\"dropdown-menu\">\n            <% _.each(choices, function (choice) { %>\n            <li><a class=\"choice_value\" href=\"#\" data-value=\"<%= choice.value %>\"><%= choice.label %></a></li>\n            <% }); %>\n            </ul>\n        <input class=\"name_input\" type=\"hidden\" name=\"metric_type\" value=\"\"/>\n        </div>\n\n    <input class=\"AknTextField AknTextField--noRadius AknFilterChoice-field\" type=\"text\" name=\"value\" value=\"\">\n\n    <div class=\"AknFilterChoice-operator AknDropdown\">\n        <button class=\"AknActionButton AknActionButton--big AknActionButton--noRightBorder AknActionButton--noLeftBorder dropdown-toggle\" data-toggle=\"dropdown\">\n            <%= _.__('Unit') %>\n            <span class=\"AknCaret caret\"></span>\n        </button>\n        <ul class=\"dropdown-menu\">\n            <% _.each(units, function (symbol, code) { %>\n                <li><a class=\"choice_value\" href=\"#\" data-value=\"<%= code %>\"><%= _.__(code) %></a></li>\n            <% }); %>\n            </ul>\n        <input class=\"name_input\" type=\"hidden\" name=\"metric_unit\" value=\"\"/>\n        </div>\n    <button class=\"AknButton AknButton--apply AknFilterChoice-button AknButton--noLeftRadius filter-update\" type=\"button\"><%= _.__(\"Update\") %></button>\n</div>\n"

/***/ }),
/* 195 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/attribute-option/edit.html ***!
  \*******************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<td class=\"AknGrid-bodyCell field-cell\">\n    <div class=\"AknFieldContainer AknFieldContainer--withoutMargin\">\n        <div class=\"AknFieldContainer-inputContainer\">\n            <% if (item.id) { %>\n                <input type=\"hidden\" class=\"attribute_option_code\" value=\"<%- item.code %>\"/>\n                <span class=\"option-code\"><%- item.code %></span>\n            <% } else { %>\n                <input type=\"text\" class=\"AknTextField attribute_option_code exclude\" value=\"<%- item.code %>\"/>\n                <div class=\"AknFieldContainer-iconsContainer\">\n                    <i class=\"AknIconButton AknIconButton--important AknIconButton--hide icon-warning-sign validation-tooltip\" data-placement=\"top\" data-toggle=\"tooltip\"></i>\n                </div>\n            <% } %>\n        </div>\n    </div>\n</td>\n<% _.each(locales, function (locale) { %>\n    <td class=\"AknGrid-bodyCell field-cell\">\n        <% if (item.optionValues[locale]) { %>\n            <input type=\"text\" class=\"AknTextField attribute-option-value exclude\" data-locale=\"<%- locale %>\"\n                value=\"<%- item.optionValues[locale].value %>\"/>\n        <% } else { %>\n            <input type=\"text\" class=\"AknTextField attribute-option-value exclude\" data-locale=\"<%- locale %>\"\n        value=\"\"/>\n        <% } %>\n    </td>\n<% }); %>\n<td class=\"AknGrid-bodyCell\">\n    <div class=\"AknButtonList AknButtonList--right\">\n        <span class=\"AknButtonList-item AknIconButton AknIconButton--small AknIconButton--apply update-row\"><i class=\"icon-ok\"></i></span>\n        <span class=\"AknButtonList-item AknIconButton AknIconButton--small AknIconButton--important show-row\"><i class=\"icon-remove\"></i></span>\n    </div>\n</td>\n"

/***/ }),
/* 196 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/attribute-option/form.html ***!
  \*******************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"attribute-option-form form-inline\">\n    <div class=\"row-fluid\">\n        <div class=\"control-group\">\n            <label class=\"control-label\">\n                <%- _.__('pim_enrich.entity.attribute_option.code') %>\n                <div class=\"controls\">\n                    <input class=\"AknTextField input-large\" type=\"text\" name=\"code\">\n                </div>\n            </label>\n        </div>\n        <div class=\"control-group\">\n            <label class=\"control-label\">\n                <%- _.__('pim_enrich.entity.attribute_option.label') %>\n                <span><%= i18n.getFlag(locale) %></span>\n                <div class=\"controls\">\n                    <input class=\"AknTextField input-large\" type=\"text\" name=\"label-<%- locale %>\" data-locale=\"<%- locale %>\">\n                </div>\n            </label>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 197 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/attribute-option/index.html ***!
  \********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<colgroup>\n    <col class=\"code\" span=\"1\">\n    <col class=\"fields\" span=\"<%- locales.length %>\"/>\n    <col class=\"action\" span=\"1\"/>\n</colgroup>\n<thead>\n    <tr>\n        <th class=\"AknGrid-headerCell\"><%- code_label %></th>\n        <% _.each(locales, function (locale) { %>\n            <th class=\"AknGrid-headerCell\">\n                <%- locale %>\n            </th>\n        <% }); %>\n        <th class=\"AknGrid-headerCell AknGrid-headerCell--right\"><%- _.__('pim_enrich.entity.attribute_option.actions') %></th>\n    </tr>\n</thead>\n<tbody></tbody>\n<tfoot>\n    <tr class=\"AknGrid-bodyRow\">\n        <td class=\"AknGrid-bodyCell\" colspan=\"<%- 2 + locales.length %>\">\n            <span class=\"AknButton AknButton--grey AknButton--small option-add\"><%- add_option_label %></span>\n        </td>\n    </tr>\n</tfoot>\n"

/***/ }),
/* 198 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/attribute-option/show.html ***!
  \*******************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<td class=\"AknGrid-bodyCell\">\n    <span class=\"handle\"><i class=\"icon-reorder\"></i></span>\n    <span class=\"option-code\"><%- item.code %></span>\n</td>\n<% _.each(locales, function (locale) { %>\n    <td class=\"AknGrid-bodyCell\">\n        <% if (item.optionValues[locale]) { %>\n            <span title=\"<%- item.optionValues[locale].value %>\">\n                <%- item.optionValues[locale].value %>\n            </span>\n        <% } %>\n    </td>\n<% }); %>\n<td class=\"AknGrid-bodyCell\">\n    <div class=\"AknButtonList AknButtonList--right\">\n        <span class=\"AknButtonList-item AknIconButton AknIconButton--small AknIconButton--apply edit-row\"><i class=\"icon-pencil\"></i></span>\n        <span class=\"AknButtonList-item AknIconButton AknIconButton--small AknIconButton--important delete-row\"><i class=\"icon-trash\"></i></span>\n    </div>\n</td>\n"

/***/ }),
/* 199 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/attribute-option/validation-error.html ***!
  \*******************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"AknFieldContainer-validationErrors validation-errors\">\n    <% _.each(errors, function(error) { %>\n        <span class=\"AknFieldContainer-validationError\">\n            <i class=\"icon-warning-sign\"></i>\n            <span class=\"error-message\"><%- error %></span>\n        </span>\n    <% }) %>\n</div>\n"

/***/ }),
/* 200 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/channel/tab/properties/conversion-unit.html ***!
  \************************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"tabsection-title\"><%- label %></div>\n<div class=\"tabsection-content\">\n    <div class=\"AknFormContainer AknFormContainer--withPadding\">\n        <% _.each(metrics, function (attribute, key) { %>\n        <div class=\"AknFieldContainer\">\n            <div class=\"AknFieldContainer-header\">\n                <label class=\"AknFieldContainer-label control-label\" for=\"<%- fieldBaseId + attribute.code %>\">\n                    <%- i18n.getLabel(attribute.labels, catalogLocale, attribute.code) %>\n                </label>\n            </div>\n            <div class=\"AknFieldContainer-inputContainer\">\n                <select class=\"select2\" id=\"<%- fieldBaseId + attribute.code %>\">\n                    <% isMetricConfigured = !_.isUndefined(conversionUnits[attribute.code]) %>\n                    <option value=\"no_conversion\" <%- (!isMetricConfigured) ? 'selected' : '' %>>\n                        <%- doNotConvertLabel %>\n                    </option>\n                    <% _.each(_.keys(measures[attribute.metric_family].units), function (unit) { %>\n                    <option value=\"<%- unit %>\" <%- (isMetricConfigured && unit == conversionUnits[attribute.code]) ? 'selected' : '' %>>\n                        <%- _.__(unit) %>\n                    </option>\n                    <% }) %>\n                </select>\n            </div>\n        </div>\n        <% }) %>\n    </div>\n</div>\n"

/***/ }),
/* 201 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/channel/tab/properties/general.html ***!
  \****************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"tabsection-title\">\n    <%- sectionTitle %>\n</div>\n<div class=\"tabsection-content\">\n    <div class=\"AknFormContainer AknFormContainer--withPadding\" data-drop-zone=\"general-select-fields\">\n        <div class=\"AknFieldContainer\">\n            <div class=\"AknFieldContainer-header\">\n                <label class=\"AknFieldContainer-label control-label required\" for=\"pim_enrich_channel_form_code\">\n                    <%- label %> <em><%- requiredLabel %></em>\n                </label>\n            </div>\n            <div class=\"AknFieldContainer-inputContainer\">\n                <input id=\"pim_enrich_channel_form_code\" class=\"AknTextField channel-code\" type=\"text\"\n                    <%- false === hasId ? '' : 'readonly disabled' %>\n                    required value=\"<%- code %>\">\n            </div>\n            <div class=\"AknFieldContainer-footer\">\n                <div class=\"AknFieldContainer-validationErrors validation-errors\">\n                    <% _.each(errors, function (error) { %>\n                        <div class=\"AknFieldContainer-validationError\">\n                            <i class=\"icon-warning-sign\"></i><%- error %>\n                        </div>\n                    <% }); %>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 202 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/channel/tab/properties/general/currencies.html ***!
  \***************************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"AknFieldContainer-header\">\n    <label class=\"AknFieldContainer-label control-label required\" for=\"pim_enrich_channel_form_currencies\">\n        <%- label %> <em><%- requiredLabel %></em>\n    </label>\n</div>\n<div class=\"AknFieldContainer-inputContainer\">\n    <select class=\"select2\" multiple id=\"pim_enrich_channel_form_currencies\">\n        <% _.each(currencies, function (currency) { %>\n        <option value=\"<%- currency.code %>\"\n            <%- _.contains(currentCurrencies, currency.code) ? 'selected' : '' %>>\n            <%- currency.code %>\n        </option>\n        <% }); %>\n    </select>\n</div>\n<div class=\"AknFieldContainer-footer\">\n    <span class=\"AknFieldContainer-validationErrors validation-errors\">\n        <% _.each(errors, function (error) { %>\n            <span class=\"AknFieldContainer-validationError\">\n                <i class=\"icon-warning-sign\"></i> <span class=\"error-message\"><%- error %></span>\n            </span>\n        <% }); %>\n    </span>\n</div>\n"

/***/ }),
/* 203 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/channel/tab/properties/general/locales.html ***!
  \************************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"AknFieldContainer-header\">\n    <label class=\"AknFieldContainer-label control-label required\" for=\"pim_enrich_channel_form_locales\">\n        <%- label %> <em><%- requiredLabel %></em>\n    </label>\n</div>\n<div class=\"AknFieldContainer-inputContainer\">\n    <select class=\"select2\" multiple id=\"pim_enrich_channel_form_locales\">\n        <% _.each(locales, function (locale) { %>\n        <option value=\"<%- locale.code %>\" <%- _.findWhere(currentLocales, locale) ? 'selected' : '' %>><%- locale.label %></option>\n        <% }); %>\n    </select>\n</div>\n<div class=\"AknFieldContainer-footer\">\n    <div class=\"AknFieldContainer-validationErrors validation-errors\">\n        <% _.each(errors, function (error) { %>\n        <div class=\"AknFieldContainer-validationError\">\n            <i class=\"icon-warning-sign\"></i><%- error %>\n        </div>\n        <% }); %>\n    </div>\n</div>\n"

/***/ }),
/* 204 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/export/common/edit/field/field.html ***!
  \****************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"AknFieldContainer\">\n    <div class=\"AknFieldContainer-header\">\n        <label class=\"AknFieldContainer-label\" for=\"jobInstance_<%- config.fieldCode.replace('.', '_') %>\"><%- __(config.label) %></label>\n    </div>\n    <div class=\"AknFieldContainer-inputContainer field-input\">\n        <% if (undefined !== config.tooltip) { %>\n        <div class=\"icons-container\">\n            <i class=\"AknIconButton icon-info-sign\" data-toggle=\"tooltip\" data-placement=\"right\" data-original-title=\"<%- __(config.tooltip) %>\"></i>\n        </div>\n        <% } %>\n    </div>\n    <div class=\"AknFieldContainer-footer\">\n        <span class=\"below-input-elements-container\">\n            <% if (null !== error) { %>\n            <span class=\"validation-container\">\n                <span class=\"AknFieldContainer-validationErrors validation-errors\">\n                    <span class=\"AknFieldContainer-validationError\">\n                        <i class=\"icon-warning-sign\"></i> <span class=\"error-message\"><%- error %></span>\n                    </span>\n                </span>\n            </span>\n            <% } %>\n        </span>\n    </div>\n</div>\n"

/***/ }),
/* 205 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/export/common/edit/field/select.html ***!
  \*****************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<select class=\"select2\" id=\"jobInstance_<%- config.fieldCode.replace('.', '_') %>\" title=\"<%- __(config.label) %>\" <%- true === config.readOnly ? 'readonly disabled' : '' %>>\n    <% _.each(config.options, function (label, code) { %>\n        <option value=\"<%- code %>\" <%- value === code ? 'selected' : '' %>><%- __(label) %></option>\n    <% }) %>\n</select>\n"

/***/ }),
/* 206 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/export/common/edit/field/switch.html ***!
  \*****************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"switch switch-small\" data-on-label=\"<%- __('switch_on') %>\" data-off-label=\"<%- __('switch_off') %>\">\n    <input type=\"checkbox\" title=\"<%- __(config.label) %>\" id=\"jobInstance_<%- config.fieldCode.replace('.', '_') %>\" <%- value ? 'checked' : '' %> <%- true === config.readOnly ? 'readonly disabled' : '' %>/>\n</div>\n"

/***/ }),
/* 207 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/export/common/edit/field/text.html ***!
  \***************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<input class=\"AknTextField\" title=\"<%- __(config.label) %>\" id=\"jobInstance_<%- config.fieldCode.replace('.', '_') %>\" value=\"<%- value %>\" type=\"text\" name=\"jobInstance_<%- config.fieldCode.replace('.', '_') %>\" <%- true === config.readOnly ? 'readonly disabled' : '' %>/>\n"

/***/ }),
/* 208 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/export/common/edit/launch.html ***!
  \***********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<button class=\"AknButton AknButton--apply AknButton--withIcon AknButtonList-item\">\n    <i class=\"AknButton-icon icon-cogs\"></i>\n    <%- label %>\n</button>\n"

/***/ }),
/* 209 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/export/common/edit/meta.html ***!
  \*********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<span class=\"AknTitleContainer-metaItem\"><%- __('pim_enrich.form.job_instance.meta.job') %>: <%- jobInstance.code %> | <%- __('pim_enrich.form.job_instance.meta.connector') %>: <%- jobInstance.connector %></span>\n"

/***/ }),
/* 210 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/export/common/edit/properties.html ***!
  \***************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"tabsections AknTabContainer-content\">\n    <div class=\"tabsection\">\n        <div class=\"tabsection-title\">\n            <div class=\"pull-right\" data-drop-zone=\"headings\"></div>\n            <%- __('pim_enrich.export.product.properties.title') %>\n        </div>\n        <div class=\"tabsection-content AknFormContainer AknFormContainer--withPadding\">\n            <div class=\"AknFormContainer\" data-drop-zone=\"properties\"></div>\n        </div>\n    </div>\n    <div class=\"tabsection\">\n        <div class=\"tabsection-title\">\n            <div class=\"pull-right\" data-drop-zone=\"headings\"></div>\n            <%- __('pim_enrich.export.product.global_settings.title') %>\n        </div>\n        <div class=\"tabsection-content AknFormContainer AknFormContainer--withPadding\">\n            <div class=\"AknFormContainer\" data-drop-zone=\"global-settings\"></div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 211 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/export/common/edit/upload.html ***!
  \***********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"AknFormContainer AknFormContainer--withPadding AknFormContainer--centered\">\n    <div class=\"AknMediaField <%- !file ? 'has-file' : '' %>\" >\n        <% if (!file) { %>\n            <input class=\"AknMediaField-fileUploaderInput\" type=\"file\" name=\"Drag and drop a file or click here\"/>\n            <div class=\"AknMediaField-emptyContainer\">\n                <img src=\"/bundles/pimui/images/upload.png\" alt=\"upload icon\" class=\"AknMediaField-uploadIcon\"/>\n                <span><%- _.__('pim_enrich.job.upload')%></span>\n            </div>\n        <% } else { %>\n            <div class=\"AknMediaField-preview preview\">\n                <div class=\"AknMediaField-thumb file\"><i class=\"AknMediaField-icon icon icon-file\"></i></div>\n                <div class=\"AknMediaField-info info\">\n                    <div class=\"filename\" title=\"<%- file.name %>\"><%- file.name %></div>\n                    <div class=\"AknButtonList AknButtonList--centered actions\">\n                        <span class=\"AknButtonList-item AknIconButton AknIconButton--grey clear-field\"><i class=\"icon icon-trash\"></i></span>\n                    </div>\n                </div>\n            </div>\n        <% } %>\n        <div class=\"AknMediaField-progress AknProgress AknProgress--micro progress\">\n            <div class=\"AknProgress-bar bar\"></div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 212 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/export/common/edit/validation.html ***!
  \***************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<span class=\"validation-container\">\n    <span class=\"AknFieldContainer-validationErrors validation-errors\">\n        <% errors.forEach(function (error) { %>\n            <span class=\"AknFieldContainer-validationError\">\n                <i class=\"icon-warning-sign\"></i> <span class=\"error-message\"><%- error %></span>\n            </span>\n        <% }); %>\n    </span>\n</span>\n"

/***/ }),
/* 213 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/export/product/edit/content.html ***!
  \*************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"tabsections\">\n    <div data-drop-zone=\"structure-filters\" class=\"tabsection\"></div>\n    <div data-drop-zone=\"data-filters\" class=\"tabsection\"></div>\n</div>\n"

/***/ }),
/* 214 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/export/product/edit/content/data.html ***!
  \******************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"tabsection-title\">\n    <div class=\"pull-right AknButtonList-item\" data-drop-zone=\"headings\"></div>\n    <%- __('pim_enrich.export.product.data.title') %>\n</div>\n<div class=\"tabsection-content\">\n    <div class=\"AknFormContainer AknFormContainer--withPadding\" data-drop-zone=\"product-filters\"></div>\n    <div class=\"AknFormContainer AknFormContainer--withPadding filters\"></div>\n</div>\n"

/***/ }),
/* 215 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/export/product/edit/content/data/help.html ***!
  \***********************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<span class=\"AknFieldContainer-iconsContainer icons-container\">\n    <i class=\"AknIconButton icon-info-sign\" data-toggle=\"tooltip\" data-placement=\"right\" data-original-title=\"<%- text %>\"></i>\n</span>\n"

/***/ }),
/* 216 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/export/product/edit/content/structure.html ***!
  \***********************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"tabsection-title\">\n    <%- __('pim_enrich.export.product.structure.title') %>\n</div>\n<div class=\"tabsection-content\">\n    <div class=\"AknFormContainer AknFormContainer--withPadding\" data-drop-zone=\"filters\">\n    </div>\n</div>\n"

/***/ }),
/* 217 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/export/product/edit/content/structure/attribute-list.html ***!
  \**************************************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<% _.each(attributes, function (attribute) { %>\n<li class=\"AknVerticalList-item AknVerticalList-item--movable\" data-attribute-code=\"<%- attribute.code %>\">\n    <div>\n        <i class=\"icon-reorder\"></i>\n        <span class=\"attribute-label\"><%- i18n.getLabel(attribute.labels, userContext.get('uiLocale'), attribute.code) %></span>\n    </div>\n    <span class=\"AknIconButton AknIconButton--grey AknIconButton--small remove\"><i class=\"icon-trash\"></i></span>\n</li>\n<% }); %>\n"

/***/ }),
/* 218 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/export/product/edit/content/structure/attributes-selector.html ***!
  \*******************************************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"AknColumnConfigurator-column attribute-groups\">\n    <header class=\"AknColumnConfigurator-columnHeader\"><%- __('pim_enrich.export.product.filter.attributes_selector.attribute_group') %></header>\n    <div data-scroll-container=\"attribute-groups\" class=\"AknColumnConfigurator-listContainer\">\n        <ul class=\"AknVerticalList\">\n            <li class=\"AknVerticalList-item AknVerticalList-item--selectable <%- null === currentGroup ? 'selected active' : '' %>\" data-attribute-group-code=\"\"><%- __('pim_enrich.export.product.filter.attributes_selector.all_group') %></li>\n            <% _.each(attributeGroups, function (attributeGroup) { %>\n                <li class=\"AknVerticalList-item AknVerticalList-item--selectable <%- currentGroup === attributeGroup.code ? 'selected active' : '' %>\" data-attribute-group-code=\"<%- attributeGroup.code %>\">\n                    <%- i18n.getLabel(attributeGroup.labels, userContext.get('uiLocale'), attributeGroup.code) %>\n                </li>\n            <% }); %>\n        </ul>\n    </div>\n</div>\n<div class=\"AknColumnConfigurator-column attributes\">\n    <header class=\"AknColumnConfigurator-columnHeader\">\n        <i class=\"AknColumnConfigurator-searchIcon icon-search\"></i>\n        <input class=\"AknTextField  AknColumnConfigurator-searchInput search-field\" type=\"text\" placeholder=\"<%- __('pim_enrich.export.product.filter.attributes_selector.attributes', {attributeCount: attributeCount}) %>\"/>\n    </header>\n    <div data-scroll-container=\"attributes\" class=\"AknColumnConfigurator-listContainer\">\n        <ul class=\"AknVerticalList\"></ul>\n    </div>\n</div>\n<div class=\"AknColumnConfigurator-column selected-attributes\">\n    <header class=\"AknColumnConfigurator-columnHeader\">\n        <span><%- __('pim_enrich.export.product.filter.attributes_selector.selected') %></span>\n        <span class=\"AknButton AknButton--grey clear\"><%- __('pim_enrich.export.product.filter.attributes_selector.clear') %></span>\n    </header>\n    <div data-scroll-container=\"selected-attributes\" class=\"AknColumnConfigurator-listContainer\">\n        <span class=\"AknMessageBox AknMessageBox--centered empty-message <%- 0 === selectedAttributes.length ? '' : 'AknMessageBox--hide' %>\"><%- __('pim_enrich.export.product.filter.attributes_selector.empty_selection') %></span>\n        <ul class=\"AknVerticalList\"><!--\n            --><% _.each(selectedAttributes, function (attribute) { %>\n                <li class=\"AknVerticalList-item AknVerticalList-item--movable <%- currentGroup === attribute.code ? 'selected' : '' %>\" data-attribute-code=\"<%- attribute.code %>\">\n                    <div>\n                        <i class=\"icon-reorder\"></i>\n                        <span class=\"attribute-label\"><%- i18n.getLabel(attribute.labels, userContext.get('uiLocale'), attribute.code) %></span>\n                    </div>\n                    <span class=\"AknIconButton AknIconButton--grey AknIconButton--small remove\"><i class=\"icon-trash\"></i></span>\n                </li>\n            <% }); %><!--\n        --></ul>\n    </div>\n</div>\n"

/***/ }),
/* 219 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/export/product/edit/content/structure/attributes.html ***!
  \**********************************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"AknFieldContainer-header\">\n    <label class=\"AknFieldContainer-label control-label required\" for=\"pim_enrich.export.product.filter.attributes\"><%- __('pim_enrich.export.product.filter.attributes.title') %></label>\n</div>\n<div class=\"AknFieldContainer-inputContainer\">\n    <div class=\"AknTextField <%- !isEditable ? 'AknTextField--disabled' : 'AknTextField--withRightButton' %>\">\n        <%- labelInfo %>\n        <% if (isEditable) { %>\n        <button type=\"button\" class=\"AknButton AknButton--action AknButton--small AknButton--withIcon edit\">\n            <i class=\"AknButton-icon icon-pencil\"></i><%- labelEdit %>\n        </button>\n        <% } %>\n    </div>\n    <div class=\"AknFieldContainer-iconsContainer icons-container\">\n        <i class=\"AknIconButton icon-info-sign\" data-toggle=\"tooltip\" data-placement=\"right\" data-original-title=\"<%- __('pim_enrich.export.product.filter.attributes.help') %>\"></i>\n    </div>\n</div>\n<div class=\"AknFieldContainer-footer\">\n    <span class=\"below-input\">\n        <span class=\"AknFieldContainer-validationErrors validation-errors\">\n            <% errors.forEach(function (error) { %>\n                <span class=\"AknFieldContainer-validationError\">\n                    <i class=\"icon-warning-sign\"></i> <span class=\"error-message\"><%- error %></span>\n                </span>\n            <% }); %>\n        </span>\n    </span>\n</div>\n"

/***/ }),
/* 220 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/export/product/edit/content/structure/locales.html ***!
  \*******************************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"AknFieldContainer-header\">\n    <label class=\"AknFieldContainer-label control-label required\" for=\"pim_enrich.export.product.filter.locales\">\n        <%- __('pim_enrich.export.product.filter.locales.title') %> <em><%- __('pim_enrich.form.required') %></em>\n    </label>\n</div>\n<div class=\"AknFieldContainer-inputContainer\">\n    <select class=\"select2\" multiple <%- isEditable ? '' : 'disabled' %> id=\"pim_enrich.export.product.filter.locales\">\n        <% _.each(availableLocales, function (locale) { %>\n            <option value=\"<%- locale.code %>\" <%- _.contains(locales, locale.code) ? 'selected' : '' %>><%- locale.label %></option>\n        <% }); %>\n    </select>\n    <div class=\"AknFieldContainer-iconsContainer icons-container\">\n        <i class=\"AknIconButton icon-info-sign\" data-toggle=\"tooltip\" data-placement=\"right\" data-original-title=\"<%- __('pim_enrich.export.product.filter.locales.help') %>\"></i>\n    </div>\n</div>\n<div class=\"AknFieldContainer-footer\">\n    <span class=\"below-input\">\n        <span class=\"AknFieldContainer-validationErrors validation-errors\">\n            <% errors.forEach(function (error) { %>\n                <span class=\"AknFieldContainer-validationError\">\n                    <i class=\"icon-warning-sign\"></i> <span class=\"error-message\"><%- error %></span>\n                </span>\n            <% }); %>\n        </span>\n    </span>\n</div>\n"

/***/ }),
/* 221 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/export/product/edit/content/structure/scope.html ***!
  \*****************************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"AknFieldContainer-header\">\n    <label class=\"AknFieldContainer-label control-label required\" for=\"pim_enrich.export.product.filter.channel\">\n        <%- __('pim_enrich.export.product.filter.channel.title') %> <em><%- __('pim_enrich.form.required') %></em>\n    </label>\n</div>\n<div class=\"AknFieldContainer-inputContainer\">\n    <select class=\"select2\" <%- isEditable ? '' : 'disabled' %> id=\"pim_enrich.export.product.filter.channel\">\n        <% _.each(channels, function (channel) { %>\n            <option value=\"<%- channel.code %>\" <%- channel.code === scope ? 'selected' : '' %>><%- channel.labels[locale] %></option>\n        <% }); %>\n    </select>\n    <div class=\"AknFieldContainer-iconsContainer icons-container\">\n        <i class=\"AknIconButton icon-info-sign\" data-toggle=\"tooltip\" data-placement=\"right\" data-original-title=\"<%- __('pim_enrich.export.product.filter.channel.help') %>\"></i>\n    </div>\n</div>\n<div class=\"AknFieldContainer-footer\">\n    <span class=\"below-input\">\n        <span class=\"AknFieldContainer-validationErrors validation-errors\">\n            <% errors.forEach(function (error) { %>\n                <span class=\"AknFieldContainer-validationError\">\n                    <i class=\"icon-warning-sign\"></i> <span class=\"error-message\"><%- error %></span>\n                </span>\n            <% }); %>\n        </span>\n    </span>\n</div>\n"

/***/ }),
/* 222 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/family/tab/attributes.html ***!
  \*******************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"tabsections\">\n    <div class=\"tabsection tab-pane tab-attribute\" data-drop-zone=\"attributes-content\">\n\n    </div>\n</div>\n"

/***/ }),
/* 223 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/family/tab/attributes/attributes.html ***!
  \******************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"AknGridContainer\">\n    <table class=\"AknGrid AknGrid--unclickable groups\">\n        <thead>\n            <th class=\"AknGrid-headerCell\"><%- label %></th>\n            <% _.each(channels, function (channel) { %>\n            <th class=\"AknGrid-headerCell AknGrid-headerCell--center channel\">\n                <%- i18n.getLabel(channel.labels, catalogLocale, channel.code) %>\n            </th>\n            <% }) %>\n            <th class=\"AknGrid-headerCell\">&nbsp;</th>\n        </thead>\n        <% _.each(_.keys(groupedAttributes), function (group) { %>\n        <tbody>\n            <tr class=\"AknGrid-bodyRow AknGrid-bodyRow--highlight group\">\n                <td class=\"AknGrid-bodyCell\" colspan=\"<%- colspan %>\">\n                    <i class=\"icon-collapse-alt\"></i>\n                    <% var attributeGroup = _.findWhere(attributeGroups, {code: group}) %>\n                    <%-\n                        i18n.getLabel(\n                            attributeGroup.labels,\n                            catalogLocale,\n                            attributeGroup.code\n                        )\n                    %>\n                </td>\n            </tr>\n            <% _.each(groupedAttributes[group], function (attribute) { %>\n            <tr class=\"AknGrid-bodyRow\">\n                <td class=\"AknGrid-bodyCell\">\n                    <%- i18n.getLabel(attribute.labels, catalogLocale, attribute.code) %>\n                </td>\n                <% _.each(channels, function (channel) { %>\n                <td class=\"AknGrid-bodyCell AknGrid-bodyCell--center\">\n                    <div class=\"attribute-requirement\">\n                        <% required = _.contains(attributeRequirements[channel.code], attribute.code) %>\n                        <i\n                                class=\"AknAcl-icon <%- required ? 'AknAcl-icon--granted icon-ok required' : 'icon-circle non-required' %>\"\n                                data-toggle=\"tooltip\"\n                                data-attribute=\"<%- attribute.code %>\"\n                                data-channel=\"<%- channel.code %>\"\n                                data-type=\"<%- attribute.type %>\"\n                                data-required=\"<%- required %>\"\n                                data-original-title=\"<%- required ? requiredLabel : notRequiredLabel %>\"\n                                data-placement=\"right\"></i>\n                    </div>\n                </td>\n                <% }) %><!-- end each channel -->\n                <td class=\"AknGrid-bodyCell AknGrid-bodyCell--right\">\n                    <% if (identifierAttribute !== attribute.type) { %>\n                    <a href=\"#\"\n                       class=\"AknIconButton AknIconButton--small AknIconButton--grey remove-attribute\"\n                       data-attribute=\"<%- attribute.code %>\"\n                    >\n                        <i class=\"icon-trash\"></i>\n                    </a>\n                    <% } %>\n                </td>\n            </tr>\n            <% }) %><!-- end each attribute -->\n        </tbody>\n        <% }) %><!-- end each group -->\n    </table>\n</div>\n"

/***/ }),
/* 224 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/family/tab/attributes/toolbar.html ***!
  \***************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"AknGridToolbar-right\">\n    <div class=\"AknButtonList\" data-drop-zone=\"attributes-toolbar\">\n\n    </div>\n</div>\n"

/***/ }),
/* 225 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/family/tab/general/attribute-as-label.html ***!
  \***********************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"AknFieldContainer-header\">\n    <label class=\"AknFieldContainer-label control-label required\" for=\"<%- fieldBaseId + 'attribute_as_label' %>\">\n        <%- label %> <em><%- requiredLabel %></em>\n    </label>\n</div>\n<div class=\"AknFieldContainer-inputContainer\">\n    <select class=\"select2\" id=\"<%- fieldBaseId + 'attribute_as_label' %>\" <%- isReadOnly ? 'readonly disabled' : '' %>>\n        <% _.each(attributes, function (attribute) { %>\n        <option value=\"<%- attribute.code %>\" <%- (currentAttribute === attribute.code) ? 'selected' : '' %> >\n        <%- i18n.getLabel(attribute.labels, catalogLocale, attribute.code) %>\n        </option>\n        <% }); %>\n    </select>\n</div>\n<div class=\"AknFieldContainer-footer\">\n    <div class=\"AknFieldContainer-validationErrors validation-errors\">\n        <% _.each(errors, function (error) { %>\n        <div class=\"AknFieldContainer-validationError\">\n            <i class=\"icon-warning-sign\"></i><%- error %>\n        </div>\n        <% }); %>\n    </div>\n</div>\n"

/***/ }),
/* 226 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/filter/attribute/boolean.html ***!
  \**********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"switch switch-small\" data-on-label=\"<%- labels.on %>\" data-off-label=\"<%- labels.off %>\">\n    <input type=\"checkbox\" name=\"filter-value\" <%- value ? 'checked' : '' %> <%- editable ? '' : 'disabled' %>>\n</div>\n"

/***/ }),
/* 227 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/filter/attribute/date.html ***!
  \*******************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<select class=\"select2 operator\" <%- isEditable ? '' : 'disabled' %> name=\"filter-operator\">\n    <% _.each(operatorChoices, function (operatorChoice) { %>\n        <option value=\"<%- operatorChoice %>\"<%- operator === operatorChoice ? ' selected' : '' %>>\n            <%- __('pim_enrich.export.product.filter.' + shortName + '.operators.' + operatorChoice) %>\n        </option>\n    <% }); %>\n</select>\n\n<% if (!_.contains(['EMPTY', 'NOT EMPTY', 'BETWEEN', 'NOT BETWEEN'], operator)) { %>\n    <span class=\"start-date-wrapper\">\n        <input name=\"filter-value-start\" class=\"add-on value\" type=\"text\" <%- isEditable ? '' : 'disabled' %> value=\"<%- startValue ? startValue : '' %>\">\n    </span>\n<% } else if (_.contains(['BETWEEN', 'NOT BETWEEN'], operator)) { %>\n    <span class=\"start-date-wrapper\">\n        <input name=\"filter-value-start\" class=\"add-on value\" type=\"text\" <%- isEditable ? '' : 'disabled' %> value=\"<%- startValue ? startValue : '' %>\">\n    </span>\n    <span class=\"end-date-wrapper\">\n        <input name=\"filter-value-end\" class=\"add-on value\" type=\"text\" <%- isEditable ? '' : 'disabled' %> value=\"<%- endValue ? endValue : '' %>\">\n    </span>\n<% } %>\n"

/***/ }),
/* 228 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/filter/attribute/media.html ***!
  \********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<select class=\"select2 operator\" <%- editable ? '' : 'disabled' %> name=\"filter-operator\">\n    <% _.each(operators, function (operatorChoice) { %>\n        <option value=\"<%- operatorChoice %>\"<%- operator === operatorChoice ? ' selected' : '' %>>\n            <%- __('pim_enrich.export.product.filter.media.operators.' + operatorChoice) %>\n        </option>\n    <% }); %>\n</select>\n\n<% if (!_.contains(['EMPTY', 'NOT EMPTY'], operator)) { %>\n    <input type=\"text\" name=\"filter-value\" class=\"value\" value=\"<%- value %>\" <%- editable ? '' : 'disabled' %>>\n<% } %>\n"

/***/ }),
/* 229 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/filter/attribute/metric.html ***!
  \*********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<select class=\"select2 operator\" name=\"filter-operator\" <%- editable ? '' : 'disabled' %>>\n    <% _.each(operators, function (operatorChoice) { %>\n        <option value=\"<%- operatorChoice %>\"<%- operator === operatorChoice ? ' selected' : '' %>>\n            <%- __('pim_enrich.export.product.filter.metric.operators.' + operatorChoice) %>\n        </option>\n    <% }); %>\n</select>\n\n<% if (!_.contains(['EMPTY', 'NOT EMPTY'], operator)) { %>\n    <input type=\"text\" name=\"filter-data\" class=\"AknTextField AknTextField--noRightRadius AknTextField--noLeftRadius value\" value=\"<%- value.amount %>\" <%- editable ? '' : 'disabled' %>>\n\n    <select class=\"select2 unit\" name=\"filter-unit\" <%- editable ? '' : 'disabled' %>>\n        <% _.each(_.keys(units.units), function (key) { %>\n            <option value=\"<%- key %>\"<%- value.unit === key ? ' selected' : '' %>>\n                <%- __(key) %>\n            </option>\n        <% }); %>\n    </select>\n<% } %>\n"

/***/ }),
/* 230 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/filter/attribute/number.html ***!
  \*********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<select class=\"select2 operator\" <%- editable ? '' : 'disabled' %> name=\"filter-operator\">\n    <% _.each(operatorChoices, function (operatorChoice) { %>\n        <option value=\"<%- operatorChoice %>\"<%- operator === operatorChoice ? ' selected' : '' %>>\n            <%- __('pim_enrich.export.product.filter.' + shortName + '.operators.' + operatorChoice) %>\n        </option>\n    <% }); %>\n</select>\n\n<% if (!_.contains(['EMPTY', 'NOT EMPTY'], operator)) { %>\n    <input type=\"text\" name=\"filter-value\" class=\"value\" value=\"<%- value %>\" <%- editable ? '' : 'disabled' %>/>\n<% } %>\n"

/***/ }),
/* 231 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/filter/attribute/price-collection.html ***!
  \*******************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<select class=\"select2 operator\" <%- editable ? '' : 'disabled' %> name=\"filter-operator\">\n    <% _.each(operators, function (operatorChoice) { %>\n        <option value=\"<%- operatorChoice %>\"<%- operator === operatorChoice ? ' selected' : '' %>>\n            <%- __('pim_enrich.export.product.filter.price-collection.operators.' + operatorChoice) %>\n        </option>\n    <% }); %>\n</select>\n\n<% if (!_.contains(['EMPTY', 'NOT EMPTY'], operator)) { %>\n    <input type=\"text\" name=\"filter-data\" class=\"AknTextField AknTextField--noRightRadius AknTextField--noLeftRadius value\" value=\"<%- value.amount %>\" <%- editable ? '' : 'disabled' %>>\n\n    <select class=\"select2 currency\" name=\"filter-currency\" <%- editable ? '' : 'disabled' %>>\n        <% _.each(currencies, function (currencyChoice) { %>\n            <option value=\"<%- currencyChoice.code %>\"<%- value.currency === currencyChoice.code ? ' selected' : '' %>>\n                <%- currencyChoice.code %>\n            </option>\n        <% }); %>\n    </select>\n<% } %>\n"

/***/ }),
/* 232 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/filter/attribute/select.html ***!
  \*********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<select class=\"select2 operator\" name=\"filter-operator\" <%- editable ? '' : 'disabled' %>>\n    <% _.each(operators, function (operatorChoice) { %>\n        <option value=\"<%- operatorChoice %>\"<%- operator === operatorChoice ? ' selected' : '' %>>\n            <%- __('pim_enrich.export.product.filter.multi_select.operators.' + operatorChoice) %>\n        </option>\n    <% }); %>\n</select>\n\n<input type=\"hidden\" name=\"filter-value\" class=\"select2 value\" value=\"<%- value ? value : '' %>\" <%- editable ? '' : 'disabled' %> />\n"

/***/ }),
/* 233 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/filter/attribute/string.html ***!
  \*********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<select class=\"select2 operator\" <%- editable ? '' : 'disabled' %> name=\"filter-operator\">\n    <% _.each(operators, function (operatorChoice) { %>\n        <option value=\"<%- operatorChoice %>\"<%- operator === operatorChoice ? ' selected' : '' %>>\n            <%- __('pim_enrich.export.product.filter.string.operators.' + operatorChoice) %>\n        </option>\n    <% }); %>\n</select>\n\n<% if (!_.contains(['EMPTY', 'NOT EMPTY'], operator)) { %>\n    <input type=\"text\" name=\"filter-value\" class=\"value\" value=\"<%- value %>\" <%- editable ? '' : 'disabled' %>/>\n<% } %>\n"

/***/ }),
/* 234 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/filter/filter.html ***!
  \***********************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"AknFieldContainer-header\">\n    <label class=\"AknFieldContainer-label control-label\">\n        <%- label %>\n        <span class=\"label-elements-container\"></span>\n    </label>\n</div>\n<div class=\"AknFieldContainer-inputContainer\">\n    <div class=\"filter-input\"></div>\n    <span class=\"after-input-elements-container\"></span>\n    <% if (removable && editable) { %>\n        <div class=\"AknFieldContainer-iconsContainer icons-container\"><i class=\"AknIconButton remove icon-trash\"></i></div>\n    <% } %>\n</div>\n<div class=\"AknFieldContainer-footer\">\n    <span class=\"below-input-elements-container\"></span>\n</div>\n"

/***/ }),
/* 235 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/filter/product/category.html ***!
  \*********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"AknTextField <%- isEditable ? 'AknTextField--withRightButton' : 'AknTextField--disabled' %>\">\n    <%- labelInfo %>\n    <% if (isEditable) { %>\n    <button type=\"button\" class=\"AknButton AknButton--action AknButton--withIcon AknButton--small edit\" title=\"<%- titleEdit %>\">\n        <i class=\"AknButton-icon icon-pencil\"></i><%- labelEdit %>\n    </button>\n    <% } %>\n</div>\n"

/***/ }),
/* 236 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/filter/product/category/selector.html ***!
  \******************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<h4><%- label %></h4>\n<hr>\n<div class=\"root categories-selector-tree\" data-tree-id=\"<%- tree.id %>\"></div>\n"

/***/ }),
/* 237 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/filter/product/completeness.html ***!
  \*************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<select class=\"select2 operator\" <%- isEditable ? '' : 'disabled' %> name=\"filter-operator\">\n    <% _.each(operatorChoices, function (operatorChoice) { %>\n        <option value=\"<%- operatorChoice %>\"<%- operator === operatorChoice ? ' selected' : '' %>>\n            <%- __('pim_enrich.export.product.filter.completeness.operators.' + operatorChoice) %>\n        </option>\n    <% }); %>\n</select>\n"

/***/ }),
/* 238 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/filter/product/enabled.html ***!
  \********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<select class=\"select2 value\" name=\"filter-value\" <%- isEditable ? '' : 'disabled' %>>\n    <option value=\"all\"<%- value === null ? ' selected' : '' %>><%- labels.valueChoices.all %></option>\n    <option value=\"enabled\"<%- value === true ? ' selected' : '' %>><%- labels.valueChoices.enabled %></option>\n    <option value=\"disabled\"<%- value === false ? ' selected' : '' %>><%- labels.valueChoices.disabled %></option>\n</select>\n"

/***/ }),
/* 239 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/filter/product/family.html ***!
  \*******************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<input\n    class=\"select2 value\"\n    name=\"filter-value\"\n    type=\"hidden\"\n    value=\"<%- value ? value : '' %>\"\n    data-placeholder=\"<%- __('pim_enrich.export.product.filter.' + shortname + '.empty_selection') %>\"\n    <%- isEditable ? '' : 'disabled' %>\n/>\n"

/***/ }),
/* 240 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/filter/product/identifier.html ***!
  \***********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<textarea\n    class=\"AknTextareaField identifier\"\n    name=\"filter-value\"\n    <%- isEditable ? '' : 'disabled' %>\n><%- value %></textarea>\n"

/***/ }),
/* 241 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/filter/product/updated.html ***!
  \********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<select class=\"select2 operator\" <%- isEditable ? '' : 'disabled' %> name=\"filter-operator\">\n    <% _.each(operatorChoices, function (operatorChoice) { %>\n        <option value=\"<%- operatorChoice %>\"<%- operator === operatorChoice ? ' selected' : '' %>>\n            <%- __('pim_enrich.export.product.filter.updated.operators.' + operatorChoice) %>\n        </option>\n    <% }); %>\n</select>\n<div class=\"AknFieldContainer-iconsContainer\">\n    <% if ('>' === operator) { %>\n        <span class=\"date-wrapper\">\n            <input name=\"filter-value-updated\" class=\"AknTextField add-on value\" type=\"text\" <%- isEditable ? '' : 'disabled' %> value=\"<%- value ? value : '' %>\">\n        </span>\n    <% } else if ('SINCE LAST N DAYS' === operator) { %>\n        <input name=\"filter-value-updated\" class=\"AknTextField\" type=\"text\" value=\"<%- value ? value : '' %>\"<%- isEditable ? '' : ' disabled' %>>\n    <% } %>\n</div>\n"

/***/ }),
/* 242 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/form/add-select/footer.html ***!
  \********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"ui-multiselect-footer\">\n    <span class=\"item-counter\"><%- _.__(countTitle, {'itemsCount': numberOfItems}) %></span>\n    <button class=\"AknButton AknButton--small AknButton--apply AknButton--withIcon\" type=\"button\">\n        <i class=\"AknButton-icon icon-plus\"></i>\n        <%- buttonTitle %>\n    </button>\n</div>\n"

/***/ }),
/* 243 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/form/add-select/line.html ***!
  \******************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"select2-result-label-attribute\">\n    <input data-code=\"<%- item.id %>\" type=\"checkbox\" <%- checked ? 'checked=\"checked\"' : '' %> />\n    <span class=\"attribute-label\"><%- item.text %></span>\n</div>\n"

/***/ }),
/* 244 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/form/add-select/select.html ***!
  \********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<input type=\"hidden\" multiple=\"true\" class=\"select-field\"/>\n"

/***/ }),
/* 245 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/form/back-to-grid.html ***!
  \***************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<i class=\"icon-chevron-left\"></i>\n"

/***/ }),
/* 246 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/form/delete.html ***!
  \*********************************************************************************/
/***/ (function(module, exports) {

module.exports = "<i class=\"AknButton-icon icon-trash\"></i>\n<%- _.__('pim_enrich.entity.product.btn.delete') %>\n"

/***/ }),
/* 247 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/form/download-file.html ***!
  \****************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<a class=\"AknButton AknButton--grey AknButton--withIcon btn-download AknButtonList-item\" href=\"<%- url %>\">\n    <i class=\"AknButton-icon icon-<%- btnIcon %>\"></i>\n    <%- btnLabel %>\n</a>\n"

/***/ }),
/* 248 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/form/edit-form.html ***!
  \************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"entity-edit-form edit-form\">\n    <div data-drop-zone=\"sequential\"></div>\n    <header class=\"AknTitleContainer\">\n        <div class=\"AknTitleContainer-backContainer\" data-drop-zone=\"back\"></div>\n        <div class=\"AknTitleContainer-contentContainer\">\n            <div class=\"AknTitleContainer-mainLine\">\n                <div class=\"AknTitleContainer-titleContainer\" data-drop-zone=\"title\">\n                    <div class=\"AknTitleContainer-titleButtons AknButtonList\" data-drop-zone=\"title-buttons\"></div>\n                </div>\n                <div class=\"AknTitleContainer-rightButtons\" data-drop-zone=\"buttons\"></div>\n            </div>\n            <div class=\"AknTitleContainer-metaLine\">\n                <div class=\"AknTitleContainer-meta\" data-drop-zone=\"meta\"></div>\n                <div class=\"AknTitleContainer-state\" data-drop-zone=\"state\"></div>\n            </div>\n        </div>\n    </header>\n    <div data-drop-zone=\"content\" class=\"content\">\n    </div>\n</div>\n"

/***/ }),
/* 249 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/form/form-tabs.html ***!
  \************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<header class=\"AknHorizontalNavtab\">\n    <ul class=\"AknHorizontalNavtab-list nav nav-tabs form-tabs\">\n        <% _.each(tabs, function (tab) { %>\n            <li class=\"AknHorizontalNavtab-item<% if (currentTab === tab.code) { %> active<% } %>\" data-tab=\"<%- tab.code %>\">\n                <a class=\"AknHorizontalNavtab-link <% if (currentTab === tab.code) { %> AknHorizontalNavtab-link--active<% } %>\" href=\"javascript:void(0);\"><%- tab.label %></a>\n            </li>\n        <% }); %>\n    </ul>\n    <span data-drop-zone=\"side-buttons\"></span>\n</header>\n<div class=\"AknTabContainer-contentThreeColumns form-container form-horizontal <%- fullPanel ? 'AknTabContainer-contentThreeColumns--fullPanel full-panel' : '' %>\">\n    <div data-drop-zone=\"container\" class=\"AknTabContainer-notPanels tab-container tab-content\"></div>\n    <div data-drop-zone=\"panels\" class=\"AknTabContainer-panels AknTabContainer-panels--closed panels\"></div>\n</div>\n"

/***/ }),
/* 250 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/form/grid.html ***!
  \*******************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"grid-drop\" data-type=\"datagrid\"></div>\n<input type=\"hidden\" id=\"added_objects\"/>\n<input type=\"hidden\" id=\"removed_objects\"/>\n"

/***/ }),
/* 251 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/form/group-selector.html ***!
  \*****************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<% _.each(elements, function (element) { %>\n    <li class=\"AknVerticalNavtab-item <%- current === element.code ? 'active' : '' %>\" data-element=\"<%- element.code %>\">\n        <a class=\"AknVerticalNavtab-link <%- current === element.code ? 'AknVerticalNavtab-link--active' : '' %>\">\n            <span class=\"group-label\"><%- element.label %></span>\n            <span class=\"badge-elements-container\">\n                <% _.each(badges[element.code], function(badge, type) { %>\n                    <span class=\"AknBadge AknBadge--<%- type %> <%- type %>-badge label\"><%- badge %></span>\n                <% }) %>\n            </span>\n        </a>\n    </li>\n<% }); %>\n"

/***/ }),
/* 252 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/form/index/confirm-button.html ***!
  \***********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<a class=\"AknButton AknButton--withIcon <%- buttonClass %>\" title=\"<%- buttonLabel %>\" data-title=\" <%- title %>\"\n   data-dialog=\"confirm\" data-method=\"POST\"\n   data-message=\"<%- message %>\" data-url=\"<%- url %>\" data-redirect-url=\"<%- redirectUrl %>\"\n   data-error-message=\"<%- errorMessage %>\" data-success-message=\"<%- successMessage %>\">\n    <i class=\"AknButton-icon icon-<%- iconName %>\"></i>\n    <%- buttonLabel %>\n</a>\n"

/***/ }),
/* 253 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/form/index/create-button.html ***!
  \**********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<a id=\"create-button-extension\" class=\"AknButton AknButton--apply AknButton--withIcon AknButtonList-item\" data-form-url=\"<%- url %>\">\n    <i class=\"AknButton-icon icon-<%- iconName %>\"></i>\n    <%- title %>\n</a>\n"

/***/ }),
/* 254 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/form/index/index.html ***!
  \**************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<header class=\"AknTitleContainer navigation\">\n    <div class=\"AknTitleContainer-backContainer\" data-drop-zone=\"back\">\n    </div>\n    <div class=\"AknTitleContainer-contentContainer\">\n        <div class=\"AknTitleContainer-mainLine\">\n            <div class=\"AknTitleContainer-titleContainer\" data-drop-zone=\"title\">\n                <h2 class=\"AknTitleContainer-title\">\n                    <%- title %>\n                </h2>\n            </div>\n            <div class=\"AknTitleContainer-rightButtons\" data-drop-zone=\"buttons\">\n            </div>\n        </div>\n    </div>\n</header>\n<div data-drop-zone=\"content\">\n</div>\n"

/***/ }),
/* 255 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/form/meta/created.html ***!
  \***************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<span title=\"<%- label %>: <%- loggedAt %> <%- labelBy %> <%- author %>\">\n    <%- label %>: <%- loggedAt %> <%- labelBy %> <%- author %>\n</span>\n"

/***/ }),
/* 256 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/form/meta/status.html ***!
  \**************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<span title=\"<%- label %>: <%- value %>\" id=\"status\">\n    <%- label %>: <%- value %>\n</span>\n"

/***/ }),
/* 257 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/form/meta/updated.html ***!
  \***************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<span title=\"<%- label %>: <%- loggedAt %> <%- labelBy %> <%- author %>\">\n    <%- label %>: <%- loggedAt %> <%- labelBy %> <%- author %>\n</span>\n"

/***/ }),
/* 258 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/form/properties/general.html ***!
  \*********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"tabsection-title\">\n    <%- sectionTitle %>\n</div>\n<div class=\"tabsection-content\">\n    <div class=\"AknFormContainer AknFormContainer--withPadding\">\n        <div class=\"AknFieldContainer\">\n            <div class=\"AknFieldContainer-header\">\n                <label class=\"control-label required\" for=\"<%- inputField %>\">\n                    <%- codeLabel %> <em><%- formRequired %></em>\n                </label>\n            </div>\n            <div class=\"AknFieldContainer-inputContainer\">\n                <input id=\"<%- inputField %>\" class=\"AknTextField\" type=\"text\" readonly disabled required value=\"<%- model.code %>\">\n            </div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 259 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/form/properties/input.html ***!
  \*******************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"AknFieldContainer\">\n    <div class=\"AknFieldContainer-header\">\n        <label class=\"AknFieldContainer-label control-label required\" for=\"<%- fieldName%>\">\n            <%- label %> <% if (isRequired) { %><em><%- requiredLabel %></em><% } %>\n        </label>\n    </div>\n    <div class=\"AknFieldContainer-inputContainer\">\n        <input\n                id=\"<%- fieldName%>\"\n                class=\"AknTextField <%- className %>\"\n                type=\"text\"\n                value=\"<%- value %>\"\n                <%- isReadOnly ? 'readonly disabled' : '' %>\n                <%- isRequired ? 'required' : '' %>\n        >\n    </div>\n    <div class=\"AknFieldContainer-footer\">\n        <div class=\"AknFieldContainer-validationErrors validation-errors\">\n            <% _.each(errors, function (error) { %>\n            <div class=\"AknFieldContainer-validationError\">\n                <i class=\"icon-warning-sign\"></i><%- error %>\n            </div>\n            <% }); %>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 260 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/form/redirect.html ***!
  \***********************************************************************************/
/***/ (function(module, exports) {

module.exports = "<button class=\"AknButton <%- buttonClass %> AknButton--withIcon AknButtonList-item\">\n    <i class=\"AknButton-icon icon-<%- iconName %>\"></i>\n    <%- label %>\n</button>\n"

/***/ }),
/* 261 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/form/save-buttons.html ***!
  \***************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<% if ((primaryButton) && !(secondaryButtons && secondaryButtons.length)) { %>\n    <button class=\"AknButton AknButton--apply AknButton--withIcon <%- primaryButton.className || '' %>\">\n        <i class=\"AknButton-icon icon-ok\"></i>\n        <%- primaryButton.label %>\n    </button>\n<% } else { %>\n    <div class=\"AknSeveralActionsButton AknSeveralActionsButton--apply AknDropdown\">\n        <button class=\"AknSeveralActionsButton-mainAction <%- primaryButton.className || '' %>\">\n            <%- primaryButton.label %>\n        </button>\n        <button class=\"AknSeveralActionsButton-caretContainer\" data-toggle=\"dropdown\">\n            <span class=\"AknCaret AknCaret--inverse\"></span>\n        </button>\n        <ul class=\"AknSeveralActionsButton-menu AknDropdown-menu AknDropdown-menu--right\">\n            <% _.each(secondaryButtons, function (btn) { %>\n                <li>\n                    <button type=\"button\" class=\"AknDropdown-menuLink <%- btn.className || '' %>\">\n                        <%- btn.label %>\n                    </button>\n                </li>\n            <% }) %>\n        </ul>\n    </div>\n<% } %>\n"

/***/ }),
/* 262 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/form/state.html ***!
  \********************************************************************************/
/***/ (function(module, exports) {

module.exports = "<span class=\"AknBadge AknBadge--warning\"><i class=\"icon icon-circle\"></i><%- message %></span>\n"

/***/ }),
/* 263 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/form/tab/attributes.html ***!
  \*****************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div data-drop-zone=\"sidebar\" class=\"sidebar\"></div>\n<div class=\"AknTabContainer-content tab-content\">\n    <header data-drop-zone=\"header\" class=\"AknTabHeader AknAttributeActions tab-header attribute-actions\">\n        <div data-drop-zone=\"edit-actions\" class=\"AknAttributeActions-editActions attribute-edit-actions\">\n            <div data-drop-zone=\"context-selectors\" class=\"AknButtonList AknAttributeActions-contextSelectors context-selectors\"></div>\n            <div data-drop-zone=\"other-actions\" class=\"AknAttributeActions-otherActions AknButtonList AknButtonList--right other-actions\"></div>\n        </div>\n    </header>\n    <div class=\"tab-pane active object-values\"></div>\n</div>\n"

/***/ }),
/* 264 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/form/tab/attributes/attribute-group-selector.html ***!
  \******************************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<li class=\"AknVerticalNavtab-item AknVerticalNavtab-header header\"></li>\n<% _.each(elements, function (element) { %>\n    <li class=\"AknVerticalNavtab-item <%- current === element.code ? 'active' : '' %>\" data-element=\"<%- element.code %>\">\n        <a class=\"AknVerticalNavtab-link <%- current === element.code ? 'AknVerticalNavtab-link--active' : '' %>\">\n            <span class=\"group-label\"><%- i18n.getLabel(element.labels, locale, element.code) %></span>\n            <span class=\"badge-elements-container\">\n                <span\n                    class=\"AknBadge AknBadge--round AknBadge--highlight <%- !_.contains(toFillAttributeGroups, element.code) ? 'AknBadge--hidden' : '' %>\"\n                ></span>\n                <% _.each(badges[element.code], function(badge, type) { %>\n                    <span class=\"AknBadge AknBadge--<%- type %> <%- type %>-badge label\"><%- badge %></span>\n                <% }) %>\n            </span>\n        </a>\n    </li>\n<% }); %>\n"

/***/ }),
/* 265 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/form/tab/attributes/copy-field.html ***!
  \****************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"AknComparableFields-copyContainer copy-container\">\n    <input type=\"checkbox\" class=\"AknComparableFields-checkbox copy-field-selector\" <%- selected ? 'checked' : '' %>></input>\n    <div class=\"<%- type %> AknFieldContainer AknComparableFields-item\">\n        <div class=\"AknFieldContainer-header\">\n            <label class=\"AknFieldContainer-label\"><%- label %></label>\n            <span class=\"AknFieldContainer-fieldInfo field-info\">\n                <% if (attribute.localizable || attribute.scopable) { %>\n                    <span class=\"field-context\">\n                        <% if (attribute.scopable) { %> <span><%- context.scopeLabel %></span> <% } %>\n                        <% if (attribute.localizable) { %> <span><%= i18n.getFlag(context.locale) %></span> <% } %>\n                    </span>\n                <% } %>\n            </span>\n        </div>\n        <div class=\"AknFieldContainer-inputContainer field-input\">\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 266 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/form/tab/attributes/copy.html ***!
  \**********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<% if (!copying) { %>\n    <div class=\"AknButton AknButton--grey AknButton--small start-copying\"><%- _.__('pim_enrich.entity.product.btn.compare_translate') %></div>\n<% } else { %>\n    <div data-drop-zone=\"context-selectors\" class=\"AknButtonList AknAttributeActions-contextSelectors context-selectors\"></div>\n    <div data-drop-zone=\"other-actions\" class=\"AknAttributeActions-otherActions AknButtonList AknButtonList--right other-actions\">\n        <div data-drop-zone=\"copy-actions\" class=\"AknButtonList AknButtonList--right AknAttributeActions-copyActions copy-actions\">\n            <div class=\"AknButtonList-item AknDropdown AknDropdownButton AknDropdownButton--small selection-dropdown\">\n                <a class=\"AknDropdownButton-button\" data-toggle=\"dropdown\" href=\"#\">\n                    <%- _.__('pim_enrich.entity.product.copy.select') %>\n                    <div class=\"AknDropdownButton-caretContainer\">\n                        <span class=\"AknCaret\"></span>\n                    </div>\n                </a>\n                <ul class=\"AknDropdown-menu\">\n                    <li>\n                        <a class=\"AknDropdown-menuLink select-all\"><%- _.__('pim_enrich.entity.product.copy.all') %></a>\n                        <a class=\"AknDropdown-menuLink select-all-visible\"><%- _.__('pim_enrich.entity.product.copy.all_visible') %></a>\n                        <a class=\"AknDropdown-menuLink select-none\"><%- _.__('pim_enrich.entity.product.copy.none') %></a>\n                    </li>\n                </ul>\n            </div>\n            <div class=\"AknButtonList-item AknButton AknButton--small AknButton--apply copy\"><%- _.__('pim_enrich.entity.product.copy.copy') %></div>\n            <div class=\"AknButtonList-item AknIconButton AknIconButton--grey stop-copying\"><i class=\"icon-remove\"></i></div>\n        </div>\n    </div>\n<% } %>\n"

/***/ }),
/* 267 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/form/tab/properties.html ***!
  \*****************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"tabsections\" data-drop-zone=\"accordion\"></div>\n"

/***/ }),
/* 268 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/form/tab/section.html ***!
  \**************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"tabsection-title\">\n    <%- sectionTitle %>\n</div>\n<div class=\"tabsection-content\">\n    <div class=\"AknFormContainer AknFormContainer--withPadding\" data-drop-zone=\"<%- dropZone %>\">\n\n    </div>\n</div>\n"

/***/ }),
/* 269 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/grid/view-selector-create-view-label-input.html ***!
  \****************************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<input name=\"new-view-label\" type=\"text\" class=\"AknTextField\" placeholder=\"<%- placeholder %>\">\n"

/***/ }),
/* 270 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/grid/view-selector-create-view.html ***!
  \****************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<a class=\"AknIconButton AknIconButton--grey muted create\">\n    <i class=\"icon-plus\" data-toggle=\"tooltip\" data-placement=\"top\" data-original-title=\"<%- label %>\"></i>\n</a>\n"

/***/ }),
/* 271 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/grid/view-selector-current.html ***!
  \************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<span class=\"select2-selection-label-view\">\n    <span class=\"before\" data-drop-zone=\"before\"></span>\n    <span class=\"current\"><%- view.text %> <%- dirtyColumns || dirtyFilters ? '*' : '' %></span>\n    <span class=\"after\" data-drop-zone=\"after\"></span>\n</span>\n"

/***/ }),
/* 272 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/grid/view-selector-line.html ***!
  \*********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"select2-result-label-view\">\n    <span class=\"view-label <%- isCurrent ? 'view-label-current' : '' %>\"><%- view.text %></span>\n</div>\n"

/***/ }),
/* 273 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/grid/view-selector-remove-view.html ***!
  \****************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<a class=\"AknIconButton AknIconButton--grey muted remove\">\n    <i class=\"icon-remove\" data-toggle=\"tooltip\" data-placement=\"top\" data-original-title=\"<%- label %>\"></i>\n</a>\n"

/***/ }),
/* 274 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/grid/view-selector-save-view.html ***!
  \**************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<a class=\"AknIconButton AknIconButton--grey muted save <%- dirty ? '' : 'AknIconButton--hide' %>\">\n    <i class=\"icon-ok\" data-toggle=\"tooltip\" data-placement=\"top\" data-original-title=\"<%- label %>\"></i>\n</a>\n"

/***/ }),
/* 275 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/grid/view-selector.html ***!
  \****************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"AknButtonList grid-view-selector\">\n    <div class=\"AknDropdown AknDropdownButton AknDropdownButton--grey AknDropdownButton--stickedRight <%- displayViewSwitcher ? '' : 'AknDropdownButton--hide' %>\">\n        <a class=\"AknDropdownButton-button view-selector-type-switcher\" data-toggle=\"dropdown\" href=\"#\">\n            <span class=\"current-view-type\"><%- __('pim_datagrid.view_selector.' + currentViewType) %></span>\n            <div class=\"AknDropdownButton-caretContainer\">\n                <span class=\"AknCaret\"></span>\n            </div>\n        </a>\n        <ul class=\"AknDropdown-menu\">\n            <% viewTypes.forEach(function (type) { %>\n            <li>\n                <a data-value=\"<%- type %>\" class=\"AknDropdown-menuLink view-type-item\" title=\"<%- __('pim_datagrid.view_selector.' + type) %>\">\n                    <%- __('pim_datagrid.view_selector.' + type) %>\n                </a>\n            </li>\n            <% });  %>\n        </ul>\n    </div>\n\n    <input type=\"hidden\" class=\"AknButtonList-item select-field <%- displayViewSwitcher ? 'stickedLeft' : '' %>\" value=\"0\" />\n    <div class=\"AknButtonList-item buttons\" data-drop-zone=\"buttons\">\n    </div>\n</div>\n"

/***/ }),
/* 276 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/group/meta/product-count.html ***!
  \**********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<span title=\"<%- label %>: <%- productCount %>\">\n    <%- label %>: <%- productCount %>\n</span>\n"

/***/ }),
/* 277 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/group/tab/properties/general.html ***!
  \**************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"tabsection-title\">\n    <%- sectionTitle %>\n</div>\n<div class=\"tabsection-content\">\n    <div class=\"AknFormContainer AknFormContainer--withPadding\">\n        <div class=\"AknFieldContainer\">\n            <div class=\"AknFieldContainer-header\">\n                <label class=\"AknFieldContainer-label control-label required\" for=\"pim_enrich_group_form_code\">\n                    <%- codeLabel %> <em><%- __('pim_enrich.form.required') %></em>\n                </label>\n            </div>\n            <div class=\"AknFieldContainer-inputContainer\">\n                <input id=\"pim_enrich_group_form_code\" class=\"AknTextField\" type=\"text\" readonly=\"readonly\" disabled=\"disabled\" required=\"required\" value=\"<%- model.code %>\">\n            </div>\n        </div>\n\n        <div class=\"AknFieldContainer\">\n            <div class=\"AknFieldContainer-header\">\n                <label class=\"AknFieldContainer-label control-label required\">\n                    <%- typeLabel %> <em><%- __('pim_enrich.form.required') %></em>\n                </label>\n            </div>\n            <div class=\"AknFieldContainer-inputContainer\">\n                <select id=\"pim_enrich_group_form_type\" readonly=\"readonly\" disabled=\"disabled\" class=\"select2 input-large\">\n                    <option>[<%- model.type %>]</option>\n                </select>\n            </div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 278 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/job-execution/auto-refresh.html ***!
  \************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"AknGridToolbar\">\n    <div class=\"AknGridToolbar-left\">\n        <img src=\"/bundles/pimimportexport/images/loading.gif\" alt=\"<%- __('pim_enrich.form.job_execution.loading') %>\"\n             class=\"AknButtonList-item <%- loadingShown ? '': 'AknButtonList-item--transparent' %>\"/>\n        <a class=\"AknButtonList-item AknButton AknButton--withIcon <%- refreshBtnShown ? '': 'AknButtonList-item--transparent' %>\"\n           title=\"Refresh\">\n            <i class=\"AknButton-icon icon-refresh\"></i>\n            <%- __('pim_enrich.form.job_execution.refreshBtn.title')%>\n        </a>\n    </div>\n</div>\n"

/***/ }),
/* 279 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/job-execution/download-archives-buttons.html ***!
  \*************************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<% _.each(archives, function (archive, archiver) { %>\n    <% if (_.size(archive.files) === 1) { %>\n        <% _.each(archive.files, function (file, key) { %>\n        <a class=\"AknButton AknButton--grey AknButton--withIcon AknButtonList-item\" title=\"<%- __(archive.label) %>\"\n           href=\"<%- generateRoute({id: executionId, archiver: archiver, key: key }) %>\">\n            <i class=\"AknButton-icon icon-download-alt\"></i> <%- __(archive.label) %>\n        </a>\n        <% }); %>\n    <% } else { %>\n        <div class=\"AknDropdownButton AknDropdownButton--grey AknDropdown AknButtonList-item\">\n            <a class=\"AknDropdownButton-button\" data-toggle=\"dropdown\" href=\"#\">\n                <%- __(archive.label) %>\n                <span class=\"AknDropdownButton-caretContainer\">\n                    <span class=\"AknCaret AknCaret--big AknCaret--inverse caret\"></span>\n                </span>\n            </a>\n            <ul class=\"AknDropdown-menu dropdown-menu\">\n                <% _.each(archive.files, function (file, key) { %>\n                <li>\n                    <a class=\"AknDropdown-menuLink\"\n                       href=\"<%- generateRoute({id: executionId, archiver: archiver, key: key }) %>\">\n                        <%- key %>\n                    </a>\n                </li>\n                <% }); %>\n            </ul>\n        </div>\n    <% } %>\n<% }); %>\n"

/***/ }),
/* 280 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/job-execution/summary-table.html ***!
  \*************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"AknGridContainer grid-container\">\n    <table class=\"AknGrid AknGrid--unclickable grid job-execution\" id=\"job-execution\">\n        <thead>\n        <th class=\"AknGrid-headerCell\"><%- transAndUpperCase('pim_enrich.form.job_execution.summary.header.step')%></th>\n        <th class=\"AknGrid-headerCell\"><%- transAndUpperCase('pim_enrich.form.job_execution.summary.header.status')%></th>\n        <th class=\"AknGrid-headerCell\"><%- transAndUpperCase('pim_enrich.form.job_execution.summary.header.summary')%></th>\n        <th class=\"AknGrid-headerCell\"><%- transAndUpperCase('pim_enrich.form.job_execution.summary.header.start')%></th>\n        <th class=\"AknGrid-headerCell\"><%- transAndUpperCase('pim_enrich.form.job_execution.summary.header.end')%></th>\n        </thead>\n        <tbody>\n        <% if (!stepExecutions) { %>\n        <tr class=\"AknGrid-bodyRow\">\n            <td class=\"AknGrid-bodyCell AknGrid-bodyCell--full\" colspan=\"5\">\n                <%- __('pim_enrich.form.job_execution.summary.fetching')%>\n            </td>\n        </tr>\n        <% } else { %>\n            <% _.each(stepExecutions, function (stepExecution, stepIndex) { %>\n                <tr class=\"AknGrid-bodyRow\">\n                    <td class=\"AknGrid-bodyCell\"><%- __(stepExecution.label) %></td>\n                    <td class=\"AknGrid-bodyCell\"><%- stepExecution.status %></td>\n                    <td class=\"AknGrid-bodyCell\">\n                        <% if (_.size(stepExecution.summary) > 0) { %>\n                        <table class=\"AknGrid AknGrid--condensed\">\n                            <% _.each(stepExecution.summary, function (value, key) { %>\n                            <tr class=\"AknGrid-bodyRow\">\n                                <td class=\"AknGrid-bodyCell\"><%- key %></td>\n                                <td class=\"AknGrid-bodyCell\"><%- value %></td>\n                            </tr>\n                            <% }); %>\n                        </table>\n                        <% } %>\n                    </td>\n                    <td class=\"AknGrid-bodyCell\"><%- stepExecution.startedAt %></td>\n                    <td class=\"AknGrid-bodyCell\"><%- stepExecution.endedAt %></td>\n                </tr>\n\n                <!-- Step execution warnings -->\n                <% _.each(stepExecution.warnings, function (warning, warningIndex) { %>\n                <tr class=\"AknGrid-bodyRow warning\">\n                    <td class=\"AknGrid-bodyCell AknGrid-bodyCell--full\" colspan=\"5\">\n                        <div class=\"AknMessageBox AknMessageBox--warning\">\n                            <span class=\"AknMessageBox-title title\"><%- __('pim_enrich.form.job_execution.summary.warning')%></span>\n                            <ul class=\"AknMessageBox-list\">\n                                <% _.each(warning.reason.split(\"\\n\"), function(warningItem) { %>\n                                    <% if (warningItem) { %>\n                                        <li><%- warningItem %></li>\n                                    <% } %>\n                                <% }) %>\n                            </ul>\n                            <a class=\"data\" data-step-index=\"<%- stepIndex %>\" data-warning-index=\"<%- warningIndex %>\">\n                                <%- warning.expanded ? __('job_execution.summary.hide_item') : __('job_execution.summary.display_item')%>\n                            </a>\n                            <table class=\"AknGrid AknGrid--condensed AknGrid--unclickable <%- warning.expanded ? '' : 'hide'%>\">\n                                <% _.each(warning.item, function (value, key) { %>\n                                <tr class=\"AknGrid-bodyRow\">\n                                    <td class=\"AknGrid-bodyCell\"><%- key %></td>\n                                    <td class=\"AknGrid-bodyCell\">\n                                        <% if (typeof value === 'object') { %>\n                                            <%- JSON.stringify(value) %>\n                                        <% } else { %>\n                                            <%- value %>\n                                        <% } %>\n                                    </td>\n                                </tr>\n                                <% }); %>\n                            </table>\n                        </div>\n                    </td>\n                </tr>\n                <% }); %>\n\n                <!-- Step execution failures -->\n                <% _.each(stepExecution.failures, function (failure) { %>\n                <tr class=\"AknGrid-bodyRow error\">\n                    <td class=\"AknGrid-bodyCell AknGrid-bodyCell--full\" colspan=\"5\">\n                        <div class=\"AknMessageBox AknMessageBox--error\">\n                            <span class=\"AknMessageBox-title title\"><%- stepExecution.label.toUpperCase() %></span>&nbsp;\n                            <%- failure %>\n                        </div>\n                    </td>\n                </tr>\n                <% }); %>\n            <% }); %>\n\n            <!-- Job execution failures -->\n            <% _.each(failures, function (failure) { %>\n            <tr class=\"AknGrid-bodyRow error\">\n                <td class=\"AknGrid-bodyCell AknGrid-bodyCell--full\" colspan=\"5\">\n                    <div class=\"AknMessageBox AknMessageBox--error\">\n                        <span class=\"AknMessageBox-title title\"><%- jobExecution.label.toUpperCase() %></span>&nbsp;\n                        <%- failure %>\n                    </div>\n                </td>\n            </tr>\n            <% }); %>\n\n        <% } %>\n        </tbody>\n    </table>\n</div>\n"

/***/ }),
/* 281 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/create-error.html ***!
  \******************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"control-group\" data-code=\"identifier\">\n    <div class=\"validation-errors\">\n        <span>\n            <i class=\"icon-warning-sign\"></i>\n            <span class=\"error-message\"><%- message %></span>\n        </span>\n    </div>\n</div>\n"

/***/ }),
/* 282 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/create-popin.html ***!
  \******************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"AknFieldContainer\" data-code=\"identifier\">\n    <div class=\"AknFieldContainer-header\">\n        <label title=\"<%- labels.identifier %>\" class=\"AknFieldContainer-label control-label required truncate\" for=\"new-product-identifier\">\n            <%- labels.identifier %> <em><%- __('pim_enrich.form.required') %></em>\n        </label>\n    </div>\n    <div class=\"AknFieldContainer-inputContainer\">\n        <input type=\"text\" id=\"new-product-identifier\" class=\"AknTextField\"/>\n    </div>\n    <div class=\"AknFieldContainer-footer AknFieldContainer-validationErrors validation-errors\">\n        <% _.each(_.where(errors, { attribute: identifier.code }), function (error) { %>\n            <span class=\"AknFieldContainer-validationError\">\n                <i class=\"icon-warning-sign\"></i>\n                <span class=\"error-message\"><%- error.message %></span>\n            </span>\n        <% }) %>\n    </div>\n</div>\n<div class=\"AknFieldContainer\" data-code=\"family\">\n    <div class=\"AknFieldContainer-inputContainer\">\n        <input type=\"hidden\" class=\"select-field\" data-placeholder=\"<%- labels.family %>\" />\n    </div>\n</div>\n"

/***/ }),
/* 283 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/download-pdf.html ***!
  \******************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<i class=\"AknButton-icon icon-download-alt\"></i>\n<%- _.__('pim_enrich.entity.product.btn.download_pdf') %>\n"

/***/ }),
/* 284 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/field/boolean.html ***!
  \*******************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"switch switch-small\" data-on-label=\"<%- _.__('switch_on') %>\" data-off-label=\"<%- _.__('switch_off') %>\">\n    <input id=\"<%- fieldId %>\" type=\"checkbox\" data-locale=\"<%- value.locale %>\" data-scope=\"<%- value.scope %>\" <%- value.data ? 'checked' : '' %> <%- editMode === 'view' ? 'disabled' : '' %>>\n</div>\n"

/***/ }),
/* 285 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/field/date.html ***!
  \****************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"datetimepicker\">\n    <input id=\"<%- fieldId %>\" class=\"AknTextField datepicker-field add-on\" type=\"text\" data-locale=\"<%- value.locale %>\" data-scope=\"<%- value.scope %>\" value=\"<%- value.data %>\" <%- editMode === 'view' ? 'disabled' : '' %>/>\n</div>\n"

/***/ }),
/* 286 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/field/field.html ***!
  \*****************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"<%- type %> AknComparableFields-item AknFieldContainer original-field <%- editMode %>\">\n    <div class=\"AknFieldContainer-header\">\n        <label class=\"AknFieldContainer-label\" for=\"<%- fieldId %>\">\n            <span class=\"badge-elements-container\"></span>\n            <%- label %>\n            <span class=\"label-elements-container\"></span>\n        </label>\n        <span class=\"AknFieldContainer-fieldInfo field-info\">\n            <% if (attribute.localizable || attribute.scopable) { %>\n                <span class=\"field-context\">\n                    <% if (attribute.scopable) { %> <span><%- context.scopeLabel %></span> <% } %>\n                    <% if (attribute.localizable) { %> <span><%= i18n.getFlag(context.locale) %></span> <% } %>\n                </span>\n            <% } %>\n        </span>\n        <% if (context.optional && context.removable && 'edit' === editMode) { %>\n            <i class=\"AknIconButton AknIconButton--small icon-remove remove-attribute\" data-attribute=\"<%- attribute.code %>\" data-toggle=\"tooltip\" title=\"<%- _.__('pim_enrich.entity.product.optional_attribute.remove') %>\"></i>\n        <% } %>\n    </div>\n    <div class=\"AknFieldContainer-inputContainer field-input\">\n    </div>\n    <footer>\n        <div class=\"AknFieldContainer-footer footer-elements-container\">\n\n        </div>\n    </footer>\n</div>\n<div class=\"AknComparableFields-item AknComparableFields-item--comparisonContainer AknFieldContainer comparison-elements-container\"></div>\n"

/***/ }),
/* 287 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/field/media.html ***!
  \*****************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"AknMediaField <%- value.data && value.data.filePath ? 'has-file' : '' %>\" >\n    <% if (!value.data || value.data.filePath === null) { %>\n        <input class=\"AknMediaField-fileUploaderInput\" id=\"<%- fieldId %>\" type=\"file\" data-locale=\"<%- value.locale %>\" data-scope=\"<%- value.scope %>\" <%- editMode === 'view' ? 'disabled' : '' %>/>\n        <div class=\"AknMediaField-emptyContainer\">\n            <img src=\"/bundles/pimui/images/upload.png\" alt=\"upload icon\" class=\"AknMediaField-uploadIcon\"/>\n            <span><%- _.__('pim_enrich.entity.product.media.upload')%></span>\n        </div>\n    <% } else { %>\n        <div class=\"AknMediaField-preview preview\">\n            <% mediaThumbnailUrl = mediaUrlGenerator.getMediaShowUrl(value.data.filePath, 'thumbnail_small') %>\n            <% mediaPreviewUrl   = mediaUrlGenerator.getMediaShowUrl(value.data.filePath, 'preview') %>\n            <% mediaDownloadUrl  = mediaUrlGenerator.getMediaDownloadUrl(value.data.filePath) %>\n            <% if ('pim_catalog_image' === attribute.type && null != mediaThumbnailUrl) { %>\n                <div class=\"AknMediaField-thumb file\"><img src=\"<%- mediaThumbnailUrl %>\" class=\"AknMediaField-image\"/></div>\n            <% } else { %>\n                <div class=\"AknMediaField-thumb file\"><i class=\"AknMediaField-icon icon icon-file\"></i></div>\n            <% } %>\n            <div class=\"AknMediaField-info info\">\n                <div class=\"filename\" title=\"<%- value.data.originalFilename %>\"><%- value.data.originalFilename %></div>\n                <div class=\"AknButtonList AknButtonList--centered actions\">\n                    <% if ('pim_catalog_image' === attribute.type && null != mediaPreviewUrl) { %>\n                        <span class=\"AknButtonList-item AknIconButton AknIconButton--grey open-media\"><i class=\"icon icon-eye-open\"></i></span>\n                    <% } %>\n                    <a href=\"<%- mediaDownloadUrl %>\" class=\"AknButtonList-item AknIconButton AknIconButton--grey download-file\" download><i class=\"icon icon-cloud-download\"></i></a>\n                    <span class=\"AknButtonList-item AknIconButton AknIconButton--grey clear-field <%- editMode === 'view' ? 'AknIconButton--hide' : '' %>\"><i class=\"icon icon-trash\"></i></span>\n                </div>\n            </div>\n        </div>\n    <% } %>\n    <div class=\"AknMediaField-progress AknProgress AknProgress--micro progress\">\n        <div class=\"AknProgress-bar bar\"></div>\n    </div>\n</div>\n"

/***/ }),
/* 288 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/field/metric.html ***!
  \******************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"AknMetricField metric-container\">\n    <input class=\"AknTextField AknTextField--noRightRadius data\" id=\"<%- fieldId %>\" type=\"text\" data-locale=\"<%- value.locale %>\" data-scope=\"<%- value.scope %>\" value=\"<%- value.data.amount %>\" <%- editMode === 'view' ? 'disabled' : '' %>/>\n    <select class=\"AknMetricField-unit unit select-field\" data-locale=\"<%- value.locale %>\" data-scope=\"<%- value.scope %>\" <%- editMode === 'view' ? 'disabled' : '' %>>\n        <% _.each(_.keys(measures[attribute.metric_family].units), function(unit) { %>\n            <option value=\"<%- unit %>\"<% if (value.data.unit === unit) { %> selected<% } %>><%- _.__(unit) %></option>\n        <% }); %>\n    </select>\n</div>\n"

/***/ }),
/* 289 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/field/multi-select.html ***!
  \************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<input id=\"<%- fieldId %>\" type=\"hidden\" class=\"select-field\" value=\"<%- value.data.join(',') %>\" data-locale=\"<%- value.locale %>\" data-scope=\"<%- value.scope %>\" <%- editMode === 'view' ? 'disabled' : '' %>/>\n<% if (userCanAddOption) { %>\n    <div class=\"AknFieldContainer-iconsContainer\">\n        <span class=\"AknIconButton AknIconButton--dark add-attribute-option\" data-toggle=\"tooltip\" data-placement=\"top\" data-original-title=\"<%- _.__('label.attribute_option.add_option') %>\">\n            <i class=\"icon-plus\"></i>\n        </span>\n    </div>\n<% } %>\n"

/***/ }),
/* 290 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/field/number.html ***!
  \******************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<input id=\"<%- fieldId %>\" class=\"AknTextField\" type=\"text\" data-locale=\"<%- value.locale %>\" data-scope=\"<%- value.scope %>\" value=\"<%- value.data %>\" <%- editMode === 'view' ? 'disabled' : '' %>/>\n"

/***/ }),
/* 291 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/field/price-collection.html ***!
  \****************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"AknPriceList\">\n    <% if (!value.data) { %>\n        <% _.each(currencies, function (currency) { %>\n            <div class=\"AknPriceList-item price-input\">\n                <input class=\"AknTextField AknTextField--noRightRadius\" type=\"text\" data-locale=\"<%- value.locale %>\" data-scope=\"<%- value.scope %>\" data-currency=\"<%- currency.code %>\" value=\"\" <%- editMode === 'view' ? 'disabled' : '' %> size=\"1\">\n                <span class=\"AknPriceList-currency\"><%- currency.code %></span>\n            </div>\n        <% }) %>\n    <% } else { %>\n        <% _.each(value.data, function (price) { %>\n            <div class=\"AknPriceList-item price-input\">\n                <input class=\"AknTextField AknTextField--noRightRadius\" type=\"text\" data-locale=\"<%- value.locale %>\" data-scope=\"<%- value.scope %>\" data-currency=\"<%- price.currency %>\" value=\"<%- price.amount %>\" <%- editMode === 'view' ? 'disabled' : '' %> size=\"1\">\n                <span class=\"AknPriceList-currency\"><%- price.currency %></span>\n            </div>\n        <% }) %>\n    <% } %>\n</div>\n"

/***/ }),
/* 292 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/field/simple-select.html ***!
  \*************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<input id=\"<%- fieldId %>\" type=\"hidden\" class=\"select-field\" value=\"<%- value.data %>\" data-min-input-length=\"0\" data-locale=\"<%- value.locale %>\" data-scope=\"<%- value.scope %>\" <%- editMode === 'view' ? 'disabled' : '' %>/>\n<% if (userCanAddOption) { %>\n    <div class=\"AknFieldContainer-iconsContainer\">\n        <span class=\"AknIconButton AknIconButton--dark add-attribute-option\" data-toggle=\"tooltip\" data-placement=\"top\" data-original-title=\"<%- _.__('label.attribute_option.add_option') %>\">\n            <i class=\"icon-plus\"></i>\n        </span>\n    </div>\n<% } %>\n"

/***/ }),
/* 293 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/field/text.html ***!
  \****************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<input id=\"<%- fieldId %>\" class=\"AknTextField <%- context.isRequired ? 'AknTextField--required' : '' %>\" type=\"text\" data-locale=\"<%- value.locale %>\" data-scope=\"<%- value.scope %>\" value=\"<%- value.data %>\" <%- editMode === 'view' ? 'disabled' : '' %>/>\n"

/***/ }),
/* 294 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/form/add-select/attribute/line.html ***!
  \************************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"select2-result-label-attribute\">\n    <input data-code=\"<%- item.id %>\" type=\"checkbox\" <%- checked ? 'checked=\"checked\"' : '' %> />\n    <span class=\"attribute-label\"><%- item.text %></span>\n    <span class=\"group-label\"><%- item.group.text %></span>\n</div>\n"

/***/ }),
/* 295 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/locale-switcher.html ***!
  \*********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<a class=\"AknActionButton\" data-toggle=\"dropdown\" href=\"#\">\n    <%= i18n.getFlag(currentLocale.code, false) %> <%- currentLocale.language %>\n    <span class=\"AknActionButton-caret AknCaret\"></span>\n</a>\n<ul class=\"AknDropdown-menu\">\n    <% _.each(locales, function (locale) { %>\n        <li><a class=\"AknDropdown-menuLink\" data-locale=\"<%- locale.code %>\"><%= i18n.getFlag(locale.code, false) %> <%- locale.language %></a></li>\n    <% }); %>\n</ul>\n"

/***/ }),
/* 296 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/meta/change-family-modal.html ***!
  \******************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<p class=\"AknMessageBox AknMessageBox--centered\">\n    <%- _.__('pim_enrich.form.product.change_family.modal.merge_attributes')%><br />\n    <%- _.__('pim_enrich.form.product.change_family.modal.keep_attributes')%>\n</p>\n<form class=\"AknFieldContainer form-horizontal\">\n    <div class=\"AknFieldContainer-header\">\n        <label class=\"AknFieldContainer-label control-label\"><%- _.__('pim_enrich.form.product.change_family.modal.change_family_to')%>&nbsp;:</label>\n    </div>\n    <div class=\"AknFieldContainer-inputContainer\">\n        <input type=\"hidden\" class=\"input-large family-select2 select-field\"\n               value=\"<%- product.family !== null ? product.family.code : '' %>\"\n               <%- product.family ? ' selected' : '' %>\n               data-placeholder=\"<%- _.__('pim_enrich.form.product.change_family.modal.empty_selection') %>\"\n        />\n    </div>\n</form>\n"

/***/ }),
/* 297 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/meta/family.html ***!
  \*****************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<%- _.__('pim_enrich.entity.product.meta.family.title')%>:\n<span class=\"product-family\"><%- familyLabel %></span>\n"

/***/ }),
/* 298 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/meta/group-modal.html ***!
  \**********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"clearfix\">\n    <div class=\"container-fluid\">\n        <div class=\"grid-container\">\n            <% if (products.length) { %>\n                <table class=\"AknGrid AknGrid--condensed AknGrid--unclickable groups\">\n                    <thead>\n                        <tr>\n                            <th class=\"AknGrid-headerCell\">\n                                <%- identifier.labels[locale] || identifier.code %>\n                            </th>\n                            <th class=\"AknGrid-headerCell\">\n                                <%- _.__('pim_enrich.entity.product.meta.groups.modal.group_label') %>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <% _.each(products, function (product) {  %>\n                            <tr class=\"AknGrid-bodyRow\">\n                                <td class=\"AknGrid-bodyCell\">\n                                    <a href=\"javascript:void(0);\" data-product-id=\"<%- product.meta.id %>\">\n                                        <%- product.values[identifier.code][0].data %>\n                                    </a>\n                                </td>\n                                <td class=\"AknGrid-bodyCell\">\n                                    <%- product.meta.label[locale] %>\n                                </td>\n                            </tr>\n                        <% }); %>\n                        <% if (products.length < productCount) { %>\n                            <tr class=\"AknGrid-bodyRow\">\n                                <td colspan=\"2\" class=\"AknGrid-bodyCell\">\n                                    <%- _.__('pim_enrich.entity.product.meta.groups.modal.more_products', { 'count': productCount - products.length }) %>\n                                </td>\n                            </tr>\n                        <% } %>\n                    </tbody>\n                </table>\n            <% } %>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 299 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/meta/groups.html ***!
  \*****************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<%- label %>:\n<% _.each(groups, function (group, index, list) {  %>\n    <a href=\"javascript:void(0);\" data-group=\"<%- group.code %>\" data-variant=\"<%- group.isVariant ? 1 : 0 %>\">\n        <%- group.label %>\n    </a>\n    <%- list.length > index + 1 ? ',' : '' %>\n<% }); %>\n"

/***/ }),
/* 300 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/panel/comments.html ***!
  \********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"AknCommentPanel comment-threads\">\n    <ol>\n        <li class=\"comment-create\">\n            <form>\n                <textarea class=\"AknTextareaField AknTextareaField--small new-comment-value\" placeholder=\"<%- _.__('comment.placeholder.new') %>\"></textarea>\n                <span class=\"AknButtonList AknButtonList--hide AknButtonList--right comment-buttons\">\n                    <input class=\"AknButtonList-item AknButton AknButton--small AknButton--important cancel-comment\" type=\"reset\" value=\"<%- _.__('btn.cancel') %>\">\n                    <button class=\"AknButtonList-item AknButton AknButton--small AknButton--apply send-comment\"><%- _.__('btn.post') %></button>\n                </span>\n            </form>\n        </li>\n        <% if (comments.length) { %>\n            <% _.each(comments, function(comment) { %>\n                <li>\n                    <ol class=\"AknCommentPanel-thread comment-thread\" data-comment-id=\"<%- comment.id %>\">\n                        <li class=\"AknCommentPanel-item comment-topic\">\n                            <div class=\"AknCommentPanel-header\">\n                                <img class=\"AknCommentPanel-avatar\" width=\"35\" src=\"/bundles/pimui/images/info-user.png\" alt=\"<%- comment.author.username %>\"/>\n                                <span class=\"AknCommentPanel-author author\"><strong><%- comment.author.fullName %></strong></span>\n                                <span class=\"AknCommentPanel-date date\"><%- comment.created %></span>\n                                <% if (comment.author.username === currentUser.username) { %>\n                                    <span class=\"AknCommentPanel-icon AknIconButton AknIconButton--small AknIconButton--grey remove-comment\" title=\"Delete\" data-comment-id=\"<%- comment.id %>\">\n                                        <i class=\"icon-trash\"></i>\n                                    </span>\n                                <% } %>\n                            </div>\n                            <span class=\"AknCommentPanel-message message\"><%- comment.body %></span>\n                        </li>\n                        <% _.each(comment.replies, function(reply) { %>\n                            <li class=\"AknCommentPanel-item comment-reply\">\n                                <div class=\"AknCommentPanel-header\">\n                                    <img class=\"AknCommentPanel-avatar\" src=\"/bundles/pimui/images/info-user.png\" alt=\"<%- reply.author.username %>\">\n                                    <span class=\"AknCommentPanel-author author\"><strong><%- reply.author.fullName %></strong></span>\n                                    <span class=\"AknCommentPanel-date date\"><%- reply.created %></span>\n                                    <% if (reply.author.username === currentUser.username) { %>\n                                        <span class=\"AknCommentPanel-icon AknIconButton AknIconButton--small AknIconButton--grey remove-comment\" title=\"Delete\" data-comment-id=\"<%- reply.id %>\">\n                                            <i class=\"icon-trash\"></i>\n                                        </span>\n                                    <% } %>\n                                </div>\n                                <span class=\"AknCommentPanel-message message\"><%- reply.body %></span>\n                            </li>\n                        <% }); %>\n                        <li class=\"reply-to-comment\">\n                            <textarea class=\"AknTextareaField AknTextareaField--small\" name=\"body\" required=\"required\" placeholder=\"<%- _.__('comment.placeholder.reply') %>\"></textarea>\n                            <span class=\"AknButtonList AknButtonList--hide AknButtonList--right comment-buttons\">\n                               <button class=\"AknButtonList-item AknButton AknButton--important AknButton--small cancel-comment\" type=\"reset\"><%- _.__('btn.cancel') %></button>\n                               <button class=\"AknButtonList-item AknButton AknButton--apply AknButton--small send-comment\"><%- _.__('btn.reply') %></button>\n                            </span>\n                        </li>\n                    </ol>\n                </li>\n            <% }); %>\n        <% } else { %>\n            <li class=\"no-data AknCommentPanel-thread AknMessageBox AknMessageBox--centered\">\n                <p><%- _.__('comment.index.empty') %></p>\n            </li>\n        <% } %>\n    </ol>\n</div>\n"

/***/ }),
/* 301 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/panel/completeness.html ***!
  \************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<% if (!hasFamily) { %>\n    <p>\n        <%- _.__('pim_enrich.form.product.panel.completeness.info.no_family') %>\n    </p>\n<% } else if (_.isEmpty(completenesses)) { %>\n    <p>\n        <%- _.__('pim_enrich.form.product.panel.completeness.info.no_completeness') %>\n    </p>\n<% } else { %>\n    <% _.each(completenesses, function(locale) { %>\n        <% var ratio = (locale['stats']['complete'] / locale['stats']['total']) * 100; %>\n        <div class=\"AknCompletenessBlock completeness-block\" data-closed=\"<%- (100 === ratio || locale['locale'] !== catalogLocale) ? 'true' : 'false' %>\">\n            <header class=\"AknCompletenessBlock-header\">\n                <span class=\"AknCompletenessBlock-headerLocale locale\" data-locale=\"<%- locale['locale'] %>\"><%= i18n.getFlag(locale['locale'], false) %> <%- _.findWhere(locales, {code: locale['locale']}).language %></span>\n                <span class=\"AknCompletenessBlock-headerStats stats\">\n                    <div class=\"AknProgress progress <%- 100 === ratio ? 'AknProgress--apply' : 'AknProgress--warning' %>\">\n                        <div class=\"AknProgress-bar bar\" data-ratio=\"<%- ratio %>\" style=\"width: <%- ratio %>%;\"></div>\n                    </div>\n                    <span class=\"AknCompletenessBlock-progressRatio\"><%- locale['stats']['complete'] %>/<%- locale['stats']['total'] %></span>\n                </span>\n                <span class=\"AknCompletenessBlock-headerButton\"><i class=\"AknCompletenessBlock-arrow icon-angle-down\"></i></span>\n            </header>\n            <div class=\"AknCompletenessBlock-content content\">\n                <% _.each(locale['channels'], function(channelCompleteness) { %>\n                    <% if (channelCompleteness.completeness) { %>\n                        <div class=\"AknCompletenessBlock-channel\">\n                            <span class=\"AknCompletenessBlock-channelTitle channel\" data-channel=\"<%- channelCompleteness.completeness['channel_code'] %>\"><%- channelCompleteness.completeness['channel_labels'][catalogLocale] %></span>\n                            <div class=\"AknCompletenessBlock-progressContainer\">\n                                <div class=\"AknCompletenessBlock-progress AknProgress progress <%- channelCompleteness.completeness.ratio === 100 ? 'AknProgress--apply' : 'AknProgress--warning' %>\">\n                                    <div class=\"AknProgress-bar bar\" data-ratio=\"<%- channelCompleteness.completeness.ratio %>\" style=\"width: <%- channelCompleteness.completeness.ratio %>%;\"></div>\n                                </div>\n                                <span class=\"AknCompletenessBlock-progressRatio literal-progress\"><%- channelCompleteness.completeness.ratio %>%</span>\n                            </div>\n                            <div class=\"AknCompletenessBlock-missing missing\">\n                                <% if (channelCompleteness.completeness.missing !== 0) { %>\n                                    <%- _.__('pim_enrich.form.product.panel.completeness.missing_values') %>:\n                                        <span class=\"missing-attributes\">\n                                            <% _.each(channelCompleteness.missing, function(missing, i) { %>\n                                                <% if (0 !== i) { %> | <% } %>\n                                                <a href=\"javascript:void(0);\" data-attribute=\"<%- missing.code %>\" data-locale=\"<%- locale['locale'] %>\" data-channel=\"<%- channelCompleteness.completeness['channel_code'] %>\"><%- i18n.getLabel(missing.labels, catalogLocale, missing.code) %></a>\n                                            <% }) %>\n                                        </span>\n                                    <% } %>\n                                <% if (0 === channelCompleteness.completeness.missing && channelCompleteness.missing.length > 0) { %>\n                                    <span class=\"AknBadge AknBadget--important\">Completeness error</span>\n                                <% } %>\n                            </div>\n                        </div>\n                    <% }%>\n                <% }); %>\n            </div>\n        </div>\n    <% }); %>\n<% } %>\n"

/***/ }),
/* 302 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/panel/container.html ***!
  \*********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<header class=\"AknPanelContainer-header\">\n    <button class=\"AknIconButton AknIconButton--grey close pull-right\">\n        <i class=\"icon-remove\"></i>\n    </button>\n    <h1 class=\"AknPanelContainer-title\"><%- label %></h1>\n</header>\n<div data-drop-zone=\"panel-content\" class=\"panel-content\"></div>\n"

/***/ }),
/* 303 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/panel/history.html ***!
  \*******************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<% if (!expanded) { %>\n    <div class=\"history-block\">\n        <table class=\"AknGrid\">\n            <thead>\n                <tr>\n                    <th class=\"AknGrid-headerCell version\"><%- _.__('pim_enrich.entity.product.history.version') %></th>\n                    <th class=\"AknGrid-headerCell author\"><%- _.__('pim_enrich.entity.product.history.author') %></th>\n                    <th class=\"AknGrid-headerCell logged-at\"><%- _.__('pim_enrich.entity.product.history.logged_at') %></th>\n                </tr>\n            </thead>\n            <tbody>\n                <% _.each(versions.slice(0, 10), function(version) { %>\n                    <tr data-version=\"<%- version.version %>\" data-version-id=\"<%- version.id %>\" class=\"AknGrid-bodyRow product-version\">\n                        <td class=\"AknGrid-bodyCell version\"><%- version.version %></td>\n                        <td class=\"AknGrid-bodyCell author\"><%- version.author %><%- version.context ? ' (' + version.context + ')' : '' %></td>\n                        <td class=\"AknGrid-bodyCell logged_at\"><%- version.logged_at %></td>\n                    </tr>\n                <% }); %>\n            </tbody>\n        </table>\n    </div>\n\n    <div class=\"AknPanelContainer-footer\">\n        <button class=\"AknButton AknButton--small AknButton--grey expand-history\"><%- _.__('pim_enrich.entity.product.history.more') %></button>\n    </div>\n<% } else { %>\n    <div class=\"history-block\">\n        <table class=\"AknGrid expanded\">\n            <thead>\n                <tr>\n                    <th class=\"AknGrid-headerCell version\"><%- _.__('pim_enrich.entity.product.history.version') %></th>\n                    <th class=\"AknGrid-headerCell author\"><%- _.__('pim_enrich.entity.product.history.author') %></th>\n                    <th class=\"AknGrid-headerCell logged-at\"><%- _.__('pim_enrich.entity.product.history.logged_at') %></th>\n                    <th class=\"AknGrid-headerCell changes\"><%- _.__('pim_enrich.entity.product.history.modified') %></th>\n                    <% if (hasAction) { %><th class=\"AknGrid-headerCell actions\"><%- _.__('pim_enrich.entity.product.history.actions') %></th><% } %>\n                </tr>\n            </thead>\n            <tbody>\n                <% _.each(versions, function(version) { %>\n                    <tr data-version=\"<%- version.version %>\" data-version-id=\"<%- version.id %>\" class=\"AknGrid-bodyRow product-version\">\n                        <td class=\"AknGrid-bodyCell version\">\n                            <span class=\"version-expander\">\n                                <i class=\"icon-chevron-right\"></i>\n                            </span>\n                            <%- version.version %>\n                        </td>\n                        <td class=\"AknGrid-bodyCell author\"><%- version.author %><%- version.context ? ' (' + version.context + ')' : '' %></td>\n                        <td class=\"AknGrid-bodyCell logged-at\"><%- version.logged_at %></td>\n                        <td class=\"AknGrid-bodyCell changes\"><%- _.keys(version.changeset).join(', ') %></td>\n                        <% if (hasAction) { %><td class=\"AknGrid-bodyCell actions\"></td><% } %>\n                    </tr>\n                    <tr class=\"AknGrid-bodyRow changeset hide\">\n                        <td class=\"AknGrid-bodyCell AknGrid-bodyCell--full\" colspan=\"<%- hasAction ? '6' : '5' %>\">\n                            <table class=\"AknGrid AknGrid--condensed table-history-details\">\n                                <thead>\n                                    <tr>\n                                        <th class=\"AknGrid-headerCell property\"><%- _.__('pim_enrich.entity.product.history.property') %></th>\n                                        <th class=\"AknGrid-headerCell old-values\"><%- _.__('pim_enrich.entity.product.history.old_values') %></th>\n                                        <th class=\"AknGrid-headerCell new-values\"><%- _.__('pim_enrich.entity.product.history.new_values') %></th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <% _.each(version.changeset, function(value) { %>\n                                        <tr class=\"AknGrid-bodyRow\">\n                                            <td class=\"AknGrid-bodyCell property\"><%= value.label %></td>\n                                            <td class=\"AknGrid-bodyCell old-values\"><%- value.old %></td>\n                                            <td class=\"AknGrid-bodyCell onew-values\"><%- value.new %></td>\n                                        </tr>\n                                    <% }); %>\n                                </tbody>\n                            </table>\n                        </td>\n                    </tr>\n                <% }); %>\n            </tbody>\n        </table>\n    </div>\n\n    <div class=\"AknPanelContainer-footer\">\n        <button class=\"AknButton AknButton--small AknButton--grey collapse-history\"><%- _.__('pim_enrich.entity.product.history.less') %></button>\n    </div>\n<% } %>\n"

/***/ }),
/* 304 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/panel/selector.html ***!
  \********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<% _.each(panels, function(panel) { %>\n    <button class=\"AknButtonList-item AknButton AknButton--small AknButton--grey <%- panel.code === currentPanel ? 'AknButton--active active' : '' %>\" data-panel=\"<%- panel.code %>\">\n        <%- panel.label %>\n    </button>\n<% }) %>\n"

/***/ }),
/* 305 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/scope-switcher.html ***!
  \********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<a class=\"AknActionButton\" data-toggle=\"dropdown\" href=\"#\">\n    <%- currentScope %>\n    <span class=\"AknActionButton-caret AknCaret\"></span>\n</a>\n<ul class=\"AknDropdown-menu\">\n    <% _.each(channels, function (scope) { %>\n        <li>\n            <a class=\"AknDropdown-menuLink\"\n               data-scope=\"<%- scope.code %>\"\n               data-label=\"<%- i18n.getLabel(scope.labels, catalogLocale, scope.code) %>\">\n                <%- i18n.getLabel(scope.labels, catalogLocale, scope.code) %>\n            </a>\n        </li>\n    <% }); %>\n</ul>\n"

/***/ }),
/* 306 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/sequential-edit.html ***!
  \*********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<span class=\"AknSequentialEdit-previous\">\n    <% if (previousObject) { %>\n        <a href=\"javascript:void(0);\" class=\"previous\" data-id=\"<%- previousObject.id %>\" data-original-title=\"<%- _.__('pim_enrich.form.product.sequential_edit.info.previous', { product: previousObject.label }) %>\" data-toggle=\"tooltip\" data-placement=\"bottom\">\n            <i class=\"icon-chevron-left\"></i>\n            &nbsp;&nbsp;\n            <%- previousObject.shortLabel %>\n        </a>\n    <% } %>\n</span>\n<span class=\"AknSequentialEdit-progress AknProgress progress progress-bar\">\n    <div class=\"AknProgress-bar bar\" style=\"width: <%- ratio %>%;\">\n    <% if (ratio < 30) { %></div>&nbsp;&nbsp;<% } %>\n    <%- currentIndex %> / <%- objectCount %> <%- _.__('pim_enrich.form.product.sequential_edit.info.products') %>\n    <% if (ratio >= 30) { %></div><% } %>\n</span>\n<span class=\"AknSequentialEdit-next\">\n    <% if (nextObject) { %>\n        <a href=\"javascript:void(0);\" class=\"next\" data-id=\"<%- nextObject.id %>\" data-original-title=\"<%- _.__('pim_enrich.form.product.sequential_edit.info.next', { product: nextObject.label }) %>\" data-toggle=\"tooltip\" data-placement=\"bottom\">\n            <%- nextObject.shortLabel %>\n            &nbsp;&nbsp;\n            <i class=\"icon-chevron-right\"></i>\n        </a>\n    <% } %>\n</span>\n"

/***/ }),
/* 307 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/status-switcher.html ***!
  \*********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<a class=\"AknDropdownButton-button btn-status\" data-toggle=\"dropdown\" href=\"#\">\n    <span class=\"product-status\" data-status=\"<%- status ? 'enabled' : 'disabled' %>\"><%- status ? _.__('pim_enrich.entity.product.btn.enabled') :  _.__('pim_enrich.entity.product.btn.disabled') %></span>\n    <span class=\"AknDropdownButton-caretContainer\">\n        <i class=\"AknCaret AknCaret--big\"></i>\n    </span>\n</a>\n<ul class=\"AknDropdown-menu AknDropdown-menu--right\">\n    <% if (status) { %>\n        <li><a class=\"AknDropdown-menuLink\" data-status=\"disable\"><%- _.__('pim_enrich.entity.product.btn.disable') %></a></li>\n    <% } else { %>\n        <li><a class=\"AknDropdown-menuLink\" data-status=\"enable\"><%- _.__('pim_enrich.entity.product.btn.enable') %></a></li>\n    <% } %>\n</ul>\n"

/***/ }),
/* 308 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/tab/association-panes.html ***!
  \***************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<% _.each(associationTypes, function (associationType) { %>\n    <div class=\"AknTabHeader association-type<% if (associationType.code !== currentAssociationType) { %> AknTitleContainer--hidden<% } %>\" data-association-type=\"<%- associationType.code %>\">\n        <div>\n            <h3 class=\"AknTabHeader-title\">\n                <%- associationType.labels[locale] || '[' + associationType.code + ']'  %>\n            </h3>\n            <span class=\"AknTabHeader-subTitle\">\n                <%- _.__(\n                    'pim_enrich.form.product.tab.associations.info.number_of_associations',\n                    { productCount: associationType.productCount, groupCount: associationType.groupCount }\n                ) %>\n           </span>\n        </div>\n        <div>\n            <button type=\"button\" class=\"AknButton AknButton--grey AknButton--small AknButton--withIcon target-button target-button <% if ('products' === currentAssociationTarget) { %> AknButton--hidden<% } %>\" data-association-target=\"products\">\n                <i class=\"AknButton-icon icon-random\"></i>\n                <%- _.__('pim_enrich.form.product.tab.associations.info.show_products') %>\n            </button>\n            <button type=\"button\" class=\"AknButton AknButton--grey AknButton--small AknButton--withIcon target-button target-button <% if ('groups' === currentAssociationTarget) { %> AknButton--hidden<% } %>\" data-association-target=\"groups\">\n                <i class=\"AknButton-icon icon-random\"></i>\n                <%- _.__('pim_enrich.form.product.tab.associations.info.show_groups') %>\n            </button>\n        </div>\n   </div>\n<% }); %>\n"

/***/ }),
/* 309 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/tab/associations.html ***!
  \**********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<% if (!associationTypes.length) { %>\n    <div class=\"buffer-top buffer-left\">\n        <span class=\"buffer-small-right\">\n            <%- _.__('pim_enrich.form.product.tab.associations.info.none_exist') %>\n        </span>\n    </div>\n<% } else { %>\n    <div class=\"tabbable tabs-left\">\n        <div class=\"sidebar\">\n            <ul class=\"AknVerticalNavtab associations-list nav nav-tabs tab-groups\">\n                <li class=\"AknVerticalNavtab-item AknVerticalNavtab-header header\"></li>\n                <% _.each(associationTypes, function (associationType) { %>\n                    <li class=\"AknVerticalNavtab-item<% if (associationType.code === currentAssociationType) { %> AknVerticalNavtab-item--active active<% } %>\" data-association-type=\"<%- associationType.code %>\">\n                        <a class=\"AknVerticalNavtab-link\" href=\"#\"><%- associationType.labels[locale] || '[' + associationType.code + ']' %></a>\n                    </li>\n                <% }); %>\n            </ul>\n        </div>\n        <div class=\"AknTabContainer-content tab-content\">\n            <div class=\"association-product-grid<% if ('products' !== currentAssociationTarget) { %> hide<% } %>\">\n                <div id=\"grid-association-product-grid\" data-type=\"datagrid\"></div>\n            </div>\n\n            <div class=\"association-group-grid<% if ('groups' !== currentAssociationTarget) { %> hide<% } %>\">\n                <div id=\"grid-association-group-grid\" data-type=\"datagrid\"></div>\n            </div>\n\n            <div class=\"selection-inputs\">\n                <% _.each(associationTypes, function (associationType) { %>\n                    <input type=\"hidden\" id=\"<%- associationType.code %>-products-appendfield\"/>\n                    <input type=\"hidden\" id=\"<%- associationType.code %>-products-removefield\"/>\n                    <input type=\"hidden\" id=\"<%- associationType.code %>-groups-appendfield\"/>\n                    <input type=\"hidden\" id=\"<%- associationType.code %>-groups-removefield\"/>\n                <% }); %>\n            </div>\n        </div>\n    </div>\n<% } %>\n"

/***/ }),
/* 310 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/tab/attributes/validation-error.html ***!
  \*************************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<% _.each(errors, function(error) { %>\n    <span class=\"AknFieldContainer-validationError\">\n        <i class=\"icon-warning-sign\"></i>\n        <% if (error.locale || error.scope) { %>\n            <span class=\"field-context change-context\" data-locale=\"<%- error.locale %>\" data-scope=\"<%- error.scope %>\">\n                <% if (error.scope) { %> <span><%- error.scope %></span> <% } %>\n                <% if (error.locale) { %> <span><%= i18n.getFlag(error.locale) %></span> <% } %>\n            </span>\n        <% } %>\n        <span class=\"error-message\"><%- error.message %></span>\n    </span>\n<% }) %>\n"

/***/ }),
/* 311 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/tab/attributes/variant-group.html ***!
  \**********************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div><i class=\"icon-lock\"></i><%- _.__('pim_enrich.entity.product.variant_group.updated_by') %>: <%- variantGroup.code %></div>\n"

/***/ }),
/* 312 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/product/tab/categories.html ***!
  \********************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"tabbable tabs-left\">\n    <div class=\"sidebar\">\n        <ul class=\"AknVerticalNavtab nav nav-tabs\" id=\"trees-list\">\n            <li class=\"AknVerticalNavtab-item AknVerticalNavtab-header header\"></li>\n            <% _.each(trees, function (tree) { %>\n                <li class=\"AknVerticalNavtab-item <% if (tree.code === state.currentTree) { %> AknVerticalNavtab-item--active active<% } %>\" data-tree=\"<%- tree.code %>\" data-tree-id=\"<%- tree.id %>\">\n                    <a class=\"AknVerticalNavtab-link\" href=\"javascript:void(0);\" id=\"<%- treeLinkSelector + tree.id %>\">\n                        <div class=\"AknAcl\">\n                            <i class=\"icon-ok <%- tree.associated ? 'green AknAcl-icon--granted' : 'gray' %>\"></i>\n                            <%- tree.label %>\n                        </div>\n                        <span class=\"AknBadge AknBadge--grey\" data-tree-id=\"<%- tree.code %>\"><%- categoriesCount[tree.id] %></span>\n                    </a>\n                </li>\n            <% }); %>\n        </ul>\n    </div>\n    <div class=\"AknTabContainer-content tab-content\">\n        <div class=\"tab-pane active\" id=\"product-categories\">\n            <div id=\"trees\" data-id=\"<%- product.meta.id %>\" data-datalocale=\"<%- locale %>\" data-selected-tree=\"<%- trees[0].id %>\">\n                <% _.each(trees, function (tree) { %>\n                    <div class=\"tree root-unselectable\" data-tree-id=\"<%- tree.id %>\">\n                        <header class=\"AknTabHeader tab-header\">\n                            <div class=\"AknTabHeader-title\"><%- tree.label %></div>\n                        </header>\n                        <div id=\"tree-<%- tree.id %>\" class=\"buffer-small-left\"></div>\n                    </div>\n                <% }); %>\n            </div>\n        </div>\n    </div>\n</div>\n<input type=\"hidden\" id=\"hidden-tree-input\" value=\"<%- state.selectedCategories.join(',') %>\">\n"

/***/ }),
/* 313 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/variant-group/form/no-attribute.html ***!
  \*****************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<span>\n    <i class=\"icon-warning-sign\"></i> <%- label %>\n</span>\n"

/***/ }),
/* 314 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/variant-group/tab/properties/general.html ***!
  \**********************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"tabsection-title\">\n    <%- sectionTitle %>\n</div>\n<div class=\"tabsection-content\">\n    <div class=\"AknFormContainer AknFormContainer--withPadding\">\n        <div class=\"AknFieldContainer\">\n            <div class=\"AknFieldContainer-header\">\n                <label class=\"AknFieldContainer-label control-label required\" for=\"pim_enrich_variant_group_form_code\">\n                    <%- codeLabel %> <em><%- __('pim_enrich.form.required') %></em>\n                </label>\n            </div>\n            <div class=\"AknFieldContainer-inputContainer\">\n                <input id=\"pim_enrich_variant_group_form_code\" class=\"AknTextField\" type=\"text\" readonly=\"readonly\" disabled=\"disabled\" required=\"required\" value=\"<%- model.code %>\">\n            </div>\n        </div>\n\n        <div class=\"AknFieldContainer\">\n            <div class=\"AknFieldContainer-header\">\n                <label class=\"AknFieldContainer-label control-label required\">\n                    <%- typeLabel %> <em><%- __('pim_enrich.form.required') %></em>\n                </label>\n            </div>\n            <div class=\"AknFieldContainer-inputContainer\">\n                <select id=\"pim_enrich_variant_group_form_type\" readonly=\"readonly\" disabled=\"disabled\" class=\"select2 input-large\">\n                    <option>[<%- model.type %>]</option>\n                </select>\n            </div>\n        </div>\n\n        <div class=\"AknFieldContainer\">\n            <div class=\"AknFieldContainer-header\">\n                <label class=\"AknFieldContainer-label control-label required\">\n                    <%- axisLabel %> <em><%- __('pim_enrich.form.required') %></em>\n                </label>\n            </div>\n            <div class=\"AknFieldContainer-inputContainer\">\n                <select id=\"pim_enrich_variant_group_form_axis\" readonly=\"readonly\" disabled=\"disabled\" class=\"select2 input-large\" multiple>\n                    <% _.each(model.axes, function (axis) { %>\n                        <option selected><%- axis %></option>\n                    <% }) %>\n                </select>\n            </div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 315 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************************************!*\
  !*** ./src/Pim/Bundle/NotificationBundle/Resources/public/templates/notification/notification-footer.html ***!
  \************************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<p class=\"AknNotificationList-footer\">\n    <% if (loading) { %>\n        <img src=\"<%= options.imgUrl %>\" alt=\"<%= options.loadingText %>\"/>\n    <% } %>\n\n    <% if (!loading && !hasNotifications && !hasMore) { %>\n        <span><%= options.noNotificationsMessage %></span>\n    <% } %>\n\n    <% if (hasNotifications && hasUnread) { %>\n        <button class=\"AknButton AknButton--grey mark-as-read\"><%= options.markAsReadMessage %></button>\n    <% } %>\n</p>\n"

/***/ }),
/* 316 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************************************!*\
  !*** ./src/Pim/Bundle/NotificationBundle/Resources/public/templates/notification/notification-list.html ***!
  \**********************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<a href=\"<%= url ? '#' + url : 'javascript: void(0);' %>\" class=\"AknNotification-link <%= viewed ? '' : 'AknNotification-link--new new' %>\">\n    <div class=\"AknNotification-header\">\n        <div class=\"AknNotification-icon AknNotification-icon--<%= actionType %>\">\n            <i class=\"AknNotification-status AknNotification-status--<%= type %> icon-<%= icon %>\"></i>\n        </div>\n        <div class=\"AknNotification-metas\">\n            <time class=\"AknNotification-time\"><%= createdAt %></time>\n            <span class=\"AknNotification-title\"><%= actionTypeMessage %></span>\n        </div>\n        <i class=\"AknIconButton AknIconButton--light icon-<%= viewed ? 'trash' : 'eye-close' %> action\"></i>\n    </div>\n    <div class=\"AknNotification-message\"><%= message %></div>\n    <% if (comment) { %> <div class=\"AknNotification-comment\"><%= comment %></div> <% } %>\n    <% if (showReportButton) { %>\n    <button class=\"AknNotification-button AknButton AknButton--micro AknButton--grey AknButton--withIcon\"><i class=\"AknButton-icon icon-file-text-alt\"></i><%- _.__(buttonLabel) %></button>\n    <% } %>\n</a>\n"

/***/ }),
/* 317 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************************!*\
  !*** ./src/Pim/Bundle/NotificationBundle/Resources/public/templates/notification/notification.html ***!
  \*****************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<a href=\"javascript:void(0);\" class=\"AknBell-link dropdown-toggle\" data-toggle=\"dropdown\">\n    <i class=\"AknBell-icon icon-bell\"></i>\n    <span class=\"AknBell-countContainer\"></span>\n</a>\n\n<ul class=\"AknNotificationList AknDropdown-menu AknDropdown-menu--right\"></ul>\n"

/***/ }),
/* 318 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************************************************************!*\
  !*** ./src/Pim/Bundle/UIBundle/Resources/public/js/templates/system/group/loading-message.html ***!
  \*************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"AknFormContainer AknFormContainer--withPadding system-loading-message-field\">\n    <div class=\"AknFieldContainer\">\n        <div class=\"AknFieldContainer-header\">\n            <label class=\"AknFieldContainer-label\" for=\"loading_message_enabled\"><%- _.__('oro_config.form.config.group.loading_message.label') %></label>\n        </div>\n        <div class=\"AknFieldContainer-inputContainer system-loading-message-enabled-field\">\n            <div class=\"switch switch-small\" data-on-label=\"<%- _.__('pim_enrich.form.entity.switch.yes') %>\" data-off-label=\"<%- _.__('pim_enrich.form.entity.switch.no') %>\">\n                <input type=\"checkbox\" id=\"loading_message_enabled\" <%- loading_message_enabled === '1' ? 'checked' : '' %> />\n            </div>\n        </div>\n    </div>\n\n    <div class=\"AknFieldContainer\">\n        <div class=\"AknFieldContainer-header\">\n            <label class=\"AknFieldContainer-label\" for=\"loading_messages\"><%- _.__('oro_config.form.config.group.loading_messages.label') %></label>\n        </div>\n        <div class=\"AknFieldContainer-inputContainer system-loading-messages-field\">\n            <textarea class=\"AknTextareaField\" id=\"loading_messages\"><%- loading_messages %></textarea>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 319 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/js/datafilter/collection-filters-manager.js ***!
  \****************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global define */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ 0), __webpack_require__(/*! oro/datafilter/filters-manager */ 322)], __WEBPACK_AMD_DEFINE_RESULT__ = function(_, FiltersManager) {
    'use strict';

    /**
     * View that represents all grid filters
     *
     * @export  oro/datafilter/collection-filters-manager
     * @class   oro.datafilter.CollectionFiltersManager
     * @extends oro.datafilter.FiltersManager
     */
    return FiltersManager.extend({
        /**
         * Initialize filter list options
         *
         * @param {Object} options
         * @param {oro.PageableCollection} [options.collection]
         * @param {Object} [options.filters]
         * @param {String} [options.addButtonHint]
         */
        initialize: function(options)
        {
            this.collection = options.collection;

            this.collection.on('beforeFetch', this._beforeCollectionFetch, this);
            this.collection.on('updateState', this._onUpdateCollectionState, this);
            this.collection.on('reset', this._onCollectionReset, this);

            FiltersManager.prototype.initialize.apply(this, arguments);
        },

        /**
         * Triggers when filter is updated
         *
         * @param {oro.filter.AbstractFilter} filter
         * @protected
         */
        _onFilterUpdated: function(filter) {
            if (this.ignoreFiltersUpdateEvents) {
                return;
            }
            this.collection.state.currentPage = 1;
            this.collection.fetch();

            FiltersManager.prototype._onFilterUpdated.apply(this, arguments);
        },

        /**
         * Triggers before collection fetch it's data
         *
         * @protected
         */
        _beforeCollectionFetch: function(collection) {
            collection.state.filters = this._createState();
        },

        /**
         * Triggers when collection state is updated
         *
         * @param {oro.PageableCollection} collection
         */
        _onUpdateCollectionState: function(collection) {
            this.ignoreFiltersUpdateEvents = true;
            this._applyState(collection.state.filters || {});
            this.ignoreFiltersUpdateEvents = false;
        },

        /**
         * Triggers after collection resets it's data
         *
         * @protected
         */
        _onCollectionReset: function(collection) {
            if (collection.state.totalRecords > 0 && this.$el.children().length > 0) {
                this.$el.show();
            }
        },

        /**
         * Create state according to filters parameters
         *
         * @return {Object}
         * @protected
         */
        _createState: function() {
            var state = {};
            _.each(this.filters, function(filter, name) {
                var shortName = '__' + name;
                if (filter.enabled) {
                    if (!filter.isEmpty()) {
                        state[name] = filter.getValue();
                    } else if (!filter.defaultEnabled) {
                        state[shortName] = 1;
                    }
                } else if (filter.defaultEnabled) {
                    state[shortName] = 0;
                }
            }, this);

            this.trigger('collection-filters:createState.post', state);

            return state;
        },

        /**
         * Apply filter values from state
         *
         * @param {Object} state
         * @protected
         * @return {*}
         */
        _applyState: function(state) {
            var toEnable  = [],
                toDisable = [];

            _.each(this.filters, function(filter, name) {
                var shortName = '__' + name,
                    filterState;
                if (_.has(state, name) && 0 !== _.size(state)) {
                    filterState = state[name];
                    if (!_.isObject(filterState)) {
                        filterState = {
                            value: filterState
                        };
                    }
                    filter.setValue(filterState);
                    toEnable.push(filter);
                } else if (_.has(state, shortName)) {
                    filter.reset();
                    if (Number(state[shortName])) {
                        toEnable.push(filter);
                    } else {
                        toDisable.push(filter);
                    }
                } else {
                    filter.reset();
                    if (filter.defaultEnabled) {
                        toEnable.push(filter);
                    } else {
                        toDisable.push(filter);
                    }
                }
            }, this);

            this.enableFilters(toEnable);
            this.disableFilters(toDisable);

            return this;
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 320 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/js/datafilter/filter/date-filter.js ***!
  \********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global define */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! oro/datafilter/choice-filter */ 54),
        __webpack_require__(/*! datepicker */ 161),
        __webpack_require__(/*! pim/date-context */ 160),
        __webpack_require__(/*! pim/formatter/date */ 167),
        __webpack_require__(/*! pim/template/datagrid/filter/date-filter */ 193)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function(
    $,
    _,
    __,
    ChoiceFilter,
    Datepicker,
    DateContext,
    DateFormatter,
    template
) {
    'use strict';

    /**
     * Date filter: filter type as option + interval begin and end dates
     *
     * @export  oro/datafilter/date-filter
     * @class   oro.datafilter.DateFilter
     * @extends oro.datafilter.ChoiceFilter
     */
    return ChoiceFilter.extend({
        /**
         * Template for filter criteria
         *
         * @property {function(Object, ?Object=): String}
         */
        popupCriteriaTemplate: _.template(template),

        /**
         * Selectors for filter data
         *
         * @property
         */
        criteriaValueSelectors: {
            type: '.AknFilterDate-select',
            value: {
                start: '.AknFilterDate-start',
                end: '.AknFilterDate-end'
            }
        },

        /**
         * CSS class for visual date input elements
         *
         * @property
         */
        inputClass: 'AknTextField',

        /**
         * Date widget options
         *
         * @property
         */
        datetimepickerOptions: {
            format: DateContext.get('date').format,
            defaultFormat: DateContext.get('date').defaultFormat,
            language: DateContext.get('language'),
        },

        /**
         * References to date widgets
         *
         * @property
         */
        dateWidgets: {
            start: null,
            end: null
        },

        /**
         * Date filter type values
         *
         * @property
         */
        typeValues: {
            between:    1,
            notBetween: 2,
            moreThan:   3,
            lessThan:   4
        },

        /**
         * Date widget selector
         *
         * @property
         */
        dateWidgetSelector: 'datepicker',

        /**
         * @inheritDoc
         */
        initialize: function () {
            // init empty value object if it was not initialized so far
            if (_.isUndefined(this.emptyValue)) {
                this.emptyValue = {
                    type: (_.isEmpty(this.choices) ? '' : _.first(this.choices).value),
                    value: {
                        start: '',
                        end: ''
                    }
                };
            }

            ChoiceFilter.prototype.initialize.apply(this, arguments);
        },

        /**
         * @param {Event} e
         */
        changeFilterType: function (e) {
            var select = this.$el.find(e.currentTarget);
            var selectedValue = select.val();

            this._displayFilterType(selectedValue);
        },

        /**
         * Manage how to display a filter type
         *
         * @param {String} type
         * @protected
         */
        _displayFilterType: function(type) {
            this.$el.find('.AknFilterDate-separator').show();
            this.$el.find(this.criteriaValueSelectors.value.end).show();
            this.$el.find(this.criteriaValueSelectors.value.start).show();
            if (this.typeValues.moreThan == parseInt(type)) {
                this.$el.find('.AknFilterDate-separator').hide();
                this.$el.find(this.criteriaValueSelectors.value.end).hide();
            } else if (this.typeValues.lessThan == parseInt(type)) {
                this.$el.find('.AknFilterDate-separator').hide();
                this.$el.find(this.criteriaValueSelectors.value.start).hide();
            } else if (_.contains(['empty', 'not empty'], type)) {
                this.$el.find('.AknFilterDate-separator').hide();
                this.$el.find(this.criteriaValueSelectors.value.end).hide();
                this.$el.find(this.criteriaValueSelectors.value.start).hide();
            }
        },

        /**
         * @inheritDoc
         */
        _renderCriteria: function(el) {
            $(el).append(
                this.popupCriteriaTemplate({
                    name: this.name,
                    choices: this.choices,
                    selectedChoice: this.emptyValue.type,
                    inputClass: this.inputClass
                })
            );

            $(el).find(this.criteriaValueSelectors.type).bind('change', _.bind(this.changeFilterType, this));

            _.each(this.criteriaValueSelectors.value, function(selector, name) {
                this.dateWidgets[name] = Datepicker.init(this.$(selector), this.datetimepickerOptions);
            }, this);

            return this;
        },

        /**
         * @inheritDoc
         */
        _getCriteriaHint: function() {
            var hint = '',
                option, start, end, type,
                value = (arguments.length > 0) ? this._getDisplayValue(arguments[0]) : this._getDisplayValue();

            if (_.contains(['empty', 'not empty'], value.type)) {
                return this._getChoiceOption(value.type).label;
            }

            if (value.value) {
                start = value.value.start;
                end   = value.value.end;
                type  = value.type ? value.type.toString() : '';

                switch (type) {
                    case this.typeValues.moreThan.toString():
                        hint += [__('more than'), start].join(' ');
                        break;
                    case this.typeValues.lessThan.toString():
                        hint += [__('less than'), end].join(' ');
                        break;
                    case this.typeValues.notBetween.toString():
                        if (start && end) {
                            option = this._getChoiceOption(this.typeValues.notBetween);
                            hint += [option.label, start, __('and'), end].join(' ');
                        } else if (start) {
                            hint += [__('before'), start].join(' ');
                        } else if (end) {
                            hint += [__('after'), end].join(' ');
                        }
                        break;
                    case this.typeValues.between.toString():
                    default:
                        if (start && end) {
                            option = this._getChoiceOption(this.typeValues.between);
                            hint += [option.label, start, __('and'), end].join(' ');
                        } else if (start) {
                            hint += [__('from'), start].join(' ');
                        } else if (end) {
                            hint += [__('to'), end].join(' ');
                        }
                        break;
                }
                if (hint) {
                    return hint;
                }
            }

            return this.placeholder;
        },

        /**
         * @inheritDoc
         */
        _formatDisplayValue: function(value) {
            Datepicker.init($('<input>'), this.datetimepickerOptions).data('datetimepicker');
            _.each(value.value, function(dateValue, name) {
                if (dateValue) {
                    value.value[name] = DateFormatter.format(
                        dateValue,
                        this.datetimepickerOptions.defaultFormat,
                        this.datetimepickerOptions.format
                    );
                }
            }, this);

            return value;
        },

        /**
         * @inheritDoc
         */
        _formatRawValue: function(value) {
            _.each(value.value, function(dateValue, name) {
                if (dateValue) {
                    value.value[name] = DateFormatter.format(
                        dateValue,
                        this.datetimepickerOptions.format,
                        this.datetimepickerOptions.defaultFormat
                    );
                }
            }, this);

            return value;
        },

        /**
         * @inheritDoc
         */
        _writeDOMValue: function(value) {
            this._setInputValue(this.criteriaValueSelectors.value.start + ' input', value.value.start);
            this._setInputValue(this.criteriaValueSelectors.value.end + ' input', value.value.end);
            this._setInputValue(this.criteriaValueSelectors.type, value.type);

            return this;
        },

        /**
         * @inheritDoc
         */
        _readDOMValue: function() {
            return {
                type: this._getInputValue(this.criteriaValueSelectors.type),
                value: {
                    start: this._getInputValue(this.criteriaValueSelectors.value.start + ' input'),
                    end:   this._getInputValue(this.criteriaValueSelectors.value.end + ' input')
                }
            };
        },

        /**
         * @inheritDoc
         */
        _focusCriteria: function() {},

        /**
         * @inheritDoc
         */
        _hideCriteria: function() {
            ChoiceFilter.prototype._hideCriteria.apply(this, arguments);
        },

        /**
         * @inheritDoc
         */
        _triggerUpdate: function(newValue, oldValue) {},

        /**
         * @inheritDoc
         */
        _isValueValid: function(value) {
            if (_.isEqual(value, this.emptyValue) && !_.isEqual(this.value, value)) {
                return true;
            }

            return _.contains(['empty', 'not empty'], value.type) || value.value.start || value.value.end;
        },

        /**
         * @inheritDoc
         */
        _onValueUpdated: function(newValue, oldValue) {
            ChoiceFilter.prototype._onValueUpdated.apply(this, arguments);
            if (_.contains(['empty', 'not empty'], newValue.type)) {
                this.$el.find('.AknFilterDate-separator').hide().end()
                    .find(this.criteriaValueSelectors.value.end).hide().end()
                    .find(this.criteriaValueSelectors.value.start).hide();
            } else {
                this._displayFilterType(newValue.type);
            }
        },

        /**
         * @inheritDoc
         */
        _onClickUpdateCriteria: function(e) {
            this._hideCriteria();
            this.setValue(this._formatRawValue(this._readDOMValue()));
            this.trigger('update');
        },

        /**
         * @inheritDoc
         */
        reset: function() {
            this.setValue(this.emptyValue);
            this.trigger('update');

            return this;
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 321 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/js/datafilter/filter/multiselect-filter.js ***!
  \***************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global define */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ 0), __webpack_require__(/*! oro/translator */ 3), __webpack_require__(/*! oro/datafilter/select-filter */ 162)], __WEBPACK_AMD_DEFINE_RESULT__ = function(_, __, SelectFilter) {
    'use strict';

    /**
     * Multiple select filter: filter values as multiple select options
     *
     * @export  oro/datafilter/multiselect-filter
     * @class   oro.datafilter.MultiSelectFilter
     * @extends oro.datafilter.SelectFilter
     */
    return SelectFilter.extend({
        /**
         * Multiselect filter template
         *
         * @property
         */
        template: _.template(
            '<div class="AknActionButton filter-select filter-criteria-selector">' +
                '<% if (showLabel) { %><%= label %>: <% } %>' +
                '<select multiple>' +
                    '<% _.each(options, function (option) { %>' +
                        '<% if(_.isObject(option.value)) { %>' +
                            '<optgroup label="<%= option.label %>">' +
                                '<% _.each(option.value, function (value) { %>' +
                                    '<option value="<%= value.value %>"><%= value.label %></option>' +
                                '<% }); %>' +
                            '</optgroup>' +
                        '<% } else { %>' +
                            '<option value="<%= option.value %>"><%= option.label %></option>' +
                        '<% } %>' +
                    '<% }); %>' +
                '</select>' +
            '</div>' +
            '<% if (canDisable) { %><a href="<%= nullLink %>" class="AknFilterBox-disableFilter disable-filter"><i class="icon-remove hide-text"><%- _.__("Close") %></i></a><% } %>'
        ),

        /**
         * Select widget options
         *
         * @property
         */
        widgetOptions: {
            multiple: true,
            classes: 'AknActionButton-selectButton select-filter-widget multiselect-filter-widget'
        },

        _onSelectChange: function() {
            var data = this._readDOMValue();

            // At initialization, the value is `''` which mean 'All' but it should be `['']`
            var previousValue = '' === this.getValue().value ? [''] : this.getValue().value;

            // We try to guess if the user added 'All' to remove all previous selection
            var addAll = _.contains(_.difference(data.value, previousValue), '');

            data.value = _.contains(data.value, '') ? _.without(data.value, '') : data.value;
            data.value = _.isEmpty(data.value) ? [''] : data.value;
            data.value = addAll ? [''] : data.value;

            // set value
            this.setValue(this._formatRawValue(data));

            // update dropdown
            var widget = this.$(this.containerSelector);
            this.selectWidget.updateDropdownPosition(widget);
            this._setDropdownWidth();
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 322 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/js/datafilter/filters-manager.js ***!
  \*****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global define */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1), __webpack_require__(/*! underscore */ 0), __webpack_require__(/*! backbone */ 2), __webpack_require__(/*! oro/mediator */ 6), __webpack_require__(/*! oro/multiselect-decorator */ 174)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, _, Backbone, mediator, MultiselectDecorator) {
    'use strict';

    /**
     * View that represents all grid filters
     *
     * @export  oro/datafilter/filters-manager
     * @class   oro.datafilter.FiltersManager
     * @extends Backbone.View
     *
     * @event updateList    on update of filter list
     * @event updateFilter  on update data of specific filter
     * @event disableFilter on disable specific filter
     */
    return Backbone.View.extend({
        /**
         * List of filter objects
         *
         * @property
         */
        filters: {},

        /**
         * Container tag name
         *
         * @property
         */
        tagName: 'div',

        /**
         * Container classes
         *
         * @property
         */
        className: 'AknFilterBox filter-box oro-clearfix-width',

        /**
         * Filter list template
         *
         * @property
         */
        addButtonTemplate: _.template(
            '<select id="add-filter-select" multiple>' +
                '<%  var groups = [_.__("system_filter_group")];' +
                    '_.each(filters, function(filter) {' +
                        'if (filter.group) {' +
                            'var key = filter.groupOrder !== null ? filter.groupOrder : "last";' +
                            'if (_.isUndefined(groups[key])) {' +
                                'groups[key] = filter.group;' +
                            '} else if (!_.contains(groups, filter.group)) {' +
                                'groups.push(filter.group);' +
                            '}' +
                        '} else {' +
                            'filter.group = _.__("system_filter_group");' +
                        '} ' +
                   '});' +
                '%>' +
                '<% _.each(groups, function (group) { %>' +
                    '<optgroup label="<%= group %>">' +
                        '<% _.each(filters, function (filter, name) { %>' +
                            '<% if (filter.group == group) { %>' +
                                '<option value="<%= name %>" <% if (filter.enabled) { %>selected<% } %>>' +
                                    '<%= filter.label %>' +
                                '</option>' +
                                '<% } %>' +
                        '<% }); %>' +
                    '</optgroup>' +
                '<% }); %>' +
            '</select>'
        ),

        /**
         * Filter list input selector
         *
         * @property
         */
        filterSelector: '#add-filter-select',

        /**
         * Add filter button hint
         *
         * @property
         */
        addButtonHint: _.__('oro_filter.filters.manage'),

        /**
         * Select widget object
         *
         * @property {oro.MultiselectDecorator}
         */
        selectWidget: null,

        /**
         * ImportExport button selector
         *
         * @property
         */
        buttonSelector: '.ui-multiselect.filter-list',

        /** @property */
        events: {
            'change #add-filter-select': '_onChangeFilterSelect'
        },

        /**
         * Initialize filter list options
         *
         * @param {Object} options
         * @param {Object} [options.filters]
         * @param {String} [options.addButtonHint]
         */
        initialize: function (options)
        {
            if (options.filters) {
                this.filters = options.filters;
            }

            _.each(this.filters, function (filter) {
                this.listenTo(filter, "update", this._onFilterUpdated);
                this.listenTo(filter, "disable", this._onFilterDisabled);
            }, this);

            if (options.addButtonHint) {
                this.addButtonHint = options.addButtonHint;
            }

            Backbone.View.prototype.initialize.apply(this, arguments);

            // destroy events bindings
            mediator.once('hash_navigation_request:start', function () {
                _.each(this.filters, function (filter) {
                    this.stopListening(filter, "update", this._onFilterUpdated);
                    this.stopListening(filter, "disable", this._onFilterDisabled);
                }, this);
            }, this);
        },

        /**
         * Triggers when filter is updated
         *
         * @param {oro.datafilter.AbstractFilter} filter
         * @protected
         */
        _onFilterUpdated: function (filter) {
            this.trigger('updateFilter', filter);
        },

        /**
         * Triggers when filter is disabled
         *
         * @param {oro.datafilter.AbstractFilter} filter
         * @protected
         */
        _onFilterDisabled: function (filter) {
            this.trigger('disableFilter', filter);
            this.disableFilter(filter);
        },

        /**
         * Returns list of filter raw values
         */
        getValues: function () {
            var values = {};
            _.each(this.filters, function (filter) {
                if (filter.enabled) {
                    values[filter.name] = filter.getValue();
                }
            }, this);

            return values;
        },

        /**
         * Sets raw values for filters
         */
        setValues: function (values) {
            _.each(values, function (value, name) {
                if (_.has(this.filters, name)) {
                    this.filters[name].setValue(value);
                }
            }, this);
        },

        /**
         * Triggers when filter select is changed
         *
         * @protected
         */
        _onChangeFilterSelect: function () {
            this.trigger('updateList', this);
            this._processFilterStatus();
        },

        /**
         * Enable filter
         *
         * @param {oro.datafilter.AbstractFilter} filter
         * @return {*}
         */
        enableFilter: function (filter) {
            return this.enableFilters([filter]);
        },

        /**
         * Disable filter
         *
         * @param {oro.datafilter.AbstractFilter} filter
         * @return {*}
         */
        disableFilter: function (filter) {
            return this.disableFilters([filter]);
        },

        /**
         * Enable filters
         *
         * @param filters []
         * @return {*}
         */
        enableFilters: function (filters) {
            if (_.isEmpty(filters)) {
                return this;
            }
            var optionsSelectors = [];

            _.each(filters, function (filter) {
                filter.enable();
                optionsSelectors.push('option[value="' + filter.name + '"]:not(:selected)');
            }, this);

            var options = this.$(this.filterSelector).find(optionsSelectors.join(','));
            if (options.length) {
                options.attr('selected', true);
            }

            if (optionsSelectors.length) {
                this.selectWidget.multiselect('refresh');
            }

            return this;
        },

        /**
         * Disable filters
         *
         * @param filters []
         * @return {*}
         */
        disableFilters: function (filters) {
            if (_.isEmpty(filters)) {
                return this;
            }
            var optionsSelectors = [];

            _.each(filters, function (filter) {
                filter.disable();
                optionsSelectors.push('option[value="' + filter.name + '"]:selected');
            }, this);

            var options = this.$(this.filterSelector).find(optionsSelectors.join(','));
            if (options.length) {
                options.removeAttr('selected');
            }

            if (optionsSelectors.length) {
                this.selectWidget.multiselect('refresh');
            }

            return this;
        },

        /**
         * Render filter list
         *
         * @return {*}
         */
        render: function () {
            this.$el.empty();
            var fragment = document.createDocumentFragment();

            _.each(this.filters, function (filter) {
                if (!filter.enabled) {
                    filter.hide();
                }
                if (filter.enabled) {
                    filter.render();
                }
                if (filter.$el.length > 0) {
                    fragment.appendChild(filter.$el.get(0));
                }
            }, this);

            this.trigger("rendered");

            if (_.isEmpty(this.filters)) {
                this.$el.hide();
            } else {
                this.$el.append(this.addButtonTemplate({filters: this.filters}));
                this.$el.append(fragment);
                this._initializeSelectWidget();
            }

            return this;
        },

        /**
         * Initialize multiselect widget
         *
         * @protected
         */
        _initializeSelectWidget: function () {
            this.selectWidget = new MultiselectDecorator({
                element: this.$(this.filterSelector),
                parameters: {
                    multiple: true,
                    selectedList: 0,
                    selectedText: this.addButtonHint,
                    classes: 'AknFilterBox-addFilterButton filter-list select-filter-widget',
                    open: $.proxy(function () {
                        if (this.$el.is(':visible')) {
                            this.selectWidget.onOpenDropdown();
                            this._setDropdownWidth();
                            this._updateDropdownPosition();
                        }
                    }, this)
                }
            });

            this.selectWidget.setViewDesign(this);
            this.selectWidget.getWidget().addClass('pimmultiselect');

            this.$('.filter-list span:first').replaceWith(
                '<a id="add-filter-button" href="javascript:void(0);">' + this.addButtonHint +'</a>'
            );
        },

        /**
         * Set design for select dropdown
         *
         * @protected
         */
        _setDropdownWidth: function () {
            var widget = this.selectWidget.getWidget();
            var requiredWidth = this.selectWidget.getMinimumDropdownWidth() + 24;
            widget.width(requiredWidth).css('min-width', requiredWidth + 'px');
            widget.find('input[type="search"]').width(requiredWidth - 22);
        },

        /**
         * Activate/deactivate all filter depends on its status
         *
         * @protected
         */
        _processFilterStatus: function () {
            var activeFilters = this.$(this.filterSelector).val();

            _.each(this.filters, function (filter, name) {
                if (!filter.enabled && _.indexOf(activeFilters, name) != -1) {
                    this.enableFilter(filter);
                } else if (filter.enabled && _.indexOf(activeFilters, name) == -1) {
                    this.disableFilter(filter);
                }
            }, this);

            this._updateDropdownPosition();
        },

        /**
         * Set dropdown position according to current element
         *
         * @protected
         */
        _updateDropdownPosition: function () {
            var button = this.$(this.buttonSelector);
            var buttonPosition = button.offset();
            var widgetWidth = this.selectWidget.getWidget().outerWidth();
            var windowWidth = $(window).width();
            var widgetLeftOffset = buttonPosition.left;
            if (buttonPosition.left + widgetWidth > windowWidth) {
                widgetLeftOffset = buttonPosition.left + button.outerWidth() - widgetWidth;
            }

            this.selectWidget.getWidget().css({
                top: buttonPosition.top + button.outerHeight(),
                left: widgetLeftOffset
            });
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 323 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/js/datagrid/listener/oro-column-form-listener.js ***!
  \*********************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define*/
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1), __webpack_require__(/*! underscore */ 0), __webpack_require__(/*! oro/translator */ 3), __webpack_require__(/*! oro/mediator */ 6), __webpack_require__(/*! oro/modal */ 20), __webpack_require__(/*! oro/datagrid/abstract-listener */ 164)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, _, __, mediator, Modal, AbstractListener) {
    'use strict';

    /**
     * Listener for entity edit form and datagrid
     *
     * @export  oro/datagrid/column-form-listener
     * @class   oro.datagrid.ColumnFormListener
     * @extends oro.datagrid.AbstractListener
     */
    var ColumnFormListener = AbstractListener.extend({

        /** @param {Object} */
        selectors: {
            included: null,
            excluded: null
        },

        /**
         * Initialize listener object
         *
         * @param {Object} options
         */
        initialize: function (options) {
            if (!_.has(options, 'selectors')) {
                throw new Error('Field selectors is not specified');
            }
            this.selectors = options.selectors;

            AbstractListener.prototype.initialize.apply(this, arguments);
        },

        /**
         * Set datagrid instance
         */
        setDatagridAndSubscribe: function () {
            AbstractListener.prototype.setDatagridAndSubscribe.apply(this, arguments);

            this.$gridContainer.on('preExecute:refresh:' + this.gridName, this._onExecuteRefreshAction.bind(this));
            this.$gridContainer.on('preExecute:reset:' + this.gridName, this._onExecuteResetAction.bind(this));
            mediator.on('grid_load:complete', this._restoreState.bind(this));

            this._clearState();
            this._restoreState();
        },

        /**
         * Fills inputs referenced by selectors with ids need to be included and to excluded
         *
         * @param {*} id model id
         * @param {Backbone.Model} model
         * @protected
         */
        _processValue: function(id, model) {
            var original = this.get('original');
            var included = this.get('included');
            var excluded = this.get('excluded');

            var isActive = model.get(this.columnName);
            var originallyActive;
            if (_.has(original, id)) {
                originallyActive = original[id];
            } else {
                originallyActive = !isActive;
                original[id] = originallyActive;
            }

            if (isActive) {
                if (originallyActive) {
                    included = _.without(included, [id]);
                } else {
                    included = _.union(included, [id]);
                }
                excluded = _.without(excluded, id);
            } else {
                included = _.without(included, id);
                if (!originallyActive) {
                    excluded = _.without(excluded, [id]);
                } else {
                    excluded = _.union(excluded, [id]);
                }
            }

            this.set('included', included);
            this.set('excluded', excluded);
            this.set('original', original);

            this._synchronizeState();
        },

        /**
         * Clears state of include and exclude properties to empty values
         *
         * @private
         */
        _clearState: function () {
            this.set('included', []);
            this.set('excluded', []);
            this.set('original', {});
        },

        /**
         * Synchronize values of include and exclude properties with form fields and datagrid parameters
         *
         * @private
         */
        _synchronizeState: function () {
            var included = this.get('included');
            var excluded = this.get('excluded');
            if (this.selectors.included) {
                $(this.selectors.included).val(included.join(','));
            }
            if (this.selectors.excluded) {
                $(this.selectors.excluded).val(excluded.join(','));
            }
        },

        /**
         * Explode string into int array
         *
         * @param string
         * @return {Array}
         * @private
         */
        _explode: function(string) {
            if (!string) {
                return [];
            }
            return _.map(string.split(','), function(val) {return val ? parseInt(val, 10) : null});
        },

        /**
          * Restore values of include and exclude properties
          *
          * @private
          */
        _restoreState: function () {
            var included = '';
            var excluded = '';
            if (this.selectors.included && $(this.selectors.included).length) {
                included = this._explode($(this.selectors.included).val());
                this.set('included', included);
            }
            if (this.selectors.excluded && $(this.selectors.excluded).length) {
                excluded = this._explode($(this.selectors.excluded).val());
                this.set('excluded', excluded)
            }
            if (included || excluded) {
                mediator.trigger('datagrid:restoreState:' + this.gridName, this.columnName, this.dataField, included, excluded);
            }
         },

        /**
         * Confirms refresh action that before it will be executed
         *
         * @param {oro.datagrid.AbstractAction} action
         * @param {Object} options
         * @private
         */
        _onExecuteRefreshAction: function (e, action, options) {
            this._confirmAction(action, options, 'refresh', {
                title: __('Refresh Confirmation'),
                content: __('Your local changes will be lost. Are you sure you want to refresh grid?')
            });
        },

        /**
         * Confirms reset action that before it will be executed
         *
         * @param {oro.datagrid.AbstractAction} action
         * @param {Object} options
         * @private
         */
        _onExecuteResetAction: function(e, action, options) {
            this._confirmAction(action, options, 'reset', {
                title: __('Reset Confirmation'),
                content: __('Your local changes will be lost. Are you sure you want to reset grid?')
            });
        },

        /**
         * Asks user a confirmation if there are local changes, if user confirms then clears state and runs action
         *
         * @param {oro.datagrid.AbstractAction} action
         * @param {Object} actionOptions
         * @param {String} type "reset" or "refresh"
         * @param {Object} confirmModalOptions Options for confirm dialog
         * @private
         */
        _confirmAction: function(action, actionOptions, type, confirmModalOptions) {
            this.confirmed = this.confirmed || {};
            if (!this.confirmed[type] && this._hasChanges()) {
                actionOptions.doExecute = false; // do not execute action until it's confirmed
                this._openConfirmDialog(type, confirmModalOptions, function () {
                    // If confirmed, clear state and run action
                    this.confirmed[type] = true;
                    this._clearState();
                    this._synchronizeState();
                    action.run();
                });
            }
            this.confirmed[type] = false;
        },

        /**
         * Returns TRUE if listener contains user changes
         *
         * @return {Boolean}
         * @private
         */
        _hasChanges: function() {
            return !_.isEmpty(this.get('included')) || !_.isEmpty(this.get('excluded'));
        },

        /**
         * Opens confirm modal dialog
         */
        _openConfirmDialog: function(type, options, callback) {
            this.confirmModal = this.confirmModal || {};
            if (!this.confirmModal[type]) {
                this.confirmModal[type] = new Modal(_.extend({
                    title: __('Confirmation'),
                    okText: __('Ok, got it.'),
                    okButtonClass: 'btn-primary btn-large'
                }, options));
                this.confirmModal[type].on('ok', _.bind(callback, this));
            }
            this.confirmModal[type].open();
        }
    });

    ColumnFormListener.init = function ($gridContainer, gridName) {
        var metadata = $gridContainer.data('metadata');
        var options = metadata.options || {};
        if (options.columnListener) {
            new ColumnFormListener(_.extend({ $gridContainer: $gridContainer, gridName: gridName }, options.columnListener));
        }
    };

    return ColumnFormListener;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 324 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/js/remover/datagrid-view-remover.js ***!
  \********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! module-config */ 21),
        __webpack_require__(/*! routing */ 4)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        module,
        Routing
    ) {
        return {
            /**
             * Remove the given datagridView.
             * Return the DELETE request promise.
             *
             * @param {object} datagridView
             *
             * @returns {Promise}
             */
            remove: function (datagridView) {
                var removeRoute = Routing.generate(module.config().url, {identifier: datagridView.id});

                return $.ajax({url: removeRoute, type: 'DELETE'});
            }
        };
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 325 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/common/column-list-view.js ***!
  \************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(/*! jquery */ 1),
    __webpack_require__(/*! underscore */ 0),
    __webpack_require__(/*! oro/translator */ 3),
    __webpack_require__(/*! backbone */ 2),
    __webpack_require__(/*! pim/template/datagrid/configure-columns-action */ 192)
], __WEBPACK_AMD_DEFINE_RESULT__ = function (
    $,
    _,
    __,
    Backbone,
    template
) {
    var Column = Backbone.Model.extend({
        defaults: {
            label: '',
            displayed: false,
            group: __('system_filter_group')
        }
    });

    var ColumnList = Backbone.Collection.extend({ model: Column });

    return Backbone.View.extend({
        collection: ColumnList,

        template: _.template(template),

        events: {
            'input input[type="search"]':      'search',
            'click .nav-list li':              'filter',
            'click button.reset':              'reset',
            'click #column-selection .action': 'remove'
        },

        search: function (e) {
            var search = $(e.currentTarget).val();

            var matchesSearch = function (text) {
                return ('' + text).toUpperCase().indexOf(('' + search).toUpperCase()) >= 0;
            };

            this.$('#column-list').find('li').each(function () {
                if (matchesSearch($(this).data('value')) || matchesSearch($(this).text())) {
                    $(this).removeClass('AknVerticalList-item--hide');
                } else {
                    $(this).addClass('AknVerticalList-item--hide');
                }
            });
        },

        filter: function (e) {
            var filter = $(e.currentTarget).data('value');

            $(e.currentTarget).addClass('active').siblings('.active').removeClass('active');

            if (_.isUndefined(filter)) {
                this.$('#column-list li').removeClass('AknVerticalList-item--hide');
            } else {
                this.$('#column-list').find('li').each(function () {
                    if (filter === $(this).data('group')) {
                        $(this).removeClass('AknVerticalList-item--hide');
                    } else {
                        $(this).addClass('AknVerticalList-item--hide');
                    }
                });
            }
        },

        remove: function (e) {
            var $item = $(e.currentTarget).parent();
            $item.appendTo(this.$('#column-list'));

            var model = _.first(this.collection.where({code: $item.data('value')}));
            model.set('displayed', false);

            this.validateSubmission();
        },

        reset: function () {
            _.each(this.collection.where({displayed: true, removable: true}), function (model) {
                model.set('displayed', false);
                this.$('#column-selection li[data-value="' + model.get('code') + '"]').appendTo(this.$('#column-list'));
            }.bind(this));
            this.validateSubmission();
        },

        render: function () {
            var systemColumn = this.collection.where({group: __('system_filter_group')});

            var groups = 0 !== systemColumn.length ?
                [{ position: 0, name: _.__('system_filter_group'), itemCount: 0 }] :
                [];

            _.each(this.collection.toJSON(), function (column) {
                if (_.isEmpty(_.where(groups, {name: column.group}))) {
                    var position = parseInt(column.groupOrder, 10);
                    if (!_.isNumber(position) || !_.isEmpty(_.where(groups, {position: position}))) {
                        position = _.max(groups, function (group) {
                            return group.position;
                        }) + 1;
                    }

                    groups.push({
                        position:  position,
                        name:      column.group,
                        itemCount: 1
                    });
                } else {
                    _.first(_.where(groups, {name: column.group})).itemCount += 1;
                }
            });

            groups = _.sortBy(groups, function (group) {
                return group.position;
            });

            this.$el.html(
                this.template({
                    groups:  groups,
                    columns: this.collection.toJSON()
                })
            );

            this.$('#column-list, #column-selection').sortable({
                connectWith: '.connected-sortable',
                containment: this.$el,
                tolerance: 'pointer',
                cursor: 'move',
                cancel: 'div.alert',
                receive: function (event, ui) {
                    var model = _.first(this.collection.where({code: ui.item.data('value')}));
                    model.set('displayed', ui.sender.is('#column-list') && model.get('removable'));

                    if (!model.get('removable')) {
                        $(ui.sender).sortable('cancel');
                    } else {
                        this.validateSubmission();
                    }
                }.bind(this)
            }).disableSelection();

            this.$('ul').css('height', $(window).height() * 0.7);

            return this;
        },

        validateSubmission: function () {
            if (this.collection.where({displayed: true}).length) {
                this.$('.alert').hide();
                this.$('.AknMessageBox--error').addClass('AknMessageBox--hide');
                this.$el.closest('.modal')
                    .find('.btn.ok:not(.btn-primary)')
                    .addClass('btn-primary')
                    .attr('disabled', false);
            } else {
                this.$('.alert').show();
                this.$('.AknMessageBox--error').removeClass('AknMessageBox--hide');
                this.$el.closest('.modal')
                    .find('.btn.ok.btn-primary')
                    .removeClass('btn-primary')
                    .attr('disabled', true);
            }
        },

        getDisplayed: function () {
            return _.map(this.$('#column-selection li'), function (el) {
                return $(el).data('value');
            });
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 326 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/family/form/attributes/attributes.js ***!
  \**********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Family attributes settings table view
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/family/tab/attributes/attributes */ 223),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! pim/security-context */ 31),
        __webpack_require__(/*! pim/i18n */ 17),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/dialog */ 14),
        __webpack_require__(/*! oro/messenger */ 16),
        __webpack_require__(/*! oro/loading-mask */ 18)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        __,
        $,
        BaseForm,
        template,
        UserContext,
        SecurityContext,
        i18n,
        FetcherRegistry,
        Dialog,
        Messanger,
        LoadingMask
    ) {
        return BaseForm.extend({
            className: 'tabsection-content tab-content',
            attributeRequiredIconClass: 'AknAcl-icon AknAcl-icon--granted icon-ok required',
            attributeNotRequiredIconClass: 'AknAcl-icon icon-circle non-required',
            requiredLabel: __('pim_enrich.form.family.tab.attributes.required_label'),
            notRequiredLabel: __('pim_enrich.form.family.tab.attributes.not_required_label'),
            identifierAttribute: 'pim_catalog_identifier',
            template: _.template(template),
            errors: [],
            catalogLocale: UserContext.get('catalogLocale'),
            channels: null,
            attributeGroups: null,
            events: {
                'click .group': 'toggleGroup',
                'click .attribute-requirement i': 'toggleAttribute',
                'click .remove-attribute': 'onRemoveAttribute'
            },

            /**
             * {@inheritdoc}
             */
            initialize: function (config) {
                this.config = config.config;
            },

            /**
             * {@inheritdoc}
             */
            configure: function () {
                this.listenTo(
                    this.getRoot(),
                    'pim_enrich:form:entity:post_fetch',
                    this.render
                );

                this.listenTo(
                    this.getRoot(),
                    'add-attribute:add',
                    this.onAddAttributes
                );

                this.listenTo(
                    this.getRoot(),
                    'add-attribute-group:add',
                    this.onAddAttributesByAttributeGroups
                );

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                if (!this.configured) {
                    return this;
                }

                $.when(
                    FetcherRegistry.getFetcher('channel').fetchAll(),
                    FetcherRegistry.getFetcher('attribute-group').fetchAll()
                ).then(function (channels, attributeGroups) {
                    this.channels = channels;
                    this.attributeGroups = attributeGroups;

                    var data = this.getFormData();
                    var groupedAttributes = _.groupBy(data.attributes, function (attribute) {
                        return attribute.group_code;
                    });

                    _.sortBy(groupedAttributes, function (attributes, group) {
                        return this.attributeGroups[group].sort_order;
                    }.bind(this));

                    _.each(groupedAttributes, function (attributes, group) {
                        attributes = _.sortBy(attributes, function (attribute) {
                            return attribute.sort_order;
                        });

                        groupedAttributes[group] = attributes;
                    });

                    this.$el.html(this.template({
                        label: __(this.config.label),
                        requiredLabel: this.requiredLabel,
                        notRequiredLabel: this.notRequiredLabel,
                        groupedAttributes: groupedAttributes,
                        attributeRequirements: data.attribute_requirements,
                        channels: this.channels,
                        attributeGroups: this.attributeGroups,
                        colspan: (this.channels.length + 2),
                        i18n: i18n,
                        identifierAttribute: this.identifierAttribute,
                        catalogLocale: this.catalogLocale
                    }));

                    $(this.$el).find('[data-original-title]').tooltip();

                    this.delegateEvents();
                    this.renderExtensions();
                }.bind(this));
            },

            /**
             * Toggle expand/collapse attribute group accordion
             *
             * @param {Object} event
             */
            toggleGroup: function (event) {
                event.preventDefault();
                var target = event.currentTarget;

                $(target).parent().find('tr:not(.group)').toggle();
                $(target).find('i').toggleClass('icon-expand-alt icon-collapse-alt');

                return this;
            },

            /**
             * Toggle attribute requirement
             *
             * @param {Object} event
             */
            toggleAttribute: function (event) {
                event.preventDefault();
                var target = event.currentTarget;

                if (!SecurityContext.isGranted('pim_enrich_family_edit_attributes')) {
                    return this;
                }

                if (!this.isAttributeEditable(target.dataset.type)) {
                    return this;
                }

                var attribute = target.dataset.attribute;
                var channel = target.dataset.channel;

                if ('true' === target.dataset.required) {
                    this.removeFromAttributeRequirements(attribute, channel);
                } else {
                    this.addToAttributeRequirements(attribute, channel);
                }

                return this.render();
            },

            /**
             * Checks if attribute is editable
             *
             * @param {string} type
             *
             * @returns {boolean}
             */
            isAttributeEditable: function (type) {
                return this.identifierAttribute !== type;
            },

            /**
             * Adds attribute to channel requirements
             *
             * @param {string} attribute
             * @param {string} channel
             */
            addToAttributeRequirements: function (attribute, channel) {
                var data = this.getFormData();
                var requirements = data.attribute_requirements[channel] || [];
                requirements.push(attribute);
                data.attribute_requirements[channel] = requirements;

                return this.setData(data);
            },

            /**
             * Removes attribute from channels requirements
             *
             * @param {string} attribute
             * @param {string} channel
             */
            removeFromAttributeRequirements: function (attribute, channel) {
                var data = this.getFormData();
                data.attribute_requirements[channel] = data.attribute_requirements[channel] ?
                    data.attribute_requirements[channel].filter(function (item) {
                        return attribute !== item;
                    }) : [];
                this.setData(data);
            },

            /**
             * Removes attribute from family
             *
             * Checks if user has rights to remove attributes
             * Checks if attribute is not used as label
             *
             * @param {Object} event
             */
            onRemoveAttribute: function (event) {
                event.preventDefault();
                var attributeAsLabel = this.getFormData().attribute_as_label;

                if (!SecurityContext.isGranted('pim_enrich_family_edit_attributes')) {
                    return false;
                }

                var attributeToRemove = event.currentTarget.dataset.attribute;

                if (attributeAsLabel === attributeToRemove) {
                    Messanger.notificationFlashMessage(
                        'error',
                        __('pim_enrich.entity.family.info.cant_remove_attribute_as_label')
                    );

                    return false;
                }

                return this.removeAttribute(attributeToRemove);
            },

            /**
             * Adds selected attributes to family
             *
             * @param {Object} event
             */
            onAddAttributes: function (event) {
                var options = {
                    options: {
                        identifiers: event.codes,
                        limit: event.codes.length
                    }
                };
                var loadingMask = new LoadingMask();
                loadingMask.render().$el.appendTo(this.getRoot().$el).show();

                $.when(
                    FetcherRegistry.getFetcher('attribute')
                        .search(options)
                ).then(function (attributes) {
                    _.each(attributes, function (attribute) {
                        this.addAttribute(attribute);
                    }.bind(this));

                    this.render();
                }.bind(this)).always(function () {
                    loadingMask.hide().$el.remove();
                });
            },

            /**
             * Adds attributes associated with selected groups
             *
             * @param {Object} event
             */
            onAddAttributesByAttributeGroups: function (event) {
                var loadingMask = new LoadingMask();
                loadingMask.render().$el.appendTo(this.getRoot().$el).show();

                $.when(
                    FetcherRegistry.getFetcher('attribute-group')
                        .search({
                            options: {
                                identifiers: event.codes,
                                limit: event.codes.length
                            }
                        }),
                    FetcherRegistry.getFetcher('attribute').getIdentifierAttribute()
                ).then(function (attributeGroups, identifier) {
                    var existingAttributes = _.pluck(this.getFormData().attributes, 'code');
                    var groupsAttributes = [].concat.apply(
                        [],
                        _.pluck(attributeGroups, 'attributes')
                    );
                    var attributesToAdd = _.filter(groupsAttributes, function (attribute) {
                        return !_.contains(existingAttributes, attribute) &&
                            attribute !== identifier.code;
                    });

                    return FetcherRegistry.getFetcher('attribute')
                        .search({
                            options: {
                                identifiers: attributesToAdd,
                                limit: attributesToAdd.length
                            }
                        });
                }.bind(this)).then(function (attributes) {
                    _.each(attributes, function (attribute) {
                        this.addAttribute(attribute);
                    }.bind(this));

                    this.render();
                }.bind(this)).always(function () {
                    loadingMask.hide().$el.remove();
                });
            },

            /**
             * Removes attribute from family
             *
             * @return {Object}
             */
            removeAttribute: function (attribute) {
                _.each(this.channels, function (channel) {
                    this.removeFromAttributeRequirements(attribute, channel.code);
                }.bind(this));

                var data = this.getFormData();

                data.attributes.splice(
                    _.pluck(data.attributes, 'code').indexOf(attribute),
                    1
                );

                this.setData(data);

                return this.render();
            },

            /**
             * Adds attribute to family
             *
             * @param {Object} attribute
             */
            addAttribute: function (attribute) {
                var data = this.getFormData();
                if ('undefined' !== typeof _.findWhere(
                    data.attributes, {
                        code: attribute.code
                    })) {
                    return this;
                }

                data.attributes.push(attribute);
                this.setData(data);
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 327 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/family/form/attributes/toolbar/add-select/attribute/select.js ***!
  \***********************************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Family edit form add attribute select extension view
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/product/add-select/attribute */ 169)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        AddAttributeSelect
    ) {
        return AddAttributeSelect.extend({
            /**
             * {@inheritdoc}
             */
            getItemsToExclude: function () {
                return $.Deferred().resolve(
                    _.pluck(
                        this.getFormData().attributes,
                        'code'
                    )
                );
            },

            /**
             * {@inheritdoc}
             */
            addItems: function () {
                this.getRoot().trigger(this.addEvent, { codes: this.selection });
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));



/***/ }),
/* 328 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/filter/product/category/selector.js ***!
  \*********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Categories selector tree
 *
 * @author    Clement Gautier <clement.gautier@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! oro/loading-mask */ 18),
        __webpack_require__(/*! pim/i18n */ 17),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! pim/template/filter/product/category/selector */ 236),
        __webpack_require__(/*! jquery.jstree */ 49)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, Backbone, Routing, __, LoadingMask, i18n, FetcherRegistry, UserContext, template) {
        return Backbone.View.extend({
            template: _.template(template),

            config: {
                core: {
                    animation: 200,
                    html_titles: true,
                    strings: { loading:  __('jstree.loading') }
                },
                plugins: [
                    'themes',
                    'json_data',
                    'ui',
                    'types',
                    'checkbox'
                ],
                checkbox: {
                    two_state: true,
                    real_checkboxes: true
                },
                themes: {
                    dots: true,
                    icons: true
                },
                types: {
                    max_depth: -2,
                    max_children: -2,
                    valid_children: ['folder'],
                    types: {
                        'default': {
                            valid_children: 'folder'
                        }
                    }
                },
                ui: {
                    select_limit: 1,
                    select_multiple_modifier: false
                }
            },

            currentTree: null,

            attributes: {
                categories: []
            },

            /**
             * Callback called when a node is checked in jstree
             *
             * @param {Object} data
             */
            checkNode: function (data) {
                var code = String(data.rslt.obj.data('code'));
                // All products case
                if ('' === code) {
                    // Uncheck other nodes
                    data.inst.get_container_ul().find('li.jstree-checked:not(.jstree-all)').each(function () {
                        data.inst.uncheck_node(this);
                    });

                    this.attributes.categories = [];
                } else {
                    if (!_.contains(this.attributes.categories, code)) {
                        this.attributes.categories.push(code);
                    }

                    // Uncheck "All products" if checked
                    data.inst.uncheck_node(data.inst.get_container_ul().find('li.jstree-all'));
                }
            },

            /**
             * Callback called when a node is unchecked in jstree
             *
             * @param {Object} data
             */
            uncheckNode: function (data) {
                var code = data.rslt.obj.data('code');

                if ('' !== code) {
                    this.attributes.categories = _.without(this.attributes.categories, code);
                }
            },

            /**
             * Callback called when a node is loaded in jstree
             *
             * @param {Object} data
             */
            loadNode: function (data) {
                var node = data.rslt.obj;

                if (-1 === node) {
                    // Add the All products checkbox
                    data.inst.create_node(data.inst.get_container(), 'last', {
                        attr: {
                            'id': 'node_',
                            'class': 'jstree-unclassified jstree-all separated',
                            'data-code': ''
                        },
                        data: { title: __('jstree.all') }
                    }, function ($node) {
                        if (0 === this.attributes.categories.length) {
                            data.inst.check_node($node);
                        }
                    }.bind(this), true);
                } else if (_.contains(this.attributes.categories, node.data('code'))) {
                    data.inst.check_node(node);
                }
            },

            /**
             * Render the tree in the element's HTML when the channel category is fetched and bind events from jstree
             */
            render: function () {
                var loadingMask = new LoadingMask();
                loadingMask.render().$el.appendTo(this.$el.parent());
                loadingMask.show();

                FetcherRegistry.initialize().then(function () {
                    FetcherRegistry.getFetcher('channel')
                        .fetch(this.attributes.channel)
                        .then(function (channel) {
                            return $.when(
                                FetcherRegistry.getFetcher('category').fetch(channel.category_tree)
                            ).then(function (category) {
                                this.$el.html(this.template({
                                    tree: category,
                                    label: i18n.getLabel(
                                        category.labels,
                                        UserContext.get('uiLocale'),
                                        category.code
                                    )
                                }));

                                this.$('.root').jstree(_.extend(this.config, {
                                    json_data: {
                                        ajax: {
                                            url: function (node) {
                                                if (-1 === node && 0 < this.attributes.categories.length) {
                                                    // First load of the tree: get the checked categories
                                                    return Routing.generate(
                                                        'pim_enrich_category_rest_list_selected_children',
                                                        {
                                                            identifier: category.code,
                                                            selected: this.attributes.categories
                                                        }
                                                    );
                                                }

                                                return Routing.generate('pim_enrich_categorytree_children', {
                                                    _format: 'json'
                                                });
                                            }.bind(this),
                                            data: function (node) {
                                                if (-1 === node) {
                                                    return {id: this.get_container().data('tree-id')};
                                                }

                                                return {id: node.attr('id').replace('node_', '')};
                                            }
                                        }
                                    }
                                }))
                                .on('check_node.jstree', function (event, data) {
                                    this.checkNode(data);
                                }.bind(this))
                                .on('uncheck_node.jstree', function (event, data) {
                                    this.uncheckNode(data);
                                }.bind(this))
                                .on('load_node.jstree', function (event, data) {
                                    this.loadNode(data);
                                }.bind(this));
                            }.bind(this));
                        }.bind(this))
                        .done(function () {
                            this.$el.parent().find('.loading-mask').remove();
                        }.bind(this));
                }.bind(this));
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 329 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/common/add-select/footer.js ***!
  \******************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Common add select footer view
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! pim/template/form/add-select/footer */ 242)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        Backbone,
        template
    ) {
        return Backbone.View.extend({
            template: _.template(template),
            buttonTitle: null,
            numberOfItems: 0,
            countTitle: null,
            addEvent: null,

            events: {
                'click button': 'onAdd'
            },

            /**
             * {@inheritdoc}
             */
            initialize: function () {
                this.buttonTitle   = this.options.buttonTitle;
                this.countTitle    = this.options.countTitle;
                this.addEvent      = this.options.addEvent;
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                this.$el.html(this.template({
                    buttonTitle: this.buttonTitle,
                    numberOfItems: this.numberOfItems,
                    countTitle: this.countTitle
                }));

                return this;
            },

            /**
             * Update the item counter line and re-render the view.
             *
             * @param {int|string} number
             */
            updateNumberOfItems: function (number) {
                this.numberOfItems = number;

                this.render();
            },

            /**
             * Method called when the 'add' button is clicked
             */
            onAdd: function () {
                this.trigger(this.addEvent);
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 330 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/common/attributes/copy-field.js ***!
  \**********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Copy field extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/field */ 152),
        __webpack_require__(/*! pim/template/form/tab/attribute/copy-field */ 265),
        __webpack_require__(/*! pim/i18n */ 17),
        __webpack_require__(/*! oro/mediator */ 6)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (Backbone, _, Field, template, i18n, mediator) {
        return Field.extend({
            tagName: 'div',
            field: null,
            template: _.template(template),
            selected: false,
            events: {
                'click': 'onSelect'
            },

            /**
             * Initialize the view
             */
            initialize: function () {
                this.selected = false;
                this.field    = null;

                Field.prototype.initialize.apply(this, arguments);
            },

            /**
             * Render the copy field view
             * Delegates the render of the input itself to the Field.renderCopyInput() method
             *
             * @returns {Object}
             */
            render: function () {
                this.$el.empty();

                var templateContext = {
                    type: this.field.attribute.field_type,
                    label: this.field.getLabel(),
                    config: this.field.config,
                    attribute: this.field.attribute,
                    selected: this.selected,
                    context: this.context,
                    i18n: i18n
                };

                mediator.trigger('pim_enrich:form:field:extension:add', {'field': this, 'promises': []});

                this.$el.html(this.template(templateContext));
                this.field.renderCopyInput(this.getCurrentValue())
                    .then(function (render) {
                        this.$('.field-input').html(render);
                        this.renderElements();
                    }.bind(this));

                this.delegateEvents();

                return this;
            },

            /**
             * Render elements of this field in different available positions.
             * In the copy case, only implements extension on input position.
             */
            renderElements: function () {
                _.each(this.elements, function (elements, position) {
                    if ('field-input' === position) {
                        var $container = this.$('.field-input');
                        $container.empty();

                        _.each(elements, function (element) {
                            if (typeof element.render === 'function') {
                                $container.append(element.render().$el);
                            } else {
                                $container.append(element);
                            }
                        }.bind(this));
                    }
                }.bind(this));
            },

            /**
             * Bound this copy field to the original field
             *
             * @param {Field} field
             */
            setField: function (field) {
                this.field = field;
            },

            /**
             * Callback called when the copy field is clicked, toggle the select checkbox state
             */
            onSelect: function () {
                this.selected = !this.selected;
                this.$('.copy-field-selector').prop('checked', this.selected);
            },

            /**
             * Mark this copy field as selected or not
             *
             * @param {boolean} selected
             */
            setSelected: function (selected) {
                this.selected = selected;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 331 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/common/download-file.js ***!
  \**************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Download file extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Alban Alnot <alban.alnot@consertotech.pro>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/form/download-file */ 247),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! pim/common/property */ 151)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (_,
              __,
              BaseForm,
              template,
              Routing,
              UserContext,
              propertyAccessor
    ) {
        return BaseForm.extend({
            template: _.template(template),

            /**
             * {@inheritdoc}
             */
            initialize: function (meta) {
                this.config = meta.config;

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            configure: function () {
                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:post_update', this.render);

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                if (!this.isVisible()) {
                    return this;
                }
                this.$el.html(this.template({
                    btnLabel: __(this.config.label),
                    btnIcon: this.config.iconName,
                    url: this.getUrl()
                }));

                return this;
            },

            /**
             * Get the url with parameters
             *
             * @returns {string}
             */
            getUrl: function () {
                var parameters = {};
                if (this.config.urlParams) {
                    var formData = this.getFormData();
                    this.config.urlParams.forEach(function (urlParam) {
                        parameters[urlParam.property] =
                            propertyAccessor.accessProperty(formData, urlParam.path);
                    });
                }

                return Routing.generate(
                    this.config.url,
                    parameters
                );
            },

            /**
             * Returns true if the extension should be visible
             *
             * @returns {boolean}
             */
            isVisible: function () {
                return propertyAccessor.accessProperty(this.getFormData(), this.config.isVisiblePath);
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 332 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/common/group-selector.js ***!
  \***************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Group selector extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! pim/template/form/group-selector */ 251)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, BaseForm, mediator, template) {
        return BaseForm.extend({
            tagName: 'ul',
            className: 'AknVerticalNavtab nav nav-tabs group-selector',
            template: _.template(template),
            elements: [],
            badges: {},
            events: {
                'click li': 'change'
            },

            /**
             * {@inheritdoc}
             */
            initialize: function () {
                this.badges   = {};
                this.elements = [];

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                this.$el.empty();
                this.$el.html(this.template({
                    current: this.getCurrent(),
                    elements: this.getElements(),
                    badges: this.badges
                }));

                this.delegateEvents();

                return this;
            },

            /**
             * Set the element collection
             *
             * @param {Array} elements
             */
            setElements: function (elements) {
                this.elements = elements;
                this.ensureDefault();
            },

            /**
             * On attribute group change
             *
             * @param {Event} event
             */
            change: function (event) {
                this.setCurrent(event.currentTarget.dataset.element);
            },

            /**
             * Get current attribute group
             *
             * @return {String}
             */
            getCurrent: function () {
                return sessionStorage.getItem('current_select_group_' + this.code);
            },

            /**
             * Set current attribute group
             *
             * @param {String} current
             * @param {Object} options
             */
            setCurrent: function (current, options) {
                options = options || {silent: false};

                if (current !== this.getCurrent()) {
                    sessionStorage.setItem('current_select_group_' + this.code, current);

                    if (!options.silent) {
                        this.trigger('group:change');
                        this.render();
                    }
                }
            },

            /**
             * Ensure default values for the current attribute group
             */
            ensureDefault: function () {
                if (_.isUndefined(this.getCurrent()) ||
                    !this.getElements()[this.getCurrent()]
                ) {
                    this.setCurrent(_.first(_.keys(this.getElements())), {silent: true});
                }
            },

            /**
             * Get the current attribute group
             *
             * @return {String}
             */
            getCurrentElement: function () {
                return this.getElements()[this.getCurrent()];
            },

            /**
             * Get all attribute groups
             *
             * @return {object}
             */
            getElements: function () {
                return this.elements;
            },

            /**
             * Increment count on attribute group for the given code
             *
             * @param {String} element
             * @param {String} code
             */
            addToBadge: function (element, code) {
                if (!this.badges[element]) {
                    this.badges[element] = {};
                }
                if (!this.badges[element][code]) {
                    this.badges[element][code] = 0;
                }

                this.badges[element][code]++;

                this.render();
            },

            /**
             * Remove badge for the given attribute group
             *
             * @param {String} element
             * @param {String} code
             */
            removeBadge: function (element, code) {
                delete this.badges[element][code];

                this.render();
            },

            /**
             * Remove badges for all attribute groups
             *
             * @param {String} code
             */
            removeBadges: function (code) {
                if (!code) {
                    this.badges = {};
                } else {
                    _.each(this.badges, function (badge) {
                        delete badge[code];
                    }.bind(this));
                }

                this.render();
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 333 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/common/properties/translation.js ***!
  \***********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Module used to display the localized properties of an object
 *
 * @author    Nicolas Dupont <nicolas@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/template/form/properties/translation */ 172)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        BaseForm,
        FetcherRegistry,
        template
    ) {
        return BaseForm.extend({
            className: 'tabsection translation-container',
            template: _.template(template),
            events: {
                'change .label-field': 'updateModel'
            },
            validationErrors: {},
            locales: null,

            /**
             * {@inheritdoc}
             */
            initialize: function (config) {
                this.config = config.config;

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            configure: function () {
                this.listenTo(
                    this.getRoot(),
                    'pim_enrich:form:entity:pre_save',
                    this.onPreSave
                );

                this.listenTo(
                    this.getRoot(),
                    'pim_enrich:form:entity:bad_request',
                    this.onValidationError
                );

                this.listenTo(
                    this.getRoot(),
                    'pim_enrich:form:entity:locales_updated',
                    this.onLocalesUpdated.bind(this)
                );

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * Pre save callback
             */
            onPreSave: function () {
                this.validationErrors = {};

                this.render();
            },

            /**
             * On validation callback
             *
             * @param {Event} event
             */
            onValidationError: function (event) {
                this.validationErrors = event.response.translations ? event.response.translations : {};

                this.render();
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                if (!this.locales) {
                    FetcherRegistry.getFetcher('locale')
                        .search({'activated': true, 'cached': true})
                        .then(function (locales) {
                            this.locales = locales;
                            this.render();
                        }.bind(this));
                }

                this.$el.html(this.template({
                    model: this.getFormData(),
                    locales: this.locales,
                    errors: this.validationErrors,
                    label: this.config.label,
                    fieldBaseId: this.config.fieldBaseId,
                    isReadOnly: false /* false as default default value */
                }));

                this.delegateEvents();

                this.renderExtensions();
            },

            /**
             * @param {Object} event
             */
            updateModel: function (event) {
                var data = this.getFormData();

                if (Array.isArray(data.labels)) {
                    data.labels = {};
                }

                data.labels[event.target.dataset.locale] = event.target.value;

                this.setData(data);
            },

            /**
             * Updates locales if were updated
             */
            onLocalesUpdated: function () {
                FetcherRegistry.getFetcher('locale')
                    .search({'activated': true, 'cached': false})
                    .then(function (locales) {
                        if (!_.isEqual(this.locales, locales)) {
                            this.locales = locales;

                            return this.render();
                        }

                    }.bind(this));
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 334 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/common/redirect.js ***!
  \*********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Redirect button
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! pim/router */ 11),
        __webpack_require__(/*! pim/common/property */ 151),
        __webpack_require__(/*! pim/template/form/redirect */ 260)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, __, BaseForm, Routing, router, propertyAccessor, template) {
        return BaseForm.extend({
            template: _.template(template),
            events: {
                'click': 'redirect'
            },

            /**
             * {@inheritdoc}
             */
            initialize: function (config) {
                this.config = config.config;

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                this.isVisible().then(function (isVisible) {
                    if (!isVisible) {
                        return this;
                    }

                    this.$el.html(this.template({
                        label: __(this.config.label),
                        iconName: this.config.iconName,
                        buttonClass: this.config.buttonClass || 'AknButton--action'
                    }));
                }.bind(this));

                return this;
            },

            /**
             * Redirect to the route given in the config
             */
            redirect: function () {
                router.redirect(this.getUrl());
            },

            /**
             * Get the route to redirect to
             *
             * @return {string}
             */
            getUrl: function () {
                var params = {};
                if (this.config.identifier) {
                    params[this.config.identifier.name] = propertyAccessor.accessProperty(
                        this.getFormData(),
                        this.config.identifier.path
                    );
                }

                return Routing.generate(this.config.route, params);
            },

            /**
             * Should this extension render
             *
             * @return {Promise}
             */
            isVisible: function () {
                return $.Deferred().resolve(true).promise();
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 335 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/generator/media-url-generator.js ***!
  \******************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! routing */ 4)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        Routing
    ) {
        return {
            /**
             * Get the show media URL
             *
             * @param string filePath
             * @param string filter
             *
             * @return {string}
             */
            getMediaShowUrl: function (filePath, filter) {
                var filename = encodeURIComponent(filePath);

                return Routing.generate('pim_enrich_media_show', {
                    filename: filename,
                    filter: filter
                });
            },

            /**
             * Get the download media URL
             *
             * @param string filePath
             *
             * @return {string}
             */
            getMediaDownloadUrl: function (filePath) {
                var filename = encodeURIComponent(filePath);

                return Routing.generate('pim_enrich_media_download', {
                    filename: filename
                });
            }
        };
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 336 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/common/edit/launch.js ***!
  \***********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Launch button
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! pim/router */ 11),
        __webpack_require__(/*! pim/common/property */ 151),
        __webpack_require__(/*! oro/messenger */ 16),
        __webpack_require__(/*! pim/template/export/common/edit/launch */ 208)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, __, BaseForm, Routing, router, propertyAccessor, messenger, template) {
        return BaseForm.extend({
            template: _.template(template),
            events: {
                'click': 'launch'
            },

            /**
             * {@inheritdoc}
             */
            initialize: function (config) {
                this.config = config.config;

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                this.isVisible().then(function (isVisible) {
                    if (!isVisible) {
                        return this;
                    }

                    this.$el.html(this.template({
                        label: __(this.config.label)
                    }));
                }.bind(this));

                return this;
            },

            /**
             * Launch the job
             */
            launch: function () {
                $.post(this.getUrl())
                    .then(function (response) {
                        router.redirect(response.redirectUrl);
                    })
                    .fail(function () {
                        messenger.notificationFlashMessage('error', __('pim_enrich.form.job_instance.fail.launch'));
                    });
            },

            /**
             * Get the route to launch the job
             *
             * @return {string}
             */
            getUrl: function () {
                var params = {};
                params[this.config.identifier.name] = propertyAccessor.accessProperty(
                    this.getFormData(),
                    this.config.identifier.path
                );

                return Routing.generate(this.config.route, params);
            },

            /**
             * Should this extension render
             *
             * @return {Promise}
             */
            isVisible: function () {
                return $.Deferred().resolve(true).promise();
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 337 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/product/edit/content/structure/attributes-selector.js ***!
  \*******************************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Attribute selector
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! pim/i18n */ 17),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/template/export/product/edit/content/structure/attributes-selector */ 218),
        __webpack_require__(/*! pim/template/export/product/edit/content/structure/attribute-list */ 217)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        __,
        Backbone,
        i18n,
        userContext,
        fetcherRegistry,
        template,
        attributeListTemplate
    ) {
        return Backbone.View.extend({
            events: {
                'click .attribute-groups li': 'changeAttributeGroup',
                'keyup .search-field': 'updateSearch',
                'click .clear': 'clear',
                'click .remove': 'removeAttribute'
            },
            search: '',
            curentFetchId: 0,
            attributeListPage: 1,
            isFetching: false,
            selected: [],
            currentGroup: null,
            template: _.template(template),
            attributeListTemplate: _.template(attributeListTemplate),

            initialize: function () {
                this.listenTo(this, 'selected:update:after', function (selected) {
                    this.$('.empty-message')
                        .addClass(0 === selected.length ? '' : 'AknMessageBox--hide')
                        .removeClass(0 === selected.length ? 'AknMessageBox--hide' : '');
                });
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                $.when(
                    fetcherRegistry.getFetcher('attribute-group').fetchAll(),
                    fetcherRegistry.getFetcher('attribute').fetchByIdentifiers(this.getSelected())
                ).then(function (attributeGroups, selectedAttributes) {
                    var scrollPositions = {};
                    _.each(this.$('[data-scroll-container]'), function (element) {
                        scrollPositions[element.dataset.scrollContainer] = element.scrollTop;
                    });
                    this.attributeListPage = 1;
                    this.isFetching        = false;

                    var attributeCount;
                    if (null === this.currentGroup) {
                        attributeCount = _.reduce(attributeGroups, function (count, attributeGroup) {
                            return count + attributeGroup.attributes.length;
                        }, 0);
                    } else {
                        attributeCount = _.findWhere(attributeGroups, {code: this.currentGroup}).attributes.length;
                    }

                    this.$el.empty().append(this.template({
                        __: __,
                        i18n: i18n,
                        userContext: userContext,
                        attributeGroups: attributeGroups,
                        attributeCount: attributeCount,
                        currentGroup: this.currentGroup,
                        selectedAttributes: selectedAttributes
                    }));

                    this.initializeSortable();

                    this.updateAttributeList().then(function () {
                        _.each(scrollPositions, function (scrollPosition, key) {
                            this.$('[data-scroll-container="' + key + '"]').scrollTop(scrollPosition);
                        }.bind(this));
                    }.bind(this));

                    this.$('.attributes div').on('scroll', this.updateAttributeList.bind(this));
                }.bind(this));
            },

            /**
             * Set currently selected attributes
             *
             * @param {array} selected
             */
            setSelected: function (selected) {
                this.selected = selected;

                this.trigger('selected:update:after', this.selected);
            },

            /**
             * Get currently selected attributes
             *
             * @return {array}
             */
            getSelected: function () {
                return this.selected;
            },

            /**
             * Change the current attribute group
             *
             * @param {event} event
             */
            changeAttributeGroup: function (event) {
                var newGroup = event.currentTarget.dataset.attributeGroupCode;
                newGroup = '' !== newGroup ? newGroup : null;
                this.search = '';

                this.currentGroup = newGroup;

                this.render();
            },

            /**
             * Called each time the user type a letter on the search field
             */
            updateSearch: function () {
                this.search            = this.$('.search-field').val();
                this.attributeListPage = 1;
                this.isFetching        = false;
                this.$('.attributes ul').empty();
                this.updateAttributeList();
            },

            /**
             * Clear the selected attributes
             */
            clear: function () {
                this.setSelected([]);
                this.search = '';

                this.render();
            },

            /**
             * Called on each render, each, search event and each scroll event
             */
            updateAttributeList: function () {
                var attributeContainer = this.$('.attributes > .AknColumnConfigurator-listContainer');
                var attributeList = attributeContainer.children('.AknVerticalList');

                var needFetching = 0 > (
                    attributeList.height() - attributeContainer.scrollTop() - 2 * attributeContainer.height()
                );

                if (needFetching && !this.isFetching) {
                    this.curentFetchId++;
                    var fetchId = Number(this.curentFetchId);
                    var searchOptions = {
                        search: this.search,
                        options: {
                            excluded_identifiers: this.getSelected(),
                            page: this.attributeListPage,
                            limit: 20
                        }
                    };

                    if (null !== this.currentGroup) {
                        searchOptions.options.attribute_groups = [this.currentGroup];
                    }

                    this.isFetching = true;

                    return fetcherRegistry
                        .getFetcher('attribute')
                        .search(searchOptions)
                        .then(function (attributes) {
                            attributes = _.filter(attributes, function (attribute) {
                                return attribute.type !== 'pim_catalog_identifier';
                            });

                            if (fetchId !== this.curentFetchId) {
                                return;
                            }
                            attributeList.append(this.attributeListTemplate({
                                    attributes: attributes,
                                    i18n: i18n,
                                    userContext: userContext
                                })
                            );

                            if (0 !== attributes.length) {
                                this.attributeListPage++;
                                this.isFetching = false;
                            }
                        }.bind(this));
                }
            },

            /**
             * Called to initialize the dropzones
             */
            initializeSortable: function () {
                this.$('.attributes ul, .selected-attributes ul').sortable({
                    connectWith: '.attributes ul, .selected-attributes ul',
                    containment: this.$el,
                    tolerance: 'pointer',
                    cursor: 'move',
                    stop: function () {
                        this.setSelected(_.map(this.$('.selected-attributes li'), function (element) {
                            return element.dataset.attributeCode;
                        }));
                    }.bind(this)
                }).disableSelection();
            },

            /**
             * Remove the clicked row from the selected attributes
             *
             * @param {event} event
             */
            removeAttribute: function (event) {
                var element = $(event.currentTarget).parents('li');
                var selectedAttributes = this.getSelected();

                selectedAttributes = _.without(selectedAttributes, element.data('attributeCode'));

                this.setSelected(selectedAttributes);

                this.$('.attributes > div ul').append(element);
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 338 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/manager/group-manager.js ***!
  \**********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! module-config */ 21), __webpack_require__(/*! jquery */ 1), __webpack_require__(/*! underscore */ 0), __webpack_require__(/*! pim/fetcher-registry */ 10)], __WEBPACK_AMD_DEFINE_RESULT__ = function (module, $, _, FetcherRegistry) {
    return {
        getProductGroups: function (product) {
            var promises = _.map(product.groups, function (groupCode) {
                return FetcherRegistry.getFetcher('group').fetch(groupCode);
            });

            if (product.variant_group) {
                promises.push(FetcherRegistry.getFetcher('variant-group').fetch(product.variant_group));
            }

            return $.when.apply($, promises).then(function () {
                return _.toArray(arguments);
            });
        }
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 339 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/manager/variant-group-manager.js ***!
  \******************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! module-config */ 21),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! pim/attribute-manager */ 153),
        __webpack_require__(/*! pim/fetcher-registry */ 10)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        module,
        mediator,
        Routing,
        AttributeManager,
        FetcherRegistry
    ) {
        return {
            productValues: null,
            doGenerateMissing: function (variantGroup) {
                return AttributeManager.getAttributes(variantGroup)
                    .then(function (productAttributeCodes) {
                        return $.when(
                            FetcherRegistry.getFetcher('attribute').fetchByIdentifiers(productAttributeCodes),
                            FetcherRegistry.getFetcher('locale').fetchActivated(),
                            FetcherRegistry.getFetcher('channel').fetchAll(),
                            FetcherRegistry.getFetcher('currency').fetchAll()
                        );
                    })
                    .then(function (attributes, locales, channels, currencies) {
                        var oldValues = {};
                        var newValues = {};

                        if (!_.isArray(variantGroup.values)) {
                            oldValues = variantGroup.values;
                        }

                        _.each(attributes, function (attribute) {
                            newValues[attribute.code] = AttributeManager.generateMissingValues(
                                _.has(oldValues, attribute.code) ? oldValues[attribute.code] : [],
                                attribute,
                                locales,
                                channels,
                                currencies
                            );
                        });

                        variantGroup.values = newValues;

                        return variantGroup;
                    });
            },
            generateMissing: function (product) {
                return this.doGenerateMissing(product);
            }
        };
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 340 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/pim-optionform.js ***!
  \***************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1), __webpack_require__(/*! pim/dialogform */ 190), __webpack_require__(/*! oro/messenger */ 16), __webpack_require__(/*! pim/initselect2 */ 30), __webpack_require__(/*! jquery.select2 */ 29)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, DialogForm, messenger, initSelect2) {
        'use strict';

        var init = function (fieldId) {
            var $field = $(fieldId);
            var $target = $field.parent().find('.icons-container').first();
            if ($target.length) {
                $field.insertBefore($target).attr('tabIndex', -1);
            }
            var callback = function (data) {
                if (data.status) {
                    var $select = $field.siblings('input.pim-ajax-entity');
                    var selectData = { id: data.option.id, text: data.option.label };
                    if ($select.attr('data-multiple')) {
                        selectData = (function (newElement) {
                            var selectData = $select.select2('data');
                            selectData.push(newElement);

                            return selectData;
                        })(selectData);
                    }
                    $select.select2('destroy');
                    initSelect2.initSelect($select);
                    $select.trigger('change');
                    $select.select2('data', selectData);
                    messenger.notificationFlashMessage('success', $field.data('success-message'));
                } else {
                    messenger.notificationFlashMessage('error', $field.data('error-message'));
                }
            };
            new DialogForm(fieldId, callback);
        };

        return {
            init: init
        };
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 341 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/field/multi-select-field.js ***!
  \*********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Multi select field
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! pim/field */ 152),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/template/product/field/multi-select */ 289),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! pim/attribute-option/create */ 178),
        __webpack_require__(/*! pim/security-context */ 31),
        __webpack_require__(/*! pim/initselect2 */ 30),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! pim/i18n */ 17),
        __webpack_require__(/*! pim/attribute-manager */ 153)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        Field,
        _,
        fieldTemplate,
        Routing,
        createOption,
        SecurityContext,
        initSelect2,
        UserContext,
        i18n,
        AttributeManager
    ) {
        return Field.extend({
            fieldTemplate: _.template(fieldTemplate),
            choicePromise: null,
            promiseIdentifiers: null,
            events: {
                'change .field-input:first input.select-field': 'updateModel',
                'click .add-attribute-option': 'createOption'
            },

            /**
             * {@inheritdoc}
             */
            getTemplateContext: function () {
                return Field.prototype.getTemplateContext.apply(this, arguments).then(function (templateContext) {
                    var isAllowed = SecurityContext.isGranted('pim_enrich_attribute_edit');
                    templateContext.userCanAddOption = this.editable && isAllowed;

                    return templateContext;
                }.bind(this));
            },

            /**
             * Create a new option for this multi select field
             */
            createOption: function () {
                if (!SecurityContext.isGranted('pim_enrich_attribute_edit')) {
                    return;
                }
                createOption(this.attribute).then(function (option) {
                    if (this.isEditable()) {
                        var value = this.getCurrentValue().data;
                        value.push(option.code);
                        this.setCurrentValue(value);
                    }

                    this.choicePromise = null;
                    this.render();
                }.bind(this));
            },

            /**
             * {@inheritdoc}
             */
            renderInput: function (context) {
                return this.fieldTemplate(context);
            },

            /**
             * {@inheritdoc}
             */
            postRender: function () {
                this.$('[data-toggle="tooltip"]').tooltip();
                this.getChoiceUrl().then(function (choiceUrl) {
                    var options = {
                        ajax: {
                            url: choiceUrl,
                            quietMillis: 250,
                            cache: true,
                            data: function (term, page) {
                                return {
                                    search: term,
                                    options: {
                                        limit: 20,
                                        page: page
                                    }
                                };
                            }.bind(this),
                            results: function (response) {
                                if (response.results) {
                                    response.more = 20 === _.keys(response.results).length;

                                    return response;
                                }

                                var data = {
                                    more: 20 === _.keys(response).length,
                                    results: []
                                };
                                _.each(response, function (value) {
                                    data.results.push(this.convertBackendItem(value));
                                }.bind(this));

                                return data;
                            }.bind(this)
                        },
                        initSelection: function (element, callback) {
                            var identifiers = AttributeManager.getValue(
                                this.model.attributes.values,
                                this.attribute,
                                UserContext.get('catalogLocale'),
                                UserContext.get('catalogScope')
                            ).data;

                            if (null === this.choicePromise || this.promiseIdentifiers !== identifiers) {
                                this.choicePromise = $.get(choiceUrl, {
                                    options: {
                                        identifiers: identifiers
                                    }
                                });
                                this.promiseIdentifiers = identifiers;
                            }

                            this.choicePromise.then(function (results) {
                                if (_.has(results, 'results')) {
                                    results = results.results;
                                }

                                var choices = _.map($(element).val().split(','), function (choice) {
                                    var option = _.findWhere(results, {code: choice});
                                    if (option) {
                                        return this.convertBackendItem(option);
                                    }

                                    return _.findWhere(results, {id: choice});
                                }.bind(this));
                                callback(_.compact(choices));
                            }.bind(this));
                        }.bind(this),
                        multiple: true
                    };

                    initSelect2.init(this.$('input.select-field'), options);
                }.bind(this));
            },

            /**
             * Get the URL to retrieve the choice list for this select field
             *
             * @returns {Promise}
             */
            getChoiceUrl: function () {
                return $.Deferred().resolve(
                    Routing.generate(
                        'pim_enrich_attributeoption_get',
                        {
                            identifier: this.attribute.code
                        }
                    )
                ).promise();
            },

            /**
             * {@inheritdoc}
             */
            updateModel: function () {
                var data = this.$('.field-input:first input.select-field').val().split(',');
                if (1 === data.length && '' === data[0]) {
                    data = [];
                }

                this.choicePromise = null;

                this.setCurrentValue(data);
            },

            /**
             * Convert the item returned from the backend to fit select2 needs
             *
             * @param {object} item
             *
             * @return {object}
             */
            convertBackendItem: function (item) {
                return {
                    id: item.code,
                    text: i18n.getLabel(item.labels, UserContext.get('catalogLocale'), item.code)
                };
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 342 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/field/simple-select-field.js ***!
  \**********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Simple select field
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! pim/field */ 152),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/template/product/field/simple-select */ 292),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! pim/attribute-option/create */ 178),
        __webpack_require__(/*! pim/security-context */ 31),
        __webpack_require__(/*! pim/initselect2 */ 30),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! pim/i18n */ 17)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, Field, _, fieldTemplate, Routing, createOption, SecurityContext, initSelect2, UserContext, i18n) {
        return Field.extend({
            fieldTemplate: _.template(fieldTemplate),
            choicePromise: null,
            promiseIdentifier: null,
            events: {
                'change .field-input:first input[type="hidden"].select-field': 'updateModel',
                'click .add-attribute-option': 'createOption'
            },

            /**
             * {@inheritdoc}
             */
            getTemplateContext: function () {
                return Field.prototype.getTemplateContext.apply(this, arguments).then(function (templateContext) {
                    var isAllowed = SecurityContext.isGranted('pim_enrich_attribute_edit');
                    templateContext.userCanAddOption = this.editable && isAllowed;

                    return templateContext;
                }.bind(this));
            },

            /**
             * Create a new option for this simple select field
             */
            createOption: function () {
                if (!SecurityContext.isGranted('pim_enrich_attribute_edit')) {
                    return;
                }

                createOption(this.attribute).then(function (option) {
                    if (this.isEditable()) {
                        this.setCurrentValue(option.code);
                    }

                    this.choicePromise = null;
                    this.render();
                }.bind(this));
            },

            /**
             * {@inheritdoc}
             */
            renderInput: function (context) {
                return this.fieldTemplate(context);
            },

            /**
             * {@inheritdoc}
             */
            postRender: function () {
                this.$('[data-toggle="tooltip"]').tooltip();
                this.getChoiceUrl().then(function (choiceUrl) {
                    var options = {
                        ajax: {
                            url: choiceUrl,
                            cache: true,
                            data: function (term, page) {
                                return {
                                    search: term,
                                    options: {
                                        limit: 20,
                                        page: page
                                    }
                                };
                            },
                            results: function (response) {
                                if (response.results) {
                                    response.more = 20 === _.keys(response.results).length;

                                    return response;
                                }

                                var data = {
                                    more: 20 === _.keys(response).length,
                                    results: []
                                };
                                _.each(response, function (value) {
                                    data.results.push(this.convertBackendItem(value));
                                }.bind(this));

                                return data;
                            }.bind(this)
                        },
                        initSelection: function (element, callback) {
                            var id = $(element).val();
                            if ('' !== id) {
                                if (null === this.choicePromise || this.promiseIdentifier !== id) {
                                    this.choicePromise = $.get(choiceUrl, {options: {identifiers: [id]}});
                                    this.promiseIdentifier = id;
                                }

                                this.choicePromise.then(function (response) {
                                    var selected = _.findWhere(response, {code: id});

                                    if (!selected) {
                                        selected = _.findWhere(response.results, {id: id});
                                    } else {
                                        selected = this.convertBackendItem(selected);
                                    }
                                    callback(selected);
                                }.bind(this));
                            }
                        }.bind(this),
                        placeholder: ' ',
                        allowClear: true
                    };

                    initSelect2.init(this.$('input.select-field'), options);
                }.bind(this));
            },

            /**
             * Get the URL to retrieve the choice list for this select field
             *
             * @returns {Promise}
             */
            getChoiceUrl: function () {
                return $.Deferred().resolve(
                    Routing.generate(
                        'pim_enrich_attributeoption_get',
                        {
                            identifier: this.attribute.code
                        }
                    )
                ).promise();
            },

            /**
             * {@inheritdoc}
             */
            updateModel: function () {
                var data = this.$('.field-input:first input[type="hidden"].select-field').val();
                data = '' === data ? this.attribute.empty_value : data;

                this.choicePromise = null;

                this.setCurrentValue(data);
            },

            /**
             * Convert the item returned from the backend to fit select2 needs
             *
             * @param {object} item
             *
             * @return {object}
             */
            convertBackendItem: function (item) {
                return {
                    id: item.code,
                    text: i18n.getLabel(item.labels, UserContext.get('catalogLocale'), item.code)
                };
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 343 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/form/attributes/add-select/attribute/line.js ***!
  \**************************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Prodct add attribute select line view
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/common/add-select/line */ 180),
        __webpack_require__(/*! pim/template/product/add-select/attribute/line */ 294)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        BaseLine,
        template
    ) {
        return BaseLine.extend({
            template: _.template(template)
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 344 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/form/attributes/validation-error.js ***!
  \*****************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Validation error extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! pim/template/product/tab/attribute/validation-error */ 310),
        __webpack_require__(/*! pim/i18n */ 17)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, Backbone, template, i18n) {
        return Backbone.View.extend({
            template: _.template(template),
            className: 'AknFieldContainer-validationErrors validation-errors',
            events: {
                'click .change-context': 'changeContext'
            },
            initialize: function (errors, parent) {
                this.errors = errors;
                this.parent = parent;
            },
            render: function () {
                this.$el.html(this.template({errors: this.errors, i18n: i18n}));
                this.delegateEvents();

                return this;
            },
            changeContext: function (event) {
                this.parent.changeContext(event.currentTarget.dataset.locale, event.currentTarget.dataset.scope);
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 345 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/form/locale-switcher.js ***!
  \*****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Locale switcher extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/product/locale-switcher */ 295),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/i18n */ 17)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, BaseForm, template, FetcherRegistry, i18n) {
        return BaseForm.extend({
            template: _.template(template),
            className: 'AknDropdown AknButtonList-item locale-switcher',
            events: {
                'click li a': 'changeLocale'
            },
            render: function () {
                this.getDisplayedLocales()
                    .done(function (locales) {
                        var params = { localeCode: _.first(locales).code };
                        this.trigger('pim_enrich:form:locale_switcher:pre_render', params);

                        this.$el.html(
                            this.template({
                                locales: locales,
                                currentLocale: _.findWhere(locales, {code: params.localeCode}),
                                i18n: i18n
                            })
                        );
                        this.delegateEvents();
                    }.bind(this));

                return this;
            },

            /**
             * Retrieve locales to display in the locale switcher
             *
             * @returns {Promise}
             */
            getDisplayedLocales: function () {
                return FetcherRegistry.getFetcher('locale').fetchActivated();
            },

            /**
             * Method triggered on the 'change locale' event
             *
             * @param {Object} event
             */
            changeLocale: function (event) {
                this.trigger('pim_enrich:form:locale_switcher:change', {
                    localeCode: event.currentTarget.dataset.locale
                });

                this.render();
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 346 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/form/scope-switcher.js ***!
  \****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Scope switcher extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/product/scope-switcher */ 305),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! pim/i18n */ 17)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, BaseForm, template, FetcherRegistry, UserContext, i18n) {
        return BaseForm.extend({
            template: _.template(template),
            className: 'AknDropdown AknButtonList-item scope-switcher',
            events: {
                'click li a': 'changeScope'
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                FetcherRegistry.getFetcher('channel')
                    .fetchAll()
                    .then(function (channels) {
                        var params = { scopeCode: channels[0].code };
                        this.trigger('pim_enrich:form:scope_switcher:pre_render', params);

                        var scope = _.findWhere(channels, { code: params.scopeCode });

                        this.$el.html(
                            this.template({
                                channels: channels,
                                currentScope: i18n.getLabel(
                                    scope.labels,
                                    UserContext.get('catalogLocale'),
                                    scope.code
                                ),
                                catalogLocale: UserContext.get('catalogLocale'),
                                i18n: i18n
                            })
                        );

                        this.delegateEvents();
                    }.bind(this)
                );

                return this;
            },

            /**
             * Set the current selected scope
             *
             * @param {Event} event
             */
            changeScope: function (event) {
                this.trigger('pim_enrich:form:scope_switcher:change', {
                    scopeCode: event.currentTarget.dataset.scope
                });

                this.render();
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 347 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/remover/association-type-remover.js ***!
  \*********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Module to remove association type
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/remover/base */ 155),
        __webpack_require__(/*! module-config */ 21),
        __webpack_require__(/*! routing */ 4)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        BaseRemover,
        module,
        Routing
    ) {
        return _.extend({}, BaseRemover, {
            /**
             * {@inheritdoc}
             */
            getUrl: function (code) {
                return Routing.generate(module.config().url, {code: code});
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 348 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/remover/channel.js ***!
  \****************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Module to remove channel
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/remover/base */ 155),
        __webpack_require__(/*! module-config */ 21),
        __webpack_require__(/*! routing */ 4)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        BaseRemover,
        module,
        Routing
    ) {
        return _.extend({}, BaseRemover, {
            /**
             * {@inheritdoc}
             */
            getUrl: function (code) {
                return Routing.generate(module.config().url, {code: code});
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 349 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/remover/family.js ***!
  \***************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Module to remove family
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/remover/base */ 155),
        __webpack_require__(/*! module-config */ 21),
        __webpack_require__(/*! routing */ 4)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        BaseRemover,
        module,
        Routing
    ) {
        return _.extend({}, BaseRemover, {
            /**
             * {@inheritdoc}
             */
            getUrl: function (code) {
                return Routing.generate(module.config().url, {code: code});
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 350 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/remover/group-remover.js ***!
  \**********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Module to remove product group
 *
 * @author    Nicolas Dupont <nicolas@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/remover/base */ 155),
        __webpack_require__(/*! module-config */ 21),
        __webpack_require__(/*! routing */ 4)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        BaseRemover,
        module,
        Routing
    ) {
        return _.extend({}, BaseRemover, {
            /**
             * {@inheritdoc}
             */
            getUrl: function (code) {
                return Routing.generate(module.config().url, {code: code});
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 351 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/remover/group-type-remover.js ***!
  \***************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Module to remove group type
 *
 * @author    Tamara Robichet <tamara.robichet@akeneo.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/remover/base */ 155),
        __webpack_require__(/*! module-config */ 21),
        __webpack_require__(/*! routing */ 4)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        BaseRemover,
        module,
        Routing
    ) {
        return _.extend({}, BaseRemover, {
            /**
             * Gets url in configuration for remover module
             *
             * @param {String} code Code for group type entity
             *
             * {@inheritdoc}
             */
            getUrl: function (code) {
                return Routing.generate(module.config().url, {code: code});
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 352 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/remover/job-instance-export-remover.js ***!
  \************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Module to remove job instance
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/remover/base */ 155),
        __webpack_require__(/*! module-config */ 21),
        __webpack_require__(/*! routing */ 4)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        BaseRemover,
        module,
        Routing
    ) {
        return _.extend({}, BaseRemover, {
            /**
             * {@inheritdoc}
             */
            getUrl: function (code) {
                return Routing.generate(module.config().url, {identifier: code});
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 353 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/remover/job-instance-import-remover.js ***!
  \************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Module to remove job instance
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/remover/base */ 155),
        __webpack_require__(/*! module-config */ 21),
        __webpack_require__(/*! routing */ 4)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        BaseRemover,
        module,
        Routing
    ) {
        return _.extend({}, BaseRemover, {
            /**
             * {@inheritdoc}
             */
            getUrl: function (code) {
                return Routing.generate(module.config().url, {identifier: code});
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 354 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/remover/product-remover.js ***!
  \************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/remover/base */ 155),
        __webpack_require__(/*! module-config */ 21),
        __webpack_require__(/*! routing */ 4)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        BaseRemover,
        module,
        Routing
    ) {
        return _.extend({}, BaseRemover, {
            /**
             * {@inheritdoc}
             */
            getUrl: function (id) {
                return Routing.generate(module.config().url, {id: id});
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 355 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/remover/variant-group-remover.js ***!
  \******************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/remover/base */ 155),
        __webpack_require__(/*! module-config */ 21),
        __webpack_require__(/*! routing */ 4)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        BaseRemover,
        module,
        Routing
    ) {
        return _.extend({}, BaseRemover, {
            /**
             * {@inheritdoc}
             */
            getUrl: function (code) {
                return Routing.generate(module.config().url, {code: code});
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 356 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/saver/channel.js ***!
  \**************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Module to save channel
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/saver/base */ 157),
        __webpack_require__(/*! module-config */ 21),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! jquery */ 1)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        BaseSaver,
        module,
        Routing,
        mediator,
        $
    ) {
        return _.extend({}, BaseSaver, {
            /**
             * {@inheritdoc}
             */
            getUrl: function (code) {
                if (null === code) {
                    return Routing.generate(module.config().postUrl);
                }

                return Routing.generate(module.config().putUrl, {code: code});
            },

            /**
             * {@inheritdoc}
             */
            save: function (code, data, method) {
                var queryData = data;
                var locales = [];

                _.each(data.locales, function (locale) {
                    locales.push(locale.code);
                });

                queryData.locales = locales;

                return $.ajax({
                    type: method,
                    url: this.getUrl(code),
                    data: JSON.stringify(queryData)
                }).then(function (entity) {
                    mediator.trigger('pim_enrich:form:entity:post_save', entity);

                    return entity;
                }.bind(this));
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 357 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/saver/entity-saver.js ***!
  \*******************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Module to save group type
 *
 * @author    Tamara Robichet <tamara.robichet@akeneo.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/saver/base */ 157),
        __webpack_require__(/*! module-config */ 21),
        __webpack_require__(/*! routing */ 4)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        BaseSaver,
        module,
        Routing
    ) {
        return _.extend({}, BaseSaver, {
            /**
             * {@inheritdoc}
             */
            getUrl: function (code) {
                return Routing.generate(this.url, { code: code });
            },

            /**
             * Sets the url
             *
             * @param {Sringt} url Route url
             */
            setUrl: function (url) {
                this.url = url;

                return this;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 358 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/saver/family.js ***!
  \*************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Module to save family
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/saver/base */ 157),
        __webpack_require__(/*! module-config */ 21),
        __webpack_require__(/*! routing */ 4)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        BaseSaver,
        module,
        Routing
    ) {
        return _.extend({}, BaseSaver, {
            /**
             * {@inheritdoc}
             */
            getUrl: function (code) {
                return Routing.generate(module.config().putUrl, {code: code});
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 359 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/saver/group-saver.js ***!
  \******************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Module to save product group
 *
 * @author    Nicolas Dupont <nicolas@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/saver/base */ 157),
        __webpack_require__(/*! module-config */ 21),
        __webpack_require__(/*! routing */ 4)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        BaseSaver,
        module,
        Routing
    ) {
        return _.extend({}, BaseSaver, {
            /**
             * {@inheritdoc}
             */
            getUrl: function (code) {
                return Routing.generate(module.config().url, {code: code});
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 360 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/saver/job-instance-export-saver.js ***!
  \********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Module to save job instance
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/saver/base */ 157),
        __webpack_require__(/*! module-config */ 21),
        __webpack_require__(/*! routing */ 4)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        BaseSaver,
        module,
        Routing
    ) {
        return _.extend({}, BaseSaver, {
            /**
             * {@inheritdoc}
             */
            getUrl: function (identifier) {
                return Routing.generate(module.config().url, {identifier: identifier});
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 361 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/saver/job-instance-import-saver.js ***!
  \********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Module to save job instance
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/saver/base */ 157),
        __webpack_require__(/*! module-config */ 21),
        __webpack_require__(/*! routing */ 4)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        BaseSaver,
        module,
        Routing
    ) {
        return _.extend({}, BaseSaver, {
            /**
             * {@inheritdoc}
             */
            getUrl: function (identifier) {
                return Routing.generate(module.config().url, {identifier: identifier});
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 362 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/saver/product-saver.js ***!
  \********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/saver/base */ 157),
        __webpack_require__(/*! module-config */ 21),
        __webpack_require__(/*! routing */ 4)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        BaseSaver,
        module,
        Routing
    ) {
        return _.extend({}, BaseSaver, {
            /**
             * {@inheritdoc}
             */
            getUrl: function (id) {
                return Routing.generate(module.config().url, {id: id});
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 363 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/saver/variant-group-saver.js ***!
  \**************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/saver/base */ 157),
        __webpack_require__(/*! module-config */ 21),
        __webpack_require__(/*! routing */ 4)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        BaseSaver,
        module,
        Routing
    ) {
        return _.extend({}, BaseSaver, {
            /**
             * {@inheritdoc}
             */
            getUrl: function (code) {
                return Routing.generate(module.config().url, {code: code});
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 364 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/tree-associate.jstree.js ***!
  \**********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1), __webpack_require__(/*! underscore */ 0), __webpack_require__(/*! routing */ 4), __webpack_require__(/*! oro/mediator */ 6), __webpack_require__(/*! jquery.jstree */ 49)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, Routing, mediator) {
        'use strict';

        return function (elementId, hiddenCategoryId, routes) {
            var $el = $(elementId);
            if (!$el || !$el.length || !_.isObject($el)) {
                return;
            }
            var self         = this;
            var currentTree  = -1;
            var id           = $el.attr('data-id');
            var selectedTree = $el.attr('data-selected-tree');
            var dataLocale   = $el.attr('data-datalocale');
            var locked       = false;

            this.config = {
                core: {
                    animation: 200,
                    html_titles: true,
                    strings: { loading:  _.__('jstree.loading') }
                },
                plugins: [
                    'themes',
                    'json_data',
                    'ui',
                    'types',
                    'checkbox'
                ],
                checkbox: {
                    two_state: true,
                    real_checkboxes: true,
                    override_ui: true,
                    real_checkboxes_names: function (n) {
                        return ['category_' + n[0].id, 1];
                    }
                },
                themes: {
                    dots: true,
                    icons: true
                },
                json_data: {
                    ajax: {
                        url: function (node) {
                            var treeHasItem = $('#tree-link-' + currentTree).hasClass('tree-has-item');

                            if ((!node || (node === -1)) && treeHasItem) {
                                // First load of the tree: get the checked categories
                                var selected = this.parseHiddenCategories();

                                return Routing.generate(
                                    routes.list_categories,
                                    {
                                        id: id,
                                        categoryId: currentTree,
                                        _format: 'json',
                                        dataLocale: dataLocale,
                                        context: 'associate',
                                        selected: selected
                                    }
                                );
                            }

                            return Routing.generate(
                                routes.children,
                                {
                                    _format: 'json',
                                    dataLocale: dataLocale,
                                    context: 'associate'
                                }
                            );
                        }.bind(this),
                        data: function (node) {
                            var data           = {};
                            var treeHasItem = $('#tree-link-' + currentTree).hasClass('tree-has-item');

                            if (node && node !== -1 && node.attr) {
                                data.id = node.attr('id').replace('node_', '');
                            } else {
                                if (!treeHasItem) {
                                    data.id = currentTree;
                                }
                                data.include_parent = 'true';
                            }

                            return data;
                        },
                        complete: function () {
                            // Disable the root checkbox
                            $('.jstree-root>input.jstree-real-checkbox').attr('disabled', 'disabled');
                            // Lock the loaded tree if the state is locked
                            if (locked) {
                                this.lock();
                            }
                        }
                    }
                },
                types: {
                    max_depth: -2,
                    max_children: -2,
                    valid_children: ['folder'],
                    types: {
                        'default': {
                            valid_children: 'folder'
                        }
                    }
                },
                ui: {
                    select_limit: 1,
                    select_multiple_modifier: false
                }
            };

            this.switchTree = function (treeId) {
                currentTree = treeId;
                var $tree = $('#tree-' + treeId);

                $('#trees').find('> div').hide();
                $('#trees-list').find('li').removeClass('active');
                $('#tree-link-' + treeId).parent().addClass('active');

                $('.tree[data-tree-id=' + treeId + ']').show();
                $tree.show();
                $('#tree-link-' + treeId).trigger('shown');

                // If empty, load the associated jstree
                if ($tree.children('ul').size() === 0) {
                    self.initTree(treeId);
                }
            };

            this.initTree = function (treeId) {
                var $tree = $('#tree-' + treeId);
                $tree.jstree(self.config);

                $tree.bind('check_node.jstree', function (e, d) {
                    if (d.inst.get_checked() && $(d.rslt.obj[0]).hasClass('jstree-root') === false) {
                        var selected = this.parseHiddenCategories();
                        var id = d.rslt.obj[0].id.replace('node_', '');
                        if ($.inArray(id, selected) < 0) {
                            selected.push(id);
                            selected = $.unique(selected);
                            selected = selected.join(',');
                            $(hiddenCategoryId).val(selected).trigger('change');
                            var treeId = e.target.id;
                            var treeLinkId = treeId.replace('-', '-link-');
                            $('#' + treeLinkId + ' i').addClass('AknAcl-icon--granted');
                        }
                    }
                }.bind(this));

                $tree.bind('uncheck_node.jstree', function (e, d) {
                    if (d.inst.get_checked()) {
                        var selected = this.parseHiddenCategories();
                        var id = d.rslt.obj[0].id.replace('node_', '');
                        selected.splice($.inArray(id, selected), 1);
                        selected = selected.join(',');
                        $(hiddenCategoryId).val(selected).trigger('change');
                        var treeId = e.target.id;
                        if ($('#' + treeId).jstree('get_checked').length === 0) {
                            var treeLinkId = treeId.replace('-', '-link-');
                            $('#' + treeLinkId + ' i').removeClass('AknAcl-icon--granted');
                        }
                    }
                }.bind(this));
            };

            var setLocked = function () {
                $('#trees-list').find('a').each(function () {
                    var ref = $.jstree._reference(this.id.replace('tree-link-', '#tree-'));
                    if (ref) {
                        if (locked) {
                            ref.lock();
                        } else {
                            ref.unlock();
                        }
                    }
                });
            };

            this.lock = function () {
                locked = true;
                setLocked();
            };

            this.unlock = function () {
                locked = false;
                setLocked();
            };

            this.bindEvents = function () {
                $('#trees-list').on('click', 'a', function () {
                    self.switchTree(this.id.replace('tree-link-', ''));
                });
                mediator.on('jstree:lock', this.lock);
                mediator.on('jstree:unlock', this.unlock);
            };

            /**
             * @return {Array}
             */
            this.parseHiddenCategories = function () {
                var hiddenValue = $(hiddenCategoryId).val();

                return hiddenValue.length > 0 ? hiddenValue.split(',') : [];
            };

            this.init = function () {
                self.switchTree(selectedTree);
                self.bindEvents();
            };

            this.init();
        };
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 365 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************************************!*\
  !*** ./src/Pim/Bundle/NavigationBundle/Resources/public/js/navigation/dotmenu/item-view.js ***!
  \*********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1), __webpack_require__(/*! underscore */ 0), __webpack_require__(/*! backbone */ 2)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, _, Backbone) {
    'use strict';

    /**
     * @export  oro/navigation/dotmenu/item-view
     * @class   oro.navigation.dotmenu.ItemView
     * @extends Backbone.View
     */
    return Backbone.View.extend({
        tagName:  'li',

        template: _.template($('#template-dot-menu-item').html()),

        events: {
            'click .close': 'close',
            'click span': 'activate'
        },

        initialize: function() {
            this.listenTo(this.model, 'destroy', this.remove);
        },

        activate: function(e) {
            var el = Backbone.$(e.currentTarget);
            window.location.href = el.data('url');
        },

        close: function() {
            this.model.destroy({wait: true});
        },

        render: function() {
            this.$el.html(
                this.template(this.model.toJSON())
            );
            if (this.model.get('url') ===  window.location.pathname) {
                this.$el.addClass('active');
            }
            return this;
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 366 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************!*\
  !*** ./src/Pim/Bundle/NavigationBundle/Resources/public/js/navigation/dotmenu/view.js ***!
  \****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global define */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1), __webpack_require__(/*! underscore */ 0), __webpack_require__(/*! backbone */ 2), __webpack_require__(/*! oro/mediator */ 6), __webpack_require__(/*! oro/navigation/dotmenu/item-view */ 365)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, _, Backbone, mediator, DotmenuItemView) {
    'use strict';

    /**
     * @export  oro/navigation/dotmenu/view
     * @class   oro.navigation.dotmenu.View
     * @extends Backbone.View
     */
    return Backbone.View.extend({
        options: {
            el: '.pin-menus .tabbable',
            defaultTabOptions: {
                hideOnEmpty: false
            }
        },
        tabs: {},

        templates: {
            tab: _.template($("#template-dot-menu-tab").html()),
            content: _.template($("#template-dot-menu-tab-content").html()),
            emptyMessage: _.template($("#template-dot-menu-empty-message").html())
        },

        initialize: function() {
            this.$tabsContainer = this.$('.pin-menus .nav-tabs');
            this.$tabsContent = this.$('.pin-menus .tab-content');
            this.init();
            mediator.bind(
                "hash_navigation_request:complete",
                function() {
                    this.init();
                },
                this
            );
            mediator.bind(
                "tab:changed",
                function(tabId) {
                    this.chooseActiveTab(tabId);
                },
                this
            );
            this.chooseActiveTab();
        },

        init: function() {
            this.$tabsContent.find('.menu-close').click(_.bind(this.close, this));
        },

        addTab: function(options) {
            var data = _.extend(this.options.defaultTabOptions, options);

            data.$tab = this.$('#' + data.key + '-tab');
            if (!data.$tab.length) {
                data.$tab = $(this.templates.tab(data));
                this.$tabsContainer.append(data.$tab);
            }

            data.$tabContent = this.$('#' + data.key + '-content');
            if (!data.$tabContent.length) {
                data.$tabContent = $(this.templates.content(data));
                this.$tabsContent.append(data.$tabContent);
            }

            data.$tabContentContainer = data.$tabContent.find('ul');
            this.tabs[data.key] = _.clone(data);
        },

        getTab: function(key) {
            return this.tabs[key];
        },

        addTabItem: function(tabKey, item, prepend) {
            if (this.isTabEmpty(tabKey)) {
                this.cleanup(tabKey);
            }
            var el = null;
            if (_.isElement(item)) {
                el = item;
            } else if (_.isObject(item)) {
                if (!_.isFunction(item.render)) {
                    item = new DotmenuItemView({model: item});
                }
                el = item.render().$el;
            }

            if (el) {
                if (prepend) {
                    this.getTab(tabKey).$tabContentContainer.prepend(el);
                } else {
                    this.getTab(tabKey).$tabContentContainer.append(el);
                }
            }
            /**
             * Backbone event. Fired when item is added to menu
             * @event navigation_item:added
             */
            mediator.trigger("navigation_item:added", el);
        },

        cleanup: function(tabKey) {
            this.getTab(tabKey).$tabContentContainer.empty();
        },

        checkTabContent: function(tabKey) {
            var isEmpty = this.isTabEmpty(tabKey);
            if (isEmpty) {
                this.hideTab(tabKey);
            } else {
                this.showTab(tabKey);
            }
        },

        /**
         * Checks if first tab in 3 dots menu is empty
         *
         * @return {Boolean}
         */
        isFirstTabEmpty: function() {
            var children = this.$tabsContent.children();
            return children && children.first().size() &&
                (!children.first().html().trim() ||
                !children.first().find('ul').html());
        },

        /**
         * Set default tab as active based on config class
         */
        setDefaultNonEmptyTab: function() {
            this.$('.show-if-empty a').tab('show');
        },

        /**
         * Set active dots menu tab.
         *
         * @param tabId
         */
        chooseActiveTab: function(tabId) {
            if (_.isUndefined(tabId)) {
                if (this.isFirstTabEmpty()) {
                    this.setDefaultNonEmptyTab();
                }
            } else {
                if (this.getTab(tabId).$tab.index() == 0) {
                    if (!this.isTabEmpty(tabId)) {
                        this.tabs[tabId].$tab.find('a').tab('show');
                    } else {
                        this.setDefaultNonEmptyTab();
                    }
                }
            }
        },

        isTabEmpty: function(tabKey) {
            var tab = this.getTab(tabKey);
            return !tab.$tabContentContainer.children().length || tab.$tabContentContainer.html() == this.templates.emptyMessage();
        },

        hideTab: function(tabKey) {
            var tab = this.getTab(tabKey);
            if (tab.hideOnEmpty) {
                tab.$tab.hide();
            } else {
                this.getTab(tabKey).$tabContentContainer.html(this.templates.emptyMessage());
            }
        },

        showTab: function(tabKey) {
            this.getTab(tabKey).$tab.show();
        },

        close: function() {
            this.$el.parents('.open').removeClass('open');
            return false;
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 367 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************************************!*\
  !*** ./src/Pim/Bundle/NavigationBundle/Resources/public/js/navigation/pinbar/collection.js ***!
  \*********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global define */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! oro/navigation/collection */ 188), __webpack_require__(/*! oro/navigation/pinbar/model */ 189)], __WEBPACK_AMD_DEFINE_RESULT__ = function(NavigationCollection, PinbarModel) {
    'use strict';

    /**
     * @export  oro/navigation/pinbar/collection
     * @class   oro.navigation.pinbar.Collection
     * @extends oro.navigation.Collection
     */
    return NavigationCollection.extend({
        model: PinbarModel,

        initialize: function() {
            this.on('change:position', this.onPositionChange, this);
            this.on('change:url', this.onUrlChange, this);
            this.on('change:maximized', this.onStateChange, this);
        },

        onPositionChange: function(item) {
            this.trigger('positionChange', item);
        },

        onStateChange: function(item) {
            this.trigger('stateChange', item);
        },

        onUrlChange: function(item) {
            this.trigger('urlChange', item);
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 368 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************************!*\
  !*** ./src/Pim/Bundle/NavigationBundle/Resources/public/js/navigation/pinbar/item-view.js ***!
  \********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1), __webpack_require__(/*! underscore */ 0), __webpack_require__(/*! backbone */ 2), __webpack_require__(/*! oro/app */ 19), __webpack_require__(/*! oro/mediator */ 6), __webpack_require__(/*! oro/error */ 47)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, _, Backbone, app, mediator, error) {
    'use strict';

    /**
     * @export  oro/navigation/pinbar/item-view
     * @class   oro.navigation.pinbar.ItemView
     * @extends Backbone.View
     */
    return Backbone.View.extend({

        options: {
            type: 'list'
        },

        tagName:  'li',

        isRemoved: false,

        templates: {
            list: _.template($("#template-list-pin-item").html()),
            tab: _.template($("#template-tab-pin-item").html())
        },

        events: {
            'click .btn-close': 'unpin',
            'click .close': 'unpin',
            'click .pin-holder .AknHeader-pinLink': 'maximize',
            'click span': 'maximize'
        },

        initialize: function() {
            this.listenTo(this.model, 'destroy', this.removeItem);
            this.listenTo(this.model, 'change:display_type', this.removeItem);
            this.listenTo(this.model, 'change:remove', this.unpin);
            /**
             * Change active pinbar item after hash navigation request is completed
             */
            mediator.bind(
                "route_complete",
                function() {
                    /*if (!this.isRemoved && this.checkCurrentUrl()) {
                        this.maximize();
                    }*/
                    this.setActiveItem();
                },
                this
            );
        },

        unpin: function() {
            mediator.trigger("pinbar_item_remove_before", this.model);
            this.model.destroy({
                wait: true,
                error: _.bind(function(model, xhr, options) {
                    if (xhr.status == 404 && !app.debug) {
                        // Suppress error if it's 404 response and not debug mode
                        this.removeItem();
                    } else {
                        error.dispatch(model, xhr, options);
                    }
                }, this)
            });
            return false;
        },

        maximize: function() {
            this.model.set('maximized', new Date().toISOString());
            return false;
        },

        removeItem: function() {
            this.isRemoved = true;
            this.remove();
        },

        checkCurrentUrl: function() {
            var url = Backbone.history.getFragment();
            var modelUrl = this.model.get('url');

            return modelUrl === url;
        },

        setActiveItem: function() {
            if (this.checkCurrentUrl()) {
                this.$el.addClass('active');
            } else {
                this.$el.removeClass('active');
            }
        },

        render: function () {
            this.$el.html(
                this.templates[this.options.type](this.model.toJSON())
            );
            this.setActiveItem();
            return this;
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 369 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************!*\
  !*** ./src/Pim/Bundle/NotificationBundle/Resources/public/js/indicator.js ***!
  \****************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! backbone */ 2), __webpack_require__(/*! underscore */ 0)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Backbone, _) {
        'use strict';

        var Indicator = Backbone.Model.extend({
            defaults: {
                value: null,
                className: 'AknBell-count',
                emptyClass: 'AknBell-count--hidden',
                nonEmptyClass: ''
            }
        });

        var IndicatorView = Backbone.View.extend({
            model: Indicator,

            template: _.template(
                '<span class="<%= className %> <%= value ? nonEmptyClass : emptyClass %>"><%= value %></span>'
            ),

            initialize: function () {
                this.listenTo(this.model, 'change', this.render);

                this.render();
            },

            render: function () {
                this.$el.html(this.template(this.model.toJSON()));

                return this;
            }
        });

        return function (opts) {
            var el = opts.el || null;
            delete opts.el;
            var indicator = new Indicator(opts);
            var indicatorView = new IndicatorView({el: el, model: indicator});
            indicator.setElement = function () {
                indicatorView.setElement.apply(indicatorView, arguments);

                return indicatorView.render();
            };

            return indicator;
        };
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 370 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************!*\
  !*** ./src/Pim/Bundle/NotificationBundle/Resources/public/js/notification-list.js ***!
  \************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! pim/router */ 11),
        __webpack_require__(/*! pim/template/notification/notification-list */ 316)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (Backbone, $, _, Routing, router, template) {
        'use strict';

        var Notification = Backbone.Model.extend({
            defaults: {
                viewed:            false,
                url:               null,
                message:           '',
                id:                null,
                type:              'success',
                createdAt:         null,
                actionType:        null,
                actionTypeMessage: null,
                showReportButton:  true,
                comment:           null
            }
        });

        var NotificationList = Backbone.Collection.extend({
            model:     Notification,
            loading:   false,
            hasMore:   true
        });

        var NotificationView = Backbone.View.extend({
            tagName: 'li',
            className: 'AknNotification',
            model: Notification,
            template: _.template(template),
            events: {
                'click .icon-trash':     'remove',
                'click .icon-eye-close': 'markAsRead',
                'click i':               'preventOpen',
                'click a.new':           'markAsRead',
                'click a':               'open'
            },

            remove: function () {
                this.model.destroy({
                    url: Routing.generate('pim_notification_notification_remove', { id: this.model.get('id') }),
                    wait: false,
                    _method: 'DELETE'
                });

                this.$el.fadeOut(function () {
                    this.remove();
                });
            },

            open: function (e) {
                this.preventOpen(e);
                if (this.model.get('url')) {
                    router.redirect(this.model.get('url'));
                }
                this.$el.closest('.dropdown').removeClass('open');
            },

            preventOpen: function (e) {
                e.preventDefault();
                e.stopPropagation();
            },

            markAsRead: function () {
                this.model.trigger('mark_as_read', this.model.id);
                this.model.set('viewed', true);
                $.ajax({
                    type: 'POST',
                    url: Routing.generate('pim_notification_notification_mark_viewed', {id: this.model.id}),
                    async: true
                });
            },

            initialize: function () {
                this.listenTo(this.model, 'change', this.render);

                this.render();
            },

            render: function () {
                this.$el.html(
                    this.template({
                        viewed: this.model.get('viewed'),
                        message: this.model.get('message'),
                        url: this.model.get('url'),
                        icon: this.getIcon(this.model.get('type')),
                        type: this.model.get('type'),
                        createdAt: this.model.get('createdAt'),
                        actionType: this.camelize(this.model.get('actionType')),
                        buttonLabel: this.model.get('buttonLabel'),
                        actionTypeMessage: this.model.get('actionTypeMessage'),
                        showReportButton: this.model.get('showReportButton'),
                        comment: this.model.get('comment')
                    }
                ));

                return this;
            },

            getIcon: function (type) {
                var icons = {
                    'success': 'ok',
                    'warning': 'warning-sign',
                    'error':   'remove',
                    'add':     'plus'
                };

                return _.result(icons, type, 'remove');
            },

            camelize: function (str) {
                return str.toLowerCase()
                    .replace(/_(.)/g, function ($firstLetter) {
                        return $firstLetter.toUpperCase();
                    })
                    .replace(/_/g, '');
            }
        });

        var NotificationListView = Backbone.View.extend({
            tagName: 'ol',

            collection: NotificationList,

            events: {
                'scroll': 'onScroll'
            },

            initialize: function () {
                _.bindAll(this, 'render');

                this.collection.on('add reset', this.render);

                this.render();
            },

            onScroll: function () {
                var self = this;
                this.$el.on('scroll', function () {
                    if ($(this).scrollTop() + $(this).innerHeight() >= this.scrollHeight) {
                        self.loadNotifications();
                    }
                });
            },

            loadNotifications: function () {
                if (this.collection.loading || !this.collection.hasMore) {
                    return;
                }

                this.collection.loading = true;

                this.collection.trigger('loading:start');

                $.getJSON(Routing.generate('pim_notification_notification_list') + '?skip=' + this.collection.length)
                    .then(_.bind(function (data) {
                        this.collection.add(data.notifications);
                        this.collection.hasMore = data.notifications.length >= 10;

                        this.collection.trigger('load:unreadCount', data.unreadCount);
                        this.collection.loading = false;
                        this.collection.trigger('loading:finish');
                    }, this));
            },

            render: function () {
                this.$el.empty();

                _.each(this.collection.models, function (model) {
                    this.renderNotification(model);
                }, this);
            },

            renderNotification: function (item) {
                var itemView = new NotificationView({
                    model: item
                });

                this.$el.append(itemView.$el);
            }
        });

        return function (opts) {
            var notificationList = new NotificationList();
            var options = _.extend({}, { el: null, collection: notificationList }, opts);
            var notificationListView = new NotificationListView(options);

            notificationList.setElement = function (element) {
                notificationListView.$el.prependTo(element);
                notificationListView.delegateEvents();
                notificationListView.render();
            };
            notificationList.loadNotifications = function () {
                return notificationListView.loadNotifications();
            };

            return notificationList;
        };
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 371 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************!*\
  !*** ./src/Pim/Bundle/UIBundle/Resources/public/js/pim-fileinput.js ***!
  \**********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1), __webpack_require__(/*! jquery.slimbox */ 191)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($) {
        'use strict';

        var maxFilenameLength = 20;
        var init = function (id) {
            var $el = $('#' + id);
            if (!$el.length) {
                return;
            }

            $el.on('change', function () {
                var $input          = $(this);
                var filename        = $input.val().split('\\').pop();
                var $zone           = $input.parent();
                var $info           = $input.siblings('.upload-info').first();
                var $filename       = $info.find('.upload-filename');
                var $removeBtn      = $input.siblings('.remove-upload');
                var $removeCheckbox = $input.siblings('input[type="checkbox"]');
                var $preview        = $info.find('.upload-preview');

                if (filename) {
                    var title = filename.length > maxFilenameLength ?
                        filename.substring(0, maxFilenameLength - 3) + '...' :
                        filename;
                    $filename.html(title);
                    $zone.removeClass('empty');
                    $preview.removeClass('empty').attr('title', filename);
                    $removeBtn.removeClass('hide');
                    $input.addClass('hide');
                    $removeCheckbox.removeAttr('checked');
                } else {
                    $filename.html($filename.attr('data-empty-title'));
                    $zone.addClass('empty');
                    $preview.addClass('empty').removeAttr('title');
                    $removeBtn.addClass('hide');
                    $input.removeAttr('disabled').removeClass('hide');
                    $removeCheckbox.attr('checked', 'checked');
                }
            });

            $el.parent().on('click', '.remove-upload:not(.disabled)', function (e) {
                e.preventDefault();
                e.stopPropagation();
                $el.wrap('<form>').closest('form').get(0).reset();
                $el.unwrap().trigger('change');
            });

            $el.parent().on('mouseover', '.upload-zone:not(.empty)', function () {
                $el.attr('disabled', 'disabled');
            }).on('mouseout', '.upload-zone:not(.empty)', function () {
                $el.removeAttr('disabled');
            });

            // Initialize slimbox
            if (!/android|iphone|ipod|series60|symbian|windows ce|blackberry/i.test(navigator.userAgent)) {
                $el.parent().find('a[rel^="slimbox"]').slimbox({
                    overlayOpacity: 0.3
                }, null, function (el) {
                    return (this === el) || ((this.rel.length > 8) && (this.rel === el.rel));
                });
            }
        };

        return {
            init: init
        };
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 372 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************************************************!*\
  !*** ./src/Pim/Bundle/UIBundle/Resources/public/lib/bootstrap-datetimepicker/js/bootstrap-datetimepicker.js ***!
  \**************************************************************************************************************/
/***/ (function(module, exports) {

/**
 * @license
 * =========================================================
 * bootstrap-datetimepicker.js
 * http://www.eyecon.ro/bootstrap-datepicker
 * =========================================================
 * Copyright 2012 Stefan Petre
 *
 * Contributions:
 *  - Andrew Rowls
 *  - Thiago de Arruda
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =========================================================
 */

(function($) {

  // Picker object
  var smartPhone = (window.orientation != undefined);
  var DateTimePicker = function(element, options) {
    this.id = dpgId++;
    this.init(element, options);
  };

  var dateToDate = function(dt) {
    if (typeof dt === 'string') {
      return new Date(dt);
    }
    return dt;
  };

  DateTimePicker.prototype = {
    constructor: DateTimePicker,

    init: function(element, options) {
      var icon;
      if (!(options.pickTime || options.pickDate))
        throw new Error('Must choose at least one picker');
      this.options = options;
      this.$element = $(element);
      this.language = options.language in dates ? options.language : 'en'
      this.pickDate = options.pickDate;
      this.pickTime = options.pickTime;
      this.isInput = this.$element.is('input');
      this.component = false;
      if (this.$element.find('.input-append') || this.$element.find('.input-prepend'))
          this.component = this.$element.find('.add-on');
      this.format = options.format;
      if (!this.format) {
        if (this.isInput) this.format = this.$element.data('format');
        else this.format = this.$element.find('input').data('format');
        if (!this.format) this.format = 'MM/dd/yyyy';
      }
      this._compileFormat();
      if (this.component) {
        icon = this.component.find('i');
      }
      if (this.pickTime) {
        if (icon && icon.length) this.timeIcon = icon.data('time-icon');
        if (!this.timeIcon) this.timeIcon = 'icon-time';
        icon.addClass(this.timeIcon);
      }
      if (this.pickDate) {
        if (icon && icon.length) this.dateIcon = icon.data('date-icon');
        if (!this.dateIcon) this.dateIcon = 'icon-calendar';
        icon.removeClass(this.timeIcon);
        icon.addClass(this.dateIcon);
      }
      this.widget = $(getTemplate(this.timeIcon, options.pickDate, options.pickTime, options.pick12HourFormat, options.pickSeconds, options.collapse)).appendTo('body');
      this.minViewMode = options.minViewMode||this.$element.data('date-minviewmode')||0;
      if (typeof this.minViewMode === 'string') {
        switch (this.minViewMode) {
          case 'months':
            this.minViewMode = 1;
          break;
          case 'years':
            this.minViewMode = 2;
          break;
          default:
            this.minViewMode = 0;
          break;
        }
      }
      this.viewMode = options.viewMode||this.$element.data('date-viewmode')||0;
      if (typeof this.viewMode === 'string') {
        switch (this.viewMode) {
          case 'months':
            this.viewMode = 1;
          break;
          case 'years':
            this.viewMode = 2;
          break;
          default:
            this.viewMode = 0;
          break;
        }
      }
      this.startViewMode = this.viewMode;
      this.weekStart = options.weekStart||this.$element.data('date-weekstart')||0;
      this.weekEnd = this.weekStart === 0 ? 6 : this.weekStart - 1;
      this.setStartDate(options.startDate || this.$element.data('date-startdate'));
      this.setEndDate(options.endDate || this.$element.data('date-enddate'));
      this.fillDow();
      this.fillMonths();
      this.fillHours();
      this.fillMinutes();
      this.fillSeconds();
      this.update();
      this.showMode();
      this._attachDatePickerEvents();
    },

    show: function(e) {
      this.widget.show();
      this.height = this.component ? this.component.outerHeight() : this.$element.outerHeight();
      this.place();
      this.$element.trigger({
        type: 'show',
        date: this._date
      });
      this._attachDatePickerGlobalEvents();
      if (e) {
        e.stopPropagation();
        e.preventDefault();
      }
    },

    disable: function(){
          this.$element.find('input').prop('disabled',true);
          this._detachDatePickerEvents();
    },
    enable: function(){
          this.$element.find('input').prop('disabled',false);
          this._attachDatePickerEvents();
    },

    hide: function() {
      // Ignore event if in the middle of a picker transition
      var collapse = this.widget.find('.collapse')
      for (var i = 0; i < collapse.length; i++) {
        var collapseData = collapse.eq(i).data('collapse');
        if (collapseData && collapseData.transitioning)
          return;
      }
      this.widget.hide();
      this.viewMode = this.startViewMode;
      this.showMode();
      this.set();
      this.$element.trigger({
        type: 'hide',
        date: this._date
      });
      this._detachDatePickerGlobalEvents();
    },

    set: function() {
      var formatted = '';
      if (!this._unset) formatted = this.formatDate(this._date);
      if (!this.isInput) {
        if (this.component){
          var input = this.$element.find('input');
          input.val(formatted);
          this._resetMaskPos(input);
        }
        this.$element.data('date', formatted);
      } else {
        this.$element.val(formatted);
        this._resetMaskPos(this.$element);
      }
    },

    setValue: function(newDate) {
      if (!newDate) {
        this._unset = true;
      } else {
        this._unset = false;
      }
      if (typeof newDate === 'string') {
        this._date = this.parseDate(newDate);
      } else if(newDate) {
        this._date = new Date(newDate);
      }
      this.set();
      this.viewDate = UTCDate(this._date.getUTCFullYear(), this._date.getUTCMonth(), 1, 0, 0, 0, 0);
      this.fillDate();
      this.fillTime();
    },

    getDate: function() {
      if (this._unset) return null;
      return new Date(this._date.valueOf());
    },

    setDate: function(date) {
      if (!date) this.setValue(null);
      else this.setValue(date.valueOf());
    },

    setStartDate: function(date) {
      if (date instanceof Date) {
        this.startDate = date;
      } else if (typeof date === 'string') {
        this.startDate = new UTCDate(date);
        if (! this.startDate.getUTCFullYear()) {
          this.startDate = -Infinity;
        }
      } else {
        this.startDate = -Infinity;
      }
      if (this.viewDate) {
        this.update();
      }
    },

    setEndDate: function(date) {
      if (date instanceof Date) {
        this.endDate = date;
      } else if (typeof date === 'string') {
        this.endDate = new UTCDate(date);
        if (! this.endDate.getUTCFullYear()) {
          this.endDate = Infinity;
        }
      } else {
        this.endDate = Infinity;
      }
      if (this.viewDate) {
        this.update();
      }
    },

    getLocalDate: function() {
      if (this._unset) return null;
      var d = this._date;
      return new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(),
                      d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds());
    },

    setLocalDate: function(localDate) {
      if (!localDate) this.setValue(null);
      else
        this.setValue(Date.UTC(
          localDate.getFullYear(),
          localDate.getMonth(),
          localDate.getDate(),
          localDate.getHours(),
          localDate.getMinutes(),
          localDate.getSeconds(),
          localDate.getMilliseconds()));
    },

    place: function(){
      var position = 'absolute';
      var offset = this.component ? this.component.offset() : this.$element.offset();
      this.width = this.component ? this.component.outerWidth() : this.$element.outerWidth();
      offset.top = offset.top + this.height;

      var $window = $(window);
      
      if ( this.options.width != undefined ) {
        this.widget.width( this.options.width );
      }
      
      if ( this.options.orientation == 'left' ) {
        this.widget.addClass( 'left-oriented' );
        offset.left   = offset.left - this.widget.width() + 20;
      }
      
      if (this._isInFixed()) {
        position = 'fixed';
        offset.top -= $window.scrollTop();
        offset.left -= $window.scrollLeft();
      }

      if ($window.width() < offset.left + this.widget.outerWidth()) {
        offset.right = $window.width() - offset.left - this.width;
        offset.left = 'auto';
        this.widget.addClass('pull-right');
      } else {
        offset.right = 'auto';
        this.widget.removeClass('pull-right');
      }

      this.widget.css({
        position: position,
        top: offset.top,
        left: offset.left,
        right: offset.right
      });
    },

    notifyChange: function(){
      this.$element.trigger({
        type: 'changeDate',
        date: this.getDate(),
        localDate: this.getLocalDate()
      });
    },

    update: function(newDate){
      var dateStr = newDate;
      if (!dateStr) {
        if (this.isInput) {
          dateStr = this.$element.val();
        } else {
          dateStr = this.$element.find('input').val();
        }
        if (dateStr) {
          this._date = this.parseDate(dateStr);
        }
        if (!this._date) {
          var tmp = new Date()
          this._date = UTCDate(tmp.getFullYear(),
                              tmp.getMonth(),
                              tmp.getDate(),
                              tmp.getHours(),
                              tmp.getMinutes(),
                              tmp.getSeconds(),
                              tmp.getMilliseconds())
        }
      }
      this.viewDate = UTCDate(this._date.getUTCFullYear(), this._date.getUTCMonth(), 1, 0, 0, 0, 0);
      this.fillDate();
      this.fillTime();
    },

    fillDow: function() {
      var dowCnt = this.weekStart;
      var html = $('<tr>');
      while (dowCnt < this.weekStart + 7) {
        html.append('<th class="dow">' + dates[this.language].daysMin[(dowCnt++) % 7] + '</th>');
      }
      this.widget.find('.datepicker-days thead').append(html);
    },

    fillMonths: function() {
      var html = '';
      var i = 0
      while (i < 12) {
        html += '<span class="month">' + dates[this.language].monthsShort[i++] + '</span>';
      }
      this.widget.find('.datepicker-months td').append(html);
    },

    fillDate: function() {
      var year = this.viewDate.getUTCFullYear();
      var month = this.viewDate.getUTCMonth();
      var currentDate = UTCDate(
        this._date.getUTCFullYear(),
        this._date.getUTCMonth(),
        this._date.getUTCDate(),
        0, 0, 0, 0
      );
      var startYear  = typeof this.startDate === 'object' ? this.startDate.getUTCFullYear() : -Infinity;
      var startMonth = typeof this.startDate === 'object' ? this.startDate.getUTCMonth() : -1;
      var endYear  = typeof this.endDate === 'object' ? this.endDate.getUTCFullYear() : Infinity;
      var endMonth = typeof this.endDate === 'object' ? this.endDate.getUTCMonth() : 12;

      this.widget.find('.datepicker-days').find('.disabled').removeClass('disabled');
      this.widget.find('.datepicker-months').find('.disabled').removeClass('disabled');
      this.widget.find('.datepicker-years').find('.disabled').removeClass('disabled');

      this.widget.find('.datepicker-days th:eq(1)').text(
        dates[this.language].months[month] + ' ' + year);

      var prevMonth = UTCDate(year, month-1, 28, 0, 0, 0, 0);
      var day = DPGlobal.getDaysInMonth(
        prevMonth.getUTCFullYear(), prevMonth.getUTCMonth());
      prevMonth.setUTCDate(day);
      prevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.weekStart + 7) % 7);
      if ((year == startYear && month <= startMonth) || year < startYear) {
        this.widget.find('.datepicker-days th:eq(0)').addClass('disabled');
      }
      if ((year == endYear && month >= endMonth) || year > endYear) {
        this.widget.find('.datepicker-days th:eq(2)').addClass('disabled');
      }

      var nextMonth = new Date(prevMonth.valueOf());
      nextMonth.setUTCDate(nextMonth.getUTCDate() + 42);
      nextMonth = nextMonth.valueOf();
      var html = [];
      var row;
      var clsName;
      while (prevMonth.valueOf() < nextMonth) {
        if (prevMonth.getUTCDay() === this.weekStart) {
          row = $('<tr>');
          html.push(row);
        }
        clsName = '';
        if (prevMonth.getUTCFullYear() < year ||
            (prevMonth.getUTCFullYear() == year &&
             prevMonth.getUTCMonth() < month)) {
          clsName += ' old';
        } else if (prevMonth.getUTCFullYear() > year ||
                   (prevMonth.getUTCFullYear() == year &&
                    prevMonth.getUTCMonth() > month)) {
          clsName += ' new';
        }
        if (prevMonth.valueOf() === currentDate.valueOf()) {
          clsName += ' active';
        }
        if ((prevMonth.valueOf() + 86400000) <= this.startDate) {
          clsName += ' disabled';
        }
        if (prevMonth.valueOf() > this.endDate) {
          clsName += ' disabled';
        }
        row.append('<td class="day' + clsName + '">' + prevMonth.getUTCDate() + '</td>');
        prevMonth.setUTCDate(prevMonth.getUTCDate() + 1);
      }
      this.widget.find('.datepicker-days tbody').empty().append(html);
      var currentYear = this._date.getUTCFullYear();

      var months = this.widget.find('.datepicker-months').find(
        'th:eq(1)').text(year).end().find('span').removeClass('active');
      if (currentYear === year) {
        months.eq(this._date.getUTCMonth()).addClass('active');
      }
      if (currentYear - 1 < startYear) {
        this.widget.find('.datepicker-months th:eq(0)').addClass('disabled');
      }
      if (currentYear + 1 > endYear) {
        this.widget.find('.datepicker-months th:eq(2)').addClass('disabled');
      }
      for (var i = 0; i < 12; i++) {
        if ((year == startYear && startMonth > i) || (year < startYear)) {
          $(months[i]).addClass('disabled');
        } else if ((year == endYear && endMonth < i) || (year > endYear)) {
          $(months[i]).addClass('disabled');
        }
      }

      html = '';
      year = parseInt(year/10, 10) * 10;
      var yearCont = this.widget.find('.datepicker-years').find(
        'th:eq(1)').text(year + '-' + (year + 9)).end().find('td');
      this.widget.find('.datepicker-years').find('th').removeClass('disabled');
      if (startYear > year) {
        this.widget.find('.datepicker-years').find('th:eq(0)').addClass('disabled');
      }
      if (endYear < year+9) {
        this.widget.find('.datepicker-years').find('th:eq(2)').addClass('disabled');
      }
      year -= 1;
      for (var i = -1; i < 11; i++) {
        html += '<span class="year' + (i === -1 || i === 10 ? ' old' : '') + (currentYear === year ? ' active' : '') + ((year < startYear || year > endYear) ? ' disabled' : '') + '">' + year + '</span>';
        year += 1;
      }
      yearCont.html(html);
    },

    fillHours: function() {
      var table = this.widget.find(
        '.timepicker .timepicker-hours table');
      table.parent().hide();
      var html = '';
      if (this.options.pick12HourFormat) {
        var current = 1;
        for (var i = 0; i < 3; i += 1) {
          html += '<tr>';
          for (var j = 0; j < 4; j += 1) {
             var c = current.toString();
             html += '<td class="hour">' + padLeft(c, 2, '0') + '</td>';
             current++;
          }
          html += '</tr>'
        }
      } else {
        var current = 0;
        for (var i = 0; i < 6; i += 1) {
          html += '<tr>';
          for (var j = 0; j < 4; j += 1) {
             var c = current.toString();
             html += '<td class="hour">' + padLeft(c, 2, '0') + '</td>';
             current++;
          }
          html += '</tr>'
        }
      }
      table.html(html);
    },

    fillMinutes: function() {
      var table = this.widget.find(
        '.timepicker .timepicker-minutes table');
      table.parent().hide();
      var html = '';
      var current = 0;
      for (var i = 0; i < 5; i++) {
        html += '<tr>';
        for (var j = 0; j < 4; j += 1) {
          var c = current.toString();
          html += '<td class="minute">' + padLeft(c, 2, '0') + '</td>';
          current += 3;
        }
        html += '</tr>';
      }
      table.html(html);
    },

    fillSeconds: function() {
      var table = this.widget.find(
        '.timepicker .timepicker-seconds table');
      table.parent().hide();
      var html = '';
      var current = 0;
      for (var i = 0; i < 5; i++) {
        html += '<tr>';
        for (var j = 0; j < 4; j += 1) {
          var c = current.toString();
          html += '<td class="second">' + padLeft(c, 2, '0') + '</td>';
          current += 3;
        }
        html += '</tr>';
      }
      table.html(html);
    },

    fillTime: function() {
      if (!this._date)
        return;
      var timeComponents = this.widget.find('.timepicker span[data-time-component]');
      var table = timeComponents.closest('table');
      var is12HourFormat = this.options.pick12HourFormat;
      var hour = this._date.getUTCHours();
      var period = 'AM';
      if (is12HourFormat) {
        if (hour >= 12) period = 'PM';
        if (hour === 0) hour = 12;
        else if (hour != 12) hour = hour % 12;
        this.widget.find(
          '.timepicker [data-action=togglePeriod]').text(period);
      }
      hour = padLeft(hour.toString(), 2, '0');
      var minute = padLeft(this._date.getUTCMinutes().toString(), 2, '0');
      var second = padLeft(this._date.getUTCSeconds().toString(), 2, '0');
      timeComponents.filter('[data-time-component=hours]').text(hour);
      timeComponents.filter('[data-time-component=minutes]').text(minute);
      timeComponents.filter('[data-time-component=seconds]').text(second);
    },

    click: function(e) {
      e.stopPropagation();
      e.preventDefault();
      this._unset = false;
      var target = $(e.target).closest('span, td, th');
      if (target.length === 1) {
        if (! target.is('.disabled')) {
          switch(target[0].nodeName.toLowerCase()) {
            case 'th':
              switch(target[0].className) {
                case 'switch':
                  this.showMode(1);
                  break;
                case 'prev':
                case 'next':
                  var vd = this.viewDate;
                  var navFnc = DPGlobal.modes[this.viewMode].navFnc;
                  var step = DPGlobal.modes[this.viewMode].navStep;
                  if (target[0].className === 'prev') step = step * -1;
                  vd['set' + navFnc](vd['get' + navFnc]() + step);
                  this.fillDate();
                  this.set();
                  break;
              }
              break;
            case 'span':
              if (target.is('.month')) {
                var month = target.parent().find('span').index(target);
                this.viewDate.setUTCMonth(month);
              } else {
                var year = parseInt(target.text(), 10) || 0;
                this.viewDate.setUTCFullYear(year);
              }
              if (this.viewMode !== 0) {
                this._date = UTCDate(
                  this.viewDate.getUTCFullYear(),
                  this.viewDate.getUTCMonth(),
                  this.viewDate.getUTCDate(),
                  this._date.getUTCHours(),
                  this._date.getUTCMinutes(),
                  this._date.getUTCSeconds(),
                  this._date.getUTCMilliseconds()
                );
                this.notifyChange();
              }
              this.showMode(-1);
              this.fillDate();
              this.set();
              break;
            case 'td':
              if (target.is('.day')) {
                var day = parseInt(target.text(), 10) || 1;
                var month = this.viewDate.getUTCMonth();
                var year = this.viewDate.getUTCFullYear();
                if (target.is('.old')) {
                  if (month === 0) {
                    month = 11;
                    year -= 1;
                  } else {
                    month -= 1;
                  }
                } else if (target.is('.new')) {
                  if (month == 11) {
                    month = 0;
                    year += 1;
                  } else {
                    month += 1;
                  }
                }
                this._date = UTCDate(
                  year, month, day,
                  this._date.getUTCHours(),
                  this._date.getUTCMinutes(),
                  this._date.getUTCSeconds(),
                  this._date.getUTCMilliseconds()
                );
                this.viewDate = UTCDate(
                  year, month, Math.min(28, day) , 0, 0, 0, 0);
                this.fillDate();
                this.set();
                this.notifyChange();
              }
              break;
          }
        }
      }
    },

    actions: {
      incrementHours: function(e) {
        this._date.setUTCHours(this._date.getUTCHours() + 1);
      },

      incrementMinutes: function(e) {
        this._date.setUTCMinutes(this._date.getUTCMinutes() + 1);
      },

      incrementSeconds: function(e) {
        this._date.setUTCSeconds(this._date.getUTCSeconds() + 1);
      },

      decrementHours: function(e) {
        this._date.setUTCHours(this._date.getUTCHours() - 1);
      },

      decrementMinutes: function(e) {
        this._date.setUTCMinutes(this._date.getUTCMinutes() - 1);
      },

      decrementSeconds: function(e) {
        this._date.setUTCSeconds(this._date.getUTCSeconds() - 1);
      },

      togglePeriod: function(e) {
        var hour = this._date.getUTCHours();
        if (hour >= 12) hour -= 12;
        else hour += 12;
        this._date.setUTCHours(hour);
      },

      showPicker: function() {
        this.widget.find('.timepicker > div:not(.timepicker-picker)').hide();
        this.widget.find('.timepicker .timepicker-picker').show();
      },

      showHours: function() {
        this.widget.find('.timepicker .timepicker-picker').hide();
        this.widget.find('.timepicker .timepicker-hours').show();
      },

      showMinutes: function() {
        this.widget.find('.timepicker .timepicker-picker').hide();
        this.widget.find('.timepicker .timepicker-minutes').show();
      },

      showSeconds: function() {
        this.widget.find('.timepicker .timepicker-picker').hide();
        this.widget.find('.timepicker .timepicker-seconds').show();
      },

      selectHour: function(e) {
        var tgt = $(e.target);
        var value = parseInt(tgt.text(), 10);
        if (this.options.pick12HourFormat) {
          var current = this._date.getUTCHours();
          if (current >= 12) {
            if (value != 12) value = (value + 12) % 24;
          } else {
            if (value === 12) value = 0;
            else value = value % 12;
          }
        }
        this._date.setUTCHours(value);
        this.actions.showPicker.call(this);
      },

      selectMinute: function(e) {
        var tgt = $(e.target);
        var value = parseInt(tgt.text(), 10);
        this._date.setUTCMinutes(value);
        this.actions.showPicker.call(this);
      },

      selectSecond: function(e) {
        var tgt = $(e.target);
        var value = parseInt(tgt.text(), 10);
        this._date.setUTCSeconds(value);
        this.actions.showPicker.call(this);
      }
    },

    doAction: function(e) {
      e.stopPropagation();
      e.preventDefault();
      if (!this._date) this._date = UTCDate(1970, 0, 0, 0, 0, 0, 0);
      var action = $(e.currentTarget).data('action');
      var rv = this.actions[action].apply(this, arguments);
      this.set();
      this.fillTime();
      this.notifyChange();
      return rv;
    },

    stopEvent: function(e) {
      e.stopPropagation();
      e.preventDefault();
    },

    // part of the following code was taken from
    // http://cloud.github.com/downloads/digitalBush/jquery.maskedinput/jquery.maskedinput-1.3.js
    keydown: function(e) {
      var self = this, k = e.which, input = $(e.target);
      if (k == 8 || k == 46) {
        // backspace and delete cause the maskPosition
        // to be recalculated
        setTimeout(function() {
          self._resetMaskPos(input);
        });
      }
    },

    keypress: function(e) {
      var k = e.which;
      if (k == 8 || k == 46) {
        // For those browsers which will trigger
        // keypress on backspace/delete
        return;
      }
      var input = $(e.target);
      var c = String.fromCharCode(k);
      var val = input.val() || '';
      val += c;
      var mask = this._mask[this._maskPos];
      if (!mask) {
        return false;
      }
      if (mask.end != val.length) {
        return;
      }
      if (!mask.pattern.test(val.slice(mask.start))) {
        val = val.slice(0, val.length - 1);
        while ((mask = this._mask[this._maskPos]) && mask.character) {
          val += mask.character;
          // advance mask position past static
          // part
          this._maskPos++;
        }
        val += c;
        if (mask.end != val.length) {
          input.val(val);
          return false;
        } else {
          if (!mask.pattern.test(val.slice(mask.start))) {
            input.val(val.slice(0, mask.start));
            return false;
          } else {
            input.val(val);
            this._maskPos++;
            return false;
          }
        }
      } else {
        this._maskPos++;
      }
    },

    change: function(e) {
      var input = $(e.target);
      var val = input.val();
      if (this._formatPattern.test(val)) {
        this.update();
        this.setValue(this._date.getTime());
        this.notifyChange();
        this.set();
      } else if (val && val.trim()) {
        this.setValue(this._date.getTime());
        if (this._date) this.set();
        else input.val('');
      } else {
        if (this._date) {
          this.setValue(null);
          // unset the date when the input is
          // erased
          this.notifyChange();
          this._unset = true;
        }
      }
      this._resetMaskPos(input);
    },

    showMode: function(dir) {
      if (dir) {
        this.viewMode = Math.max(this.minViewMode, Math.min(
          2, this.viewMode + dir));
      }
      this.widget.find('.datepicker > div').hide().filter(
        '.datepicker-'+DPGlobal.modes[this.viewMode].clsName).show();
    },

    destroy: function() {
      this._detachDatePickerEvents();
      this._detachDatePickerGlobalEvents();
      this.widget.remove();
      this.$element.removeData('datetimepicker');
      this.component.removeData('datetimepicker');
    },

    formatDate: function(d) {
      return this.format.replace(formatReplacer, function(match) {
        var methodName, property, rv, len = match.length;
        if (match === 'ms')
          len = 1;
        property = dateFormatComponents[match].property
        if (property === 'Hours12') {
          rv = d.getUTCHours();
          if (rv === 0) rv = 12;
          else if (rv !== 12) rv = rv % 12;
        } else if (property === 'Period12') {
          if (d.getUTCHours() >= 12) return 'PM';
          else return 'AM';
	} else if (property === 'UTCYear') {
          rv = d.getUTCFullYear();
          rv = rv.toString().substr(2);   
        } else {
          methodName = 'get' + property;
          rv = d[methodName]();
        }
        if (methodName === 'getUTCMonth') rv = rv + 1;
        return padLeft(rv.toString(), len, '0');
      });
    },

    parseDate: function(str) {
      var match, i, property, methodName, value, parsed = {};
      if (!(match = this._formatPattern.exec(str)))
        return null;
      for (i = 1; i < match.length; i++) {
        property = this._propertiesByIndex[i];
        if (!property)
          continue;
        value = match[i];
        if (/^\d+$/.test(value))
          value = parseInt(value, 10);
        parsed[property] = value;
      }
      return this._finishParsingDate(parsed);
    },

    _resetMaskPos: function(input) {
      var val = input.val();
      for (var i = 0; i < this._mask.length; i++) {
        if (this._mask[i].end > val.length) {
          // If the mask has ended then jump to
          // the next
          this._maskPos = i;
          break;
        } else if (this._mask[i].end === val.length) {
          this._maskPos = i + 1;
          break;
        }
      }
    },

    _finishParsingDate: function(parsed) {
      var year, month, date, hours, minutes, seconds, milliseconds;
      year = parsed.UTCFullYear;
      if (parsed.UTCYear) year = 2000 + parsed.UTCYear;
      if (!year) year = 1970;
      if (parsed.UTCMonth) month = parsed.UTCMonth - 1;
      else month = 0;
      date = parsed.UTCDate || 1;
      hours = parsed.UTCHours || 0;
      minutes = parsed.UTCMinutes || 0;
      seconds = parsed.UTCSeconds || 0;
      milliseconds = parsed.UTCMilliseconds || 0;
      if (parsed.Hours12) {
        hours = parsed.Hours12;
      }
      if (parsed.Period12) {
        if (/pm/i.test(parsed.Period12)) {
          if (hours != 12) hours = (hours + 12) % 24;
        } else {
          hours = hours % 12;
        }
      }
      return UTCDate(year, month, date, hours, minutes, seconds, milliseconds);
    },

    _compileFormat: function () {
      var match, component, components = [], mask = [],
      str = this.format, propertiesByIndex = {}, i = 0, pos = 0;
      while (match = formatComponent.exec(str)) {
        component = match[0];
        if (component in dateFormatComponents) {
          i++;
          propertiesByIndex[i] = dateFormatComponents[component].property;
          components.push('\\s*' + dateFormatComponents[component].getPattern(
            this) + '\\s*');
          mask.push({
            pattern: new RegExp(dateFormatComponents[component].getPattern(
              this)),
            property: dateFormatComponents[component].property,
            start: pos,
            end: pos += component.length
          });
        }
        else {
          components.push(escapeRegExp(component));
          mask.push({
            pattern: new RegExp(escapeRegExp(component)),
            character: component,
            start: pos,
            end: ++pos
          });
        }
        str = str.slice(component.length);
      }
      this._mask = mask;
      this._maskPos = 0;
      this._formatPattern = new RegExp(
        '^\\s*' + components.join('') + '\\s*$');
      this._propertiesByIndex = propertiesByIndex;
    },

    _attachDatePickerEvents: function() {
      var self = this;
      // this handles date picker clicks
      this.widget.on('click', '.datepicker *', $.proxy(this.click, this));
      // this handles time picker clicks
      this.widget.on('click', '[data-action]', $.proxy(this.doAction, this));
      this.widget.on('mousedown', $.proxy(this.stopEvent, this));
      if (this.pickDate && this.pickTime) {
        this.widget.on('click.togglePicker', '.accordion-toggle', function(e) {
          e.stopPropagation();
          var $this = $(this);
          var $parent = $this.closest('ul');
          var expanded = $parent.find('.collapse.in');
          var closed = $parent.find('.collapse:not(.in)');

          if (expanded && expanded.length) {
            var collapseData = expanded.data('collapse');
            if (collapseData && collapseData.transitioning) return;
            expanded.collapse('hide');
            closed.collapse('show')
            $this.find('i').toggleClass(self.timeIcon + ' ' + self.dateIcon);
            self.$element.find('.add-on i').toggleClass(self.timeIcon + ' ' + self.dateIcon);
          }
        });
      }
      if (this.isInput) {
        this.$element.on({
          'focus': $.proxy(this.show, this),
          'change': $.proxy(this.change, this)
        });
        if (this.options.maskInput) {
          this.$element.on({
            'keydown': $.proxy(this.keydown, this),
            'keypress': $.proxy(this.keypress, this)
          });
        }
      } else {
        this.$element.on({
          'change': $.proxy(this.change, this)
        }, 'input');
        if (this.options.maskInput) {
          this.$element.on({
            'keydown': $.proxy(this.keydown, this),
            'keypress': $.proxy(this.keypress, this)
          }, 'input');
        }
        if (this.component){
          this.component.on('click', $.proxy(this.show, this));
        } else {
          this.$element.on('click', $.proxy(this.show, this));
        }
      }
    },

    _attachDatePickerGlobalEvents: function() {
      $(window).on(
        'resize.datetimepicker' + this.id, $.proxy(this.place, this));
      if (!this.isInput) {
        $(document).on(
          'mousedown.datetimepicker' + this.id, $.proxy(this.hide, this));
      }
    },

    _detachDatePickerEvents: function() {
      this.widget.off('click', '.datepicker *', this.click);
      this.widget.off('click', '[data-action]');
      this.widget.off('mousedown', this.stopEvent);
      if (this.pickDate && this.pickTime) {
        this.widget.off('click.togglePicker');
      }
      if (this.isInput) {
        this.$element.off({
          'focus': this.show,
          'change': this.change
        });
        if (this.options.maskInput) {
          this.$element.off({
            'keydown': this.keydown,
            'keypress': this.keypress
          });
        }
      } else {
        this.$element.off({
          'change': this.change
        }, 'input');
        if (this.options.maskInput) {
          this.$element.off({
            'keydown': this.keydown,
            'keypress': this.keypress
          }, 'input');
        }
        if (this.component){
          this.component.off('click', this.show);
        } else {
          this.$element.off('click', this.show);
        }
      }
    },

    _detachDatePickerGlobalEvents: function () {
      $(window).off('resize.datetimepicker' + this.id);
      if (!this.isInput) {
        $(document).off('mousedown.datetimepicker' + this.id);
      }
    },

    _isInFixed: function() {
      if (this.$element) {
        var parents = this.$element.parents();
        var inFixed = false;
        for (var i=0; i<parents.length; i++) {
            if ($(parents[i]).css('position') == 'fixed') {
                inFixed = true;
                break;
            }
        };
        return inFixed;
      } else {
        return false;
      }
    }
  };

  $.fn.datetimepicker = function ( option, val ) {
    return this.each(function () {
      var $this = $(this),
      data = $this.data('datetimepicker'),
      options = typeof option === 'object' && option;
      if (!data) {
        $this.data('datetimepicker', (data = new DateTimePicker(
          this, $.extend({}, $.fn.datetimepicker.defaults,options))));
      }
      if (typeof option === 'string') data[option](val);
    });
  };

  $.fn.datetimepicker.defaults = {
    maskInput: false,
    pickDate: true,
    pickTime: true,
    pick12HourFormat: false,
    pickSeconds: true,
    startDate: -Infinity,
    endDate: Infinity,
    collapse: true
  };
  $.fn.datetimepicker.Constructor = DateTimePicker;
  var dpgId = 0;
  var dates = $.fn.datetimepicker.dates = {
    en: {
      days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday",
        "Friday", "Saturday", "Sunday"],
      daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
      daysMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"],
      months: ["January", "February", "March", "April", "May", "June",
        "July", "August", "September", "October", "November", "December"],
      monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul",
        "Aug", "Sep", "Oct", "Nov", "Dec"]
    }
  };

  var dateFormatComponents = {
    d:  {property: 'UTCDate', getPattern: function() { return '(0?[1-9]|[1-2][0-9]|3[0-1])\\b';}},
    dd: {property: 'UTCDate', getPattern: function() { return '(0?[1-9]|[1-2][0-9]|3[0-1])\\b';}},
    M:  {property: 'UTCMonth', getPattern: function() {return '(0?[1-9]|1[0-2])\\b';}},
    MM: {property: 'UTCMonth', getPattern: function() {return '(0?[1-9]|1[0-2])\\b';}},
    yyyy: {property: 'UTCFullYear', getPattern: function() {return '(\\d{4})\\b';}},
    yy: {property: 'UTCYear', getPattern: function() {return '(\\d{2})\\b'}},
    y: {property: 'UTCFullYear', getPattern: function() {return '(\\d{4})\\b'}},
    HH: {property: 'UTCHours', getPattern: function() {return '(0?[0-9]|1[0-9]|2[0-3])\\b';}},
    H:  {property: 'UTCHours', getPattern: function() {return '(0?[0-9]|1[0-9]|2[0-3])\\b';}},
    mm: {property: 'UTCMinutes', getPattern: function() {return '(0?[0-9]|[1-5][0-9])\\b';}},
    ss: {property: 'UTCSeconds', getPattern: function() {return '(0?[0-9]|[1-5][0-9])\\b';}},
    ms: {property: 'UTCMilliseconds', getPattern: function() {return '([0-9]{1,3})\\b';}},
    hh: {property: 'Hours12', getPattern: function() {return '(0?[1-9]|1[0-2])\\b';}},
    PP: {property: 'Period12', getPattern: function() {return '(AM|PM|am|pm|Am|aM|Pm|pM)\\b';}},
    a:  {property: 'Period12', getPattern: function() {return '(AM|PM|am|pm|Am|aM|Pm|pM)\\b';}}
  };

  var keys = [];
  for (var k in dateFormatComponents) keys.push(k);
  keys[keys.length - 1] += '\\b';
  keys.push('.');

  var formatComponent = new RegExp(keys.join('\\b|'));
  keys.pop();
  var formatReplacer = new RegExp(keys.join('\\b|'), 'g');

  function escapeRegExp(str) {
    // http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex
    return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
  }

  function padLeft(s, l, c) {
    if (l < s.length) return s;
    else return Array(l - s.length + 1).join(c || ' ') + s;
  }

  function getTemplate(timeIcon, pickDate, pickTime, is12Hours, showSeconds, collapse) {
    if (pickDate && pickTime) {
      return (
        '<div class="bootstrap-datetimepicker-widget dropdown-menu">' +
          '<ul>' +
            '<li' + (collapse ? ' class="collapse in"' : '') + '>' +
              '<div class="datepicker">' +
                DPGlobal.template +
              '</div>' +
            '</li>' +
            '<li class="picker-switch accordion-toggle"><a><i class="' + timeIcon + '"></i></a></li>' +
            '<li' + (collapse ? ' class="collapse"' : '') + '>' +
              '<div class="timepicker">' +
                TPGlobal.getTemplate(is12Hours, showSeconds) +
              '</div>' +
            '</li>' +
          '</ul>' +
        '</div>'
      );
    } else if (pickTime) {
      return (
        '<div class="bootstrap-datetimepicker-widget dropdown-menu">' +
          '<div class="timepicker">' +
            TPGlobal.getTemplate(is12Hours, showSeconds) +
          '</div>' +
        '</div>'
      );
    } else {
      return (
        '<div class="bootstrap-datetimepicker-widget dropdown-menu">' +
          '<div class="datepicker">' +
            DPGlobal.template +
          '</div>' +
        '</div>'
      );
    }
  }

  function UTCDate() {
    return new Date(Date.UTC.apply(Date, arguments));
  }

  var DPGlobal = {
    modes: [
      {
      clsName: 'days',
      navFnc: 'UTCMonth',
      navStep: 1
    },
    {
      clsName: 'months',
      navFnc: 'UTCFullYear',
      navStep: 1
    },
    {
      clsName: 'years',
      navFnc: 'UTCFullYear',
      navStep: 10
    }],
    isLeapYear: function (year) {
      return (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0))
    },
    getDaysInMonth: function (year, month) {
      return [31, (DPGlobal.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month]
    },
    headTemplate:
      '<thead>' +
        '<tr>' +
          '<th class="prev">&lsaquo;</th>' +
          '<th colspan="5" class="switch"></th>' +
          '<th class="next">&rsaquo;</th>' +
        '</tr>' +
      '</thead>',
    contTemplate: '<tbody><tr><td colspan="7"></td></tr></tbody>'
  };
  DPGlobal.template =
    '<div class="datepicker-days">' +
      '<table class="table-condensed">' +
        DPGlobal.headTemplate +
        '<tbody></tbody>' +
      '</table>' +
    '</div>' +
    '<div class="datepicker-months">' +
      '<table class="table-condensed">' +
        DPGlobal.headTemplate +
        DPGlobal.contTemplate+
      '</table>'+
    '</div>'+
    '<div class="datepicker-years">'+
      '<table class="table-condensed">'+
        DPGlobal.headTemplate+
        DPGlobal.contTemplate+
      '</table>'+
    '</div>';
  var TPGlobal = {
    hourTemplate: '<span data-action="showHours" data-time-component="hours" class="timepicker-hour"></span>',
    minuteTemplate: '<span data-action="showMinutes" data-time-component="minutes" class="timepicker-minute"></span>',
    secondTemplate: '<span data-action="showSeconds" data-time-component="seconds" class="timepicker-second"></span>'
  };
  TPGlobal.getTemplate = function(is12Hours, showSeconds) {
    return (
    '<div class="timepicker-picker">' +
      '<table class="table-condensed"' +
        (is12Hours ? ' data-hour-format="12"' : '') +
        '>' +
        '<tr>' +
          '<td><a href="#" class="btn" data-action="incrementHours"><i class="icon-chevron-up"></i></a></td>' +
          '<td class="separator"></td>' +
          '<td><a href="#" class="btn" data-action="incrementMinutes"><i class="icon-chevron-up"></i></a></td>' +
          (showSeconds ?
          '<td class="separator"></td>' +
          '<td><a href="#" class="btn" data-action="incrementSeconds"><i class="icon-chevron-up"></i></a></td>': '')+
          (is12Hours ? '<td class="separator"></td>' : '') +
        '</tr>' +
        '<tr>' +
          '<td>' + TPGlobal.hourTemplate + '</td> ' +
          '<td class="separator">:</td>' +
          '<td>' + TPGlobal.minuteTemplate + '</td> ' +
          (showSeconds ?
          '<td class="separator">:</td>' +
          '<td>' + TPGlobal.secondTemplate + '</td>' : '') +
          (is12Hours ?
          '<td class="separator"></td>' +
          '<td>' +
          '<button type="button" class="btn btn-primary" data-action="togglePeriod"></button>' +
          '</td>' : '') +
        '</tr>' +
        '<tr>' +
          '<td><a href="#" class="btn" data-action="decrementHours"><i class="icon-chevron-down"></i></a></td>' +
          '<td class="separator"></td>' +
          '<td><a href="#" class="btn" data-action="decrementMinutes"><i class="icon-chevron-down"></i></a></td>' +
          (showSeconds ?
          '<td class="separator"></td>' +
          '<td><a href="#" class="btn" data-action="decrementSeconds"><i class="icon-chevron-down"></i></a></td>': '') +
          (is12Hours ? '<td class="separator"></td>' : '') +
        '</tr>' +
      '</table>' +
    '</div>' +
    '<div class="timepicker-hours" data-action="selectHour">' +
      '<table class="table-condensed">' +
      '</table>'+
    '</div>'+
    '<div class="timepicker-minutes" data-action="selectMinute">' +
      '<table class="table-condensed">' +
      '</table>'+
    '</div>'+
    (showSeconds ?
    '<div class="timepicker-seconds" data-action="selectSecond">' +
      '<table class="table-condensed">' +
      '</table>'+
    '</div>': '')
    );
  }


})(window.jQuery)


/***/ }),
/* 373 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/channel/tab/properties/general/category-tree.html ***!
  \******************************************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"AknFieldContainer-header\">\n    <label class=\"AknFieldContainer-label control-label required\" for=\"pim_enrich_channel_form_category_tree\">\n        <%- label %> <em><%- requiredLabel %></em>\n    </label>\n</div>\n<div class=\"AknFieldContainer-inputContainer\">\n    <select class=\"select2\" id=\"pim_enrich_channel_form_category_tree\">\n        <% _.each(categories, function (category) { %>\n        <option value=\"<%- category.code %>\" <%- (categoryTree == category.code) ? 'selected' : '' %> >\n            <%- i18n.getLabel(category.labels, catalogLocale, category.code) %>\n        </option>\n        <% }); %>\n    </select>\n</div>\n<div class=\"AknFieldContainer-footer\">\n    <div class=\"AknFieldContainer-validationErrors validation-errors\">\n        <% _.each(errors, function (error) { %>\n        <div class=\"AknFieldContainer-validationError\">\n            <i class=\"icon-warning-sign\"></i><%- error %>\n        </div>\n        <% }); %>\n    </div>\n</div>\n"

/***/ }),
/* 374 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/filter/simpleselect.html ***!
  \*****************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<label class=\"control-label required\"><%- field %></label>\n<div class=\"controls\">\n    <input type=\"text\" name=\"filter-operator\" value=\"<%- operator %>\"/>\n    <input\n        class=\"select2\"\n        name=\"filter-value\"\n        type=\"hidden\"\n        value=\"<%- value ? value : '' %>\"\n    />\n    <% if (removable) { %><i class=\"remove icon-trash\"></i><% } %>\n</div>\n"

/***/ }),
/* 375 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/form/save.html ***!
  \*******************************************************************************/
/***/ (function(module, exports) {

module.exports = "<button class=\"AknButton AknButton--apply AknButton--withIcon save\">\n    <i class=\"AknButton-icon icon-ok\"></i>\n    <%- label %>\n</button>\n"

/***/ }),
/* 376 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/templates/form/tab/history.html ***!
  \**************************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"grid-drop\" data-type=\"datagrid\"></div>\n"

/***/ }),
/* 377 */
/* unknown exports provided */
/* all exports used */
/*!********************************!*\
  !*** ./~/text-loader/index.js ***!
  \********************************/
/***/ (function(module, exports) {

module.exports = function (content) {
  this.cacheable && this.cacheable();
  this.value = content;
  return "module.exports = " + JSON.stringify(content);
}


/***/ }),
/* 378 */,
/* 379 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/js/datafilter-builder.js ***!
  \*********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1), __webpack_require__(/*! underscore */ 0), __webpack_require__(/*! oro/tools */ 58), __webpack_require__(/*! oro/mediator */ 6), __webpack_require__(/*! oro/datafilter/collection-filters-manager */ 319)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, _, tools,  mediator, FiltersManager) {
    'use strict';

    var initialized = false,
        filterModuleName = 'oro/datafilter/{{type}}-filter',
        filterTypes = {
            string:      'choice',
            choice:      'select',
            selectrow:   'select-row',
            multichoice: 'multiselect',
            boolean:     'select'
        },
        methods = {
            initBuilder: function () {
                this.metadata = _.extend({filters: {}}, this.$el.data('metadata'));
                this.modules = {};
                methods.collectModules.call(this);
                tools.loadModules(this.modules, _.bind(methods.build, this));
            },

            /**
             * Collects required modules
             */
            collectModules: function () {
                var modules = this.modules;
                _.each((this.metadata.filters || {}) || {}, function (filter) {
                     var type = filter.type;
                     modules[type] = filterModuleName.replace('{{type}}', filterTypes[type] || type);
                });
            },

            build: function () {
                var options = methods.combineOptions.call(this);
                options.collection = this.collection;
                var filtersList = new FiltersManager(options);
                this.$el.prepend(filtersList.render().$el);
                mediator.trigger('datagrid_filters:rendered', this.collection);
                if (this.collection.length === 0) {
                    filtersList.$el.hide();
                }
                mediator.trigger('datagrid_filters:build.post', filtersList);
            },

            /**
             * Process metadata and combines options for filters
             *
             * @returns {Object}
             */
            combineOptions: function () {
                var filters= {},
                    modules = this.modules,
                    collection = this.collection;
                _.each(this.metadata.filters, function (options) {
                    if (_.has(options, 'name') && _.has(options, 'type')) {
                        // @TODO pass collection only for specific filters
                        if (options.type == 'selectrow') {
                            options.collection = collection
                        }
                        filters[options.name] = new (modules[options.type].extend(options))(options);
                    }
                });
                return {filters: filters};
            }
        },
        initHandler = function (collection, $el) {
            methods.initBuilder.call({$el: $el, collection: collection});
            initialized = true;
        };

    return {
        init: function () {
            initialized = false;

            mediator.once('datagrid_collection_set_after', initHandler);
            mediator.once('hash_navigation_request:start', function() {
                if (!initialized) {
                    mediator.off('datagrid_collection_set_after', initHandler);
                }
            });
        }
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 380 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/js/datafilter/filter/ajax-choice-filter.js ***!
  \***************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1), __webpack_require__(/*! underscore */ 0), __webpack_require__(/*! oro/datafilter/multiselect-filter */ 321), __webpack_require__(/*! routing */ 4)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, _, MultiSelectFilter, Routing) {
        'use strict';

        return MultiSelectFilter.extend({
            choicesFetched: false,
            choiceUrl: null,
            choiceUrlParams: {},

            initialize: function(options) {
                options = options || {};
                if (_.has(options, 'choiceUrl')) {
                    this.choiceUrl = options.choiceUrl;
                }
                if (_.has(options, 'choiceUrlParams')) {
                    this.choiceUrlParams = options.choiceUrlParams;
                }

                MultiSelectFilter.prototype.initialize.apply(this, arguments);
            },

            render: function () {
                var options =  this.choices.slice(0);
                this.$el.empty();

                if (this.populateDefault) {
                    options.unshift({value: '', label: this.placeholder});
                }

                this.$el.append(
                    this.template({
                        label: this.label,
                        showLabel: this.showLabel,
                        options: options,
                        placeholder: this.placeholder,
                        nullLink: this.nullLink,
                        canDisable: this.canDisable,
                        emptyValue: this.emptyValue
                    })
                );

                if (this.value.value) {
                    _.each(this.value.value, function(item) {
                        this.$(this.inputSelector).find('option[value="' + item + '"]').attr('selected', 'selected');
                    }, this);
                }

                this._initializeSelectWidget();

                return this;
            },

            show: function() {
                if (!this.choicesFetched && !this.choices.length && this.choiceUrl) {
                    var url = Routing.generate(this.choiceUrl, this.choiceUrlParams);

                    $.get(url, _.bind(function(data) {
                        this._updateChoices(data.results);
                        this.render();

                        MultiSelectFilter.prototype.show.apply(this, arguments);
                    }, this));
                } else {
                    MultiSelectFilter.prototype.show.apply(this, arguments);
                }
            },

            _updateChoices: function(results) {
                var choices = [];

                _.each(results, function(result) {
                    choices.push({ value: result.id, label: result.text });
                });
                choices.push({ value: 'empty', label: _.__('pim.grid.ajax_choice_filter.label_empty') });
                choices.push({ value: 'not empty', label: _.__('pim.grid.ajax_choice_filter.label_not_empty') });

                this.choices        = choices;
                this.choicesFetched = true;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 381 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/js/datafilter/filter/datetime-filter.js ***!
  \************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global define */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1), __webpack_require__(/*! underscore */ 0), __webpack_require__(/*! oro/datafilter/date-filter */ 320), __webpack_require__(/*! pim/date-context */ 160)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, _, DateFilter, DateContext) {
    'use strict';
    /**
     * Datetime filter: filter type as option + interval begin and end dates
     *
     * @export  oro/datafilter/datetime-filter
     * @class   oro.datafilter.DatetimeFilter
     * @extends oro.datafilter.DateFilter
     */
    return DateFilter.extend({
        /**
         * CSS class for visual datetime input elements
         *
         * @property
         */
        inputClass: 'datetime-visual-element',

        /**
         * Date widget options
         *
         * @property
         */
        datetimepickerOptions: {
            format: DateContext.get('time').format,
            defaultFormat: DateContext.get('time').defaultFormat,
            language: DateContext.get('language'),
            pickTime: true,
            pickSeconds: false,
            pick12HourFormat: DateContext.get('12_hour_format'),
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 382 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/js/datafilter/filter/metric-filter.js ***!
  \**********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/datafilter/number-filter */ 51),
        __webpack_require__(/*! oro/app */ 19),
        __webpack_require__(/*! pim/template/datagrid/filter/metric-filter */ 194)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, NumberFilter, app, template) {
        'use strict';

        /**
         * Metric filter
         *
         * @author    Romain Monceau <romain@akeneo.com>
         * @copyright 2013 Akeneo SAS (http://www.akeneo.com)
         * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
         *
         * @export  oro/datafilter/metric-filter
         * @class   oro.datafilter.MetricFilter
         * @extends oro.datafilter.NumberFilter
         */
        return NumberFilter.extend({
            /**
             * @inheritDoc
             */
            initialize: function() {
                NumberFilter.prototype.initialize.apply(this, arguments);

                this.on('disable', this._onDisable, this);

            },

            _onDisable: function() {
                this.$('.choicefilter button.dropdown-toggle').first().html(_.__('Action') + '<span class="caret"></span>');
                this.$('.choicefilter button.dropdown-toggle').last().html(_.__('Unit') + '<span class="caret"></span>');
            },

            /**
             * @inheritDoc
             */
            _renderCriteria: function (el) {
                $(el).append(this.popupCriteriaTemplate({
                    name:    this.name,
                    choices: this.choices,
                    units:   this.units
                }));

                return this;
            },

            /**
             * @inheritDoc
             */
            _writeDOMValue: function (value) {
                this._setInputValue(this.criteriaValueSelectors.value, value.value);
                this._setInputValue(this.criteriaValueSelectors.type, value.type);
                this._setInputValue(this.criteriaValueSelectors.unit, value.unit);

                return this;
            },

            /**
             * @inheritDoc
             */
            _readDOMValue: function () {
                return {
                    value: this._getInputValue(this.criteriaValueSelectors.value),
                    type: this._getInputValue(this.criteriaValueSelectors.type),
                    unit: this._getInputValue(this.criteriaValueSelectors.unit)
                };
            },

            /**
             * @inheritDoc
             */
            _getCriteriaHint: function () {
                var value = (arguments.length > 0) ? this._getDisplayValue(arguments[0]) : this._getDisplayValue();
                if (_.contains(['empty', 'not empty'], value.type)) {
                    return this._getChoiceOption(value.type).label;
                }
                if (!value.value) {
                    return this.placeholder;
                } else {
                    var operator = _.find(this.choices, function(choice) {
                        return choice.value == value.type;
                    });
                    operator = operator ? operator.label : '';

                    return operator + ' "' + value.value + ' ' + _.__(value.unit) + '"';
                }
            },

            /**
             * @inheritDoc
             */
            popupCriteriaTemplate: _.template(template),

            /**
             * Selectors for filter criteria elements
             *
             * @property {Object}
             */
            criteriaValueSelectors: {
                unit:  'input[name="metric_unit"]',
                type:  'input[name="metric_type"]',
                value: 'input[name="value"]'
            },

            /**
             * Empty value object
             *
             * @property {Object}
             */
            emptyValue: {
                unit:  '',
                type:  '',
                value: ''
            },

            /**
             * @inheritDoc
             */
            _triggerUpdate: function(newValue, oldValue) {
                if (!app.isEqualsLoosely(newValue, oldValue)) {
                    this.trigger('update');
                }
            },

            /**
             * @inheritDoc
             */
            _onValueUpdated: function(newValue, oldValue) {
                var menu = this.$('.choicefilter .dropdown-menu');

                menu.find('li a').each(function() {
                    var item = $(this),
                        value = item.data('value');

                    if (item.parent().hasClass('active')) {
                        if (value == newValue.type || value == newValue.unit) {
                            item.parent().removeClass('active');
                        } else {
                        }
                    } else if (value == newValue.type || value == newValue.unit) {
                        item.parent().addClass('active');
                        item.closest('.btn-group').find('button').html(item.html() + '<span class="caret"></span>');
                    }
                });
                if (_.contains(['empty', 'not empty'], newValue.type)) {
                    this.$(this.criteriaValueSelectors.value).hide().siblings('.btn-group:eq(1)').hide();
                } else {
                    this.$(this.criteriaValueSelectors.value).show().siblings('.btn-group:eq(1)').show();
                }

                this._triggerUpdate(newValue, oldValue);
                this._updateCriteriaHint();
            },

            /**
             * @inheritDoc
             */
            setValue: function(value) {
                value = this._formatRawValue(value);
                if (this._isNewValueUpdated(value)) {
                    var oldValue = this.value;
                    this.value = app.deepClone(value);
                    this._updateDOMValue();
                    this._onValueUpdated(this.value, oldValue);
                }

                return this;
            },

            /**
             * @inheritDoc
             */
            _onClickChoiceValue: function(e) {
                NumberFilter.prototype._onClickChoiceValue.apply(this, arguments);
                var parentDiv = $(e.currentTarget).closest('.metricfilter');
                if (_.contains(['empty', 'not empty'], $(e.currentTarget).attr('data-value'))) {
                    parentDiv.find('input[name="value"], .btn-group:eq(1)').hide();
                } else {
                    parentDiv.find('input[name="value"], .btn-group:eq(1)').show();
                }
            },

            /**
             * @inheritDoc
             */
            reset: function() {
                this.setValue(this.emptyValue);
                this.trigger('update');

                return this;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 383 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/js/datafilter/filter/none-filter.js ***!
  \********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global define */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1), __webpack_require__(/*! underscore */ 0), __webpack_require__(/*! oro/translator */ 3), __webpack_require__(/*! oro/datafilter/abstract-filter */ 50)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, _, __, AbstractFilter) {
    'use strict';

    /**
     * None filter: an empty filter implements 'null object' pattern
     *
     * Triggers events:
     *  - "disable" when filter is disabled
     *
     * @export  oro/datafilter/none-filter
     * @class   oro.datafilter.NoneFilter
     * @extends oro.datafilter.AbstractFilter
     */
    return AbstractFilter.extend({
        /**
         * Filter template
         *
         * @property
         */
        template: _.template(
            '<button type="button" class="btn filter-criteria-selector oro-drop-opener oro-dropdown-toggle">' +
                '<% if (showLabel) { %><%= label %>: <% } %>' +
                '<span class="filter-criteria-hint"><%= criteriaHint %></span>' +
                '<span class="caret"></span>' +
            '</button>' +
            '<% if (canDisable) { %><a href="<%= nullLink %>" class="AknFilterBox-disableFilter disable-filter"><i class="icon-remove hide-text"><%- _.__("Close") %></i></a><% } %>' +
            '<div class="filter-criteria dropdown-menu" />'
        ),

        /**
         * Template for filter criteria
         *
         * @property
         */
        popupCriteriaTemplate: _.template(
            '<div>' +
                '<%= popupHint %>' +
            '</div>'
        ),

        /**
         * @property {Boolean}
         */
        popupCriteriaShowed: false,

        /**
         * Selector to element of criteria hint
         *
         * @property {String}
         */
        criteriaHintSelector: '.filter-criteria-hint',

        /**
         * Selector to criteria popup container
         *
         * @property {String}
         */
        criteriaSelector: '.filter-criteria',

        /**
         * A value showed as filter's popup hint
         *
         * @property {String}
         */
        popupHint: 'Choose a value first',

        /**
         * View events
         *
         * @property {Object}
         */
        events: {
            'click .filter-criteria-selector': '_onClickCriteriaSelector',
            'click .filter-criteria .filter-criteria-hide': '_onClickCloseCriteria',
            'click .disable-filter': '_onClickDisableFilter'
        },

        /**
         * Initialize.
         *
         * @param {Object} options
         */
        initialize: function(options) {
            options = options || {};
            if (_.has(options, 'popupHint')) {
                this.popupHint = options.popupHint;
            }
            this.label = 'None';
            AbstractFilter.prototype.initialize.apply(this, arguments);
        },

        /**
         * Makes sure the criteria popup dialog is closed
         */
        ensurePopupCriteriaClosed: function () {
            if (this.popupCriteriaShowed) {
                this._hideCriteria();
            }
        },

        /**
         * Handle click on criteria selector
         *
         * @param {Event} e
         * @protected
         */
        _onClickCriteriaSelector: function(e) {
            e.stopPropagation();
            $('body').trigger('click');
            if (!this.popupCriteriaShowed) {
                this._showCriteria();
            } else {
                this._hideCriteria();
            }
        },

        /**
         * Handle click on criteria close button
         *
         * @private
         */
        _onClickCloseCriteria: function() {
            this._hideCriteria();
            this._updateDOMValue();
        },

        /**
         * Handle click on filter disabler
         *
         * @param {Event} e
         */
        _onClickDisableFilter: function(e) {
            e.preventDefault();
            this.disable();
        },

        /**
         * Handle click outside of criteria popup to hide it
         *
         * @param {Event} e
         * @protected
         */
        _onClickOutsideCriteria: function(e) {
            var elem = this.$(this.criteriaSelector);

            if (elem.get(0) !== e.target && !elem.has(e.target).length) {
                this._hideCriteria();
                e.stopPropagation();
            }
        },

        /**
         * Render filter view
         *
         * @return {*}
         */
        render: function () {
            this.$el.empty();
            this.$el.append(
                this.template({
                    label: this.label,
                    showLabel: this.showLabel,
                    criteriaHint:  this._getCriteriaHint(),
                    nullLink: this.nullLink,
                    canDisable: this.canDisable
                })
            );

            this._renderCriteria(this.$(this.criteriaSelector));
            this._clickOutsideCriteriaCallback = _.bind(function(e) {
                if (this.popupCriteriaShowed) {
                    this._onClickOutsideCriteria(e);
                }
            }, this);
            $('body').on('click', this._clickOutsideCriteriaCallback);

            return this;
        },

        /**
         * Render filter criteria popup
         *
         * @param {Object} el
         * @protected
         * @return {*}
         */
        _renderCriteria: function(el) {
            $(el).append(
                this.popupCriteriaTemplate({
                    popupHint: this._getPopupHint()
                })
            );
            return this;
        },

        /**
         * Unsubscribe from click on body event
         *
         * @return {*}
         */
        remove: function() {
            $('body').off('click', this._clickOutsideCriteriaCallback);
            AbstractFilter.prototype.remove.call(this);
            return this;
        },

        /**
         * Show criteria popup
         *
         * @protected
         */
        _showCriteria: function() {
            this.$(this.criteriaSelector).show();
            this._setButtonPressed(this.$(this.criteriaSelector), true);
            setTimeout(_.bind(function() {
                this.popupCriteriaShowed = true;
            }, this), 100);
        },

        /**
         * Hide criteria popup
         *
         * @protected
         */
        _hideCriteria: function() {
            this.$(this.criteriaSelector).hide();
            this._setButtonPressed(this.$(this.criteriaSelector), false);
            setTimeout(_.bind(function() {
                this.popupCriteriaShowed = false;
            }, this), 100);
        },

        /**
         * @inheritDoc
         */
        _writeDOMValue: function(value) {
            return this;
        },

        /**
         * @inheritDoc
         */
        _readDOMValue: function() {
            return {};
        },

        /**
         * Get popup hint value
         *
         * @return {String}
         * @protected
         */
        _getPopupHint: function() {
            return this.popupHint ? this.popupHint: this.popupHint;
        },

        /**
         * Get criteria hint value
         *
         * @return {String}
         * @protected
         */
        _getCriteriaHint: function() {
            return this.criteriaHint ? this.criteriaHint: this.placeholder;
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 384 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/js/datafilter/filter/price-filter.js ***!
  \*********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1), __webpack_require__(/*! underscore */ 0), __webpack_require__(/*! oro/datafilter/number-filter */ 51), __webpack_require__(/*! oro/app */ 19)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, NumberFilter, app) {
        'use strict';

        /**
         * Price filter
         *
         * @author    Romain Monceau <romain@akeneo.com>
         * @copyright 2013 Akeneo SAS (http://www.akeneo.com)
         * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
         *
         * @export  pim/datafilter/price-filter
         * @class   pim.datafilter.PriceFilter
         * @extends oro.datafilter.NumberFilter
         */
        return NumberFilter.extend({
            /**
             * @inheritDoc
             */
            initialize: function() {
                NumberFilter.prototype.initialize.apply(this, arguments);

                this.on('disable', this._onDisable, this);

            },

            _onDisable: function() {
                this.$('.choicefilter button.dropdown-toggle').first().html(_.__('Action') + '<span class="AknActionButton-caret AknCaret"></span>');
                this.$('.choicefilter button.dropdown-toggle').last().html(_.__('Currency') + '<span class="AknActionButton-caret AknCaret"></span>');
            },

            /**
             * @inheritDoc
             */
            _renderCriteria: function (el) {
                $(el).append(this.popupCriteriaTemplate({
                    name: this.name,
                    choices: this.choices,
                    currencies: this.currencies
                }));

                return this;
            },

            /**
             * @inheritDoc
             */
            _writeDOMValue: function (value) {
                this._setInputValue(this.criteriaValueSelectors.value, value.value);
                this._setInputValue(this.criteriaValueSelectors.type, value.type);
                this._setInputValue(this.criteriaValueSelectors.currency, value.currency);

                return this;
            },

            /**
             * @inheritDoc
             */
            _readDOMValue: function () {
                return {
                    value: this._getInputValue(this.criteriaValueSelectors.value),
                    type: this._getInputValue(this.criteriaValueSelectors.type),
                    currency: this._getInputValue(this.criteriaValueSelectors.currency)
                };
            },

            /**
             * @inheritDoc
             */
            _getCriteriaHint: function () {
                var value = this._getDisplayValue();
                if (_.contains(['empty', 'not empty'], value.type) && value.currency) {
                    return this._getChoiceOption(value.type).label + ': ' + value.currency;
                }
                if (!value.value) {
                    return this.placeholder;
                } else {
                    var option = this._getChoiceOption(value.type);
                    return option.label + ' ' + value.value + ' ' + value.currency;
                }
            },

            /**
             * @inheritDoc
             */
            popupCriteriaTemplate: _.template(
                '<div class="AknFilterChoice currencyfilter choicefilter">' +
                    '<div class="AknFilterChoice-operator AknDropdown">' +
                        '<button class="AknActionButton AknActionButton--big AknActionButton--noRightBorder dropdown-toggle" data-toggle="dropdown">' +
                            '<%= _.__("Action") %>' +
                            '<span class="AknActionButton-caret AknCaret"></span>' +
                        '</button>' +
                        '<ul class="dropdown-menu">' +
                            '<% _.each(choices, function (option) { %>' +
                                '<li><a class="choice_value" href="#" data-value="<%= option.value %>" data-input-toggle="true"><%= option.label %></a></li>' +
                            '<% }); %>' +
                        '</ul>' +
                        '<input class="name_input" type="hidden" name="currency_type" value=""/>' +
                    '</div>' +
                    '<input class="AknTextField AknTextField--noRadius AknFilterChoice-field" type="text" name="value" value="">' +
                    '<div class="AknDropdown">' +
                        '<button class="AknActionButton AknActionButton--big AknActionButton--noRightBorder AknActionButton--noLeftBorder dropdown-toggle" data-toggle="dropdown">' +
                            '<%= _.__("Currency") %>' +
                            '<span class="AknActionButton-caret AknCaret"></span>' +
                        '</button>' +
                        '<ul class="dropdown-menu">' +
                            '<% _.each(currencies, function (currency) { %>' +
                                '<li><a class="choice_value" href="#" data-value="<%= currency %>"><%= currency %></a></li>' +
                            '<% }); %>' +
                        '</ul>' +
                        '<input class="name_input" type="hidden" name="currency_currency" value=""/>' +
                    '</div>' +
                    '<button class="AknFilterChoice-button AknButton AknButton--apply AknButton--noLeftRadius filter-update" type="button"><%= _.__("Update") %></button>' +
                '</div>'
            ),

            /**
             * Selectors for filter criteria elements
             *
             * @property {Object}
             */
            criteriaValueSelectors: {
                currency: 'input[name="currency_currency"]',
                type:     'input[name="currency_type"]',
                value:    'input[name="value"]'
            },

            /**
             * Empty value object
             *
             * @property {Object}
             */
            emptyValue: {
                currency: '',
                type:     '',
                value:    ''
            },

            /**
             * Check if all properties of the value have been specified or all are empty (for reseting filter)
             *
             * @param value
             * @return boolean
             */
            _isValueValid: function(value) {
                return (value.currency && value.type && !_.isUndefined(value.value)) ||
                       (!value.currency && !value.type && _.isUndefined(value.value)) ||
                       (_.contains(['empty', 'not empty'], value.type) && value.currency);
            },

            /**
             * @inheritDoc
             */
            _triggerUpdate: function(newValue, oldValue) {
                if (!app.isEqualsLoosely(newValue, oldValue)) {
                    this.trigger('update');
                }
            },

            /**
             * @inheritDoc
             */
            _onValueUpdated: function(newValue, oldValue) {
                var menu = this.$('.choicefilter .dropdown-menu');

                menu.find('li a').each(function() {
                    var item = $(this),
                        value = item.data('value');

                    if (item.parent().hasClass('active')) {
                        if (value == newValue.type || value == newValue.currency) {
                            item.parent().removeClass('active');
                        } else {
                        }
                    } else if (value == newValue.type || value == newValue.currency) {
                        item.parent().addClass('active');
                        item.closest('.AknDropdown').find('AknActionButton').html(item.html() + '<span class="AknActionButton-caret AknCaret"></span>');
                    }
                });
                if (_.contains(['empty', 'not empty'], newValue.type)) {
                    this.$(this.criteriaValueSelectors.value).hide();
                } else {
                    this.$(this.criteriaValueSelectors.value).show();
                }

                this._triggerUpdate(newValue, oldValue);
                this._updateCriteriaHint();
            },

            /**
             * @inheritDoc
             */
            setValue: function(value) {
                value = this._formatRawValue(value);
                if (this._isNewValueUpdated(value)) {
                    var oldValue = this.value;
                    this.value = app.deepClone(value);
                    this._updateDOMValue();
                    this._onValueUpdated(this.value, oldValue);
                }

                return this;
            },

            /**
             * @inheritDoc
             */
            _onClickChoiceValue: function(e) {
                NumberFilter.prototype._onClickChoiceValue.apply(this, arguments);
                if ($(e.currentTarget).attr('data-input-toggle')) {
                    var filterContainer = $(e.currentTarget).closest('.AknFilterChoice');
                    if (_.contains(['empty', 'not empty'], $(e.currentTarget).attr('data-value'))) {
                        filterContainer.find(this.criteriaValueSelectors.value).hide();
                    } else {
                        filterContainer.find(this.criteriaValueSelectors.value).show();
                    }
                }
            },

            /**
             * @inheritDoc
             */
            reset: function() {
                this.setValue(this.emptyValue);
                this.trigger('update');

                return this;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 385 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/js/datafilter/filter/product_completeness-filter.js ***!
  \************************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ 0), __webpack_require__(/*! oro/datafilter/select-filter */ 162)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, SelectFilter) {
        'use strict';

        /**
         * Scope filter
         *
         * @author    Nicolas Dupont <nicolas@akeneo.com>
         * @copyright 2013 Akeneo SAS (http://www.akeneo.com)
         * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
         *
         * @export  oro/datafilter/product_completeness-filter
         * @class   oro.datafilter.ProductCompletenessFilter
         * @extends oro.datafilter.SelectFilter
         */
        return SelectFilter.extend({});
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 386 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/js/datafilter/filter/product_scope-filter.js ***!
  \*****************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1), __webpack_require__(/*! underscore */ 0), __webpack_require__(/*! oro/mediator */ 6), __webpack_require__(/*! oro/datafilter/select-filter */ 162), __webpack_require__(/*! pim/user-context */ 5), __webpack_require__(/*! pim/datagrid/state */ 44)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, mediator, SelectFilter, UserContext, DatagridState) {
        'use strict';

        /**
         * Scope filter
         *
         * @author    Romain Monceau <romain@akeneo.com>
         * @copyright 2013 Akeneo SAS (http://www.akeneo.com)
         * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
         *
         * @export  oro/datafilter/product_scope-filter
         * @class   oro.datafilter.ScopeFilter
         * @extends oro.datafilter.SelectFilter
         */
        return SelectFilter.extend({
            /**
             * @override
             * @property {Boolean}
             * @see Oro.Filter.SelectFilter
             */
            contextSearch: false,
            catalogScope: null,

            initialize: function() {
                SelectFilter.prototype.initialize.apply(this, arguments);
                this.catalogScope = UserContext.get('catalogScope');

                mediator.once('datagrid_filters:rendered', this.resetValue.bind(this));
                mediator.once('datagrid_filters:rendered', this.moveFilter.bind(this));

                mediator.bind('grid_load:complete', function(collection) {
                    $('#grid-' + collection.inputName).find('div.toolbar').show();
                });
            },

            /**
             * Move the filter to its proper position
             *
             * @param {Array} collection
             */
            moveFilter: function (collection) {
                var $grid = $('#grid-' + collection.inputName);

                if (0 === $grid.length) {
                    $grid = $('[data-type="datagrid"]:first');
                }
                this.$el.addClass('AknFilterBox-filter--inline').insertBefore($grid.find('.actions-panel'));

                var $filterChoices = $grid.find('#add-filter-select');
                $filterChoices.find('option[value="scope"]').remove();
                $filterChoices.multiselect('refresh');

                this.selectWidget.multiselect('refresh');
            },

            /**
             * Update the current filter value using the UserContext.
             */
            resetValue: function () {
                var scope = DatagridState.get('product-grid', 'scope');
                if (!scope) {
                    scope = this.catalogScope;
                }

                this.setValue({value: scope});
                UserContext.set('catalogScope', scope);
                this.selectWidget.multiselect('refresh');
            },

            /**
             * @inheritDoc
             */
            disable: function () {
                return this;
            },

            /**
             * @inheritDoc
             */
            hide: function () {
                return this;
            },

            /**
             * @inheritDoc
             */
            _onValueUpdated: function (newValue) {
                if ('' === newValue.value) {
                    return;
                }

                UserContext.set('catalogScope', newValue.value);

                return SelectFilter.prototype._onValueUpdated.apply(this, arguments);
            },

            /**
             * @inheritDoc
             *
             * Override to save the scope into the product grid state.
             *
             * We don't put this logic in the setValue method because we want this behavior only when the value
             * comes from a change of the select element, not from a view/url for example.
             */
            _onSelectChange: function() {
                SelectFilter.prototype._onSelectChange.apply(this, arguments);

                var value = this._formatRawValue(this._readDOMValue());
                DatagridState.set('product-grid', 'scope', value.value);
            },

            /**
             * Filter template
             *
             * @override
             * @property
             * @see Oro.Filter.SelectFilter
             */
            template: _.template(
                '<div class="AknActionButton filter-select filter-criteria-selector scope-filter">' +
                    '<i class="icon-eye-open" title="<%= label %>"></i>' +
                    '<select>' +
                        '<% _.each(options, function (option) { %>' +
                            '<option value="<%= option.value %>"><%= option.label %></option>' +
                        '<% }); %>' +
                    '</select>' +
                '</div>'
            )
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 387 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/js/datafilter/filter/select-row-filter.js ***!
  \**************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global define */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ 0), __webpack_require__(/*! backbone */ 2), __webpack_require__(/*! oro/datafilter/select-filter */ 162)], __WEBPACK_AMD_DEFINE_RESULT__ = function(_, Backbone, SelectFilter) {
    'use strict';

    /**
     * Fetches information of rows selection
     * and implements filter by selected/Not selected rows
     *
     * @export  oro/datafilter/select-row-filter
     * @class   oro.datafilter.SelectRowFilter
     * @extends oro.datafilter.SelectFilter
     */
    return SelectFilter.extend({

        /**
         * Fetches raw format value on getting current value
         * in order to give always actual information about selected rows
         *
         * @return {Object}
         */
        getValue: function() {
            return this._formatRawValue(_.omit(this.value, 'in', 'out'));
        },

        /**
         * Converts a display value into raw format. Adds to value 'in' or 'out' property
         * with comma-separated string of ids, e.g. {'in': '4,35,23,65'} or {'out': '7,31,63,12'}
         *
         * @param {Object} value
         * @return {Object}
         * @protected
         */
        _formatRawValue: function(value) {
            // if a display value already contains raw information assume it's an initialization
            if (_.has(value, 'in') || _.has(value, 'out')) {
                this._initialSelection(value);
            }
            if (value.value !== '') {
                var ids = this._getSelection(),
                    scope;
                if (_.isArray(ids.selected)) {
                    scope = (ids.inset === Boolean(parseInt(value.value, 10)) ? 'in' : 'out');
                    value[scope] = ids.selected.join(',');
                }
            }
            return value;
        },

        /**
         * Converts a raw value into display format, opposite to _formatRawValue.
         * Removes extra properties of raw value representation.
         *
         * @param {Object} value
         * @return {Object}
         * @protected
         */
        _formatDisplayValue: function(value) {
            return _.omit(value, 'in', 'out');
        },

        /**
         * Fetches selection of grid rows
         * Triggers an event 'backgrid:getSelected' on collection to get selected rows.
         * oro.datagrid.SelectAllHeaderCell is listening to this event and
         * fills in a passes flat object with selection information
         *
         * @returns {Object}
         * @protected
         */
        _getSelection: function () {
            var selection = {};
            this.collection.trigger('backgrid:getSelected', selection);
            return _.defaults(selection, {inset : true, selected : []});
        },

        /**
         * Triggers selection events for models on grid's initial stage
         * (if display value has raw data, it's initial stage)
         *
         * @param {Object} value
         * @param {string} value.value "0" - not selected, "1" - selected
         * @param {string} value.in comma-separated ids
         * @param {string} value.out comma-separated ids
         * @protected
         */
        _initialSelection: function(value) {
            var checked = true;
            if (Boolean(parseInt(value.value, 10)) !== _.has(value, 'in')) {
                this.collection.trigger('backgrid:selectAll');
                checked = false;
            }
            _.each(
                _.values(_.pick(value, 'in', 'out'))[0].split(',') || [],
                _.partial(function(collection, id) {
                    var model = collection.get(id);
                    if (model instanceof Backbone.Model) {
                        model.trigger("backgrid:select", model, checked);
                    }
                }, this.collection)
            );
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 388 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/js/datafilter/filter/select2-choice-filter.js ***!
  \******************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/datafilter/text-filter */ 52),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! pim/template/datagrid/filter/select2-choice-filter */ 171),
        __webpack_require__(/*! pim/initselect2 */ 30),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! jquery.select2 */ 29)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function($, _, TextFilter, Routing, template, initSelect2, UserContext) {
        'use strict';

        return TextFilter.extend({
            operatorChoices: [],
            choiceUrl: null,
            choiceUrlParams: {},
            emptyChoice: false,
            resultCache: {},
            resultsPerPage: 20,
            choices: [],
            popupCriteriaTemplate: _.template(template),

            events: {
                'click .operator_choice': '_onSelectOperator'
            },

            initialize: function(options) {
                _.extend(this.events, TextFilter.prototype.events);

                options = options || {};
                if (_.has(options, 'choiceUrl')) {
                    this.choiceUrl = options.choiceUrl;
                }
                if (_.has(options, 'choiceUrlParams')) {
                    this.choiceUrlParams = options.choiceUrlParams;
                }
                if (_.has(options, 'emptyChoice')) {
                    this.emptyChoice = options.emptyChoice;
                }

                if (_.isUndefined(this.emptyValue)) {
                    this.emptyValue = {
                        type: 'in',
                        value: ''
                    };
                }

                this.resultCache = {};

                TextFilter.prototype.initialize.apply(this, arguments);
            },

            _onSelectOperator: function(e) {
                $(e.currentTarget).parent().parent().find('li').removeClass('active');
                $(e.currentTarget).parent().addClass('active');
                var parentDiv = $(e.currentTarget).parent().parent().parent();

                if (_.contains(['empty', 'not empty'], $(e.currentTarget).attr('data-value'))) {
                    this._disableInput();
                } else {
                    this._enableInput();
                }
                parentDiv.find('button').html($(e.currentTarget).html() + '<span class="caret"></span>');
                e.preventDefault();
            },

            _enableInput: function() {
                initSelect2.init(this.$(this.criteriaValueSelectors.value), this._getSelect2Config());
                this.$(this.criteriaValueSelectors.value).show();
            },

            _disableInput: function() {
                this.$(this.criteriaValueSelectors.value).val('').select2('destroy');
                this.$(this.criteriaValueSelectors.value).hide();
            },

            _getSelect2Config: function() {
                var config = {
                    multiple: true,
                    width: '290px',
                    minimumInputLength: 0
                };

                if (this.choiceUrl) {
                    config.ajax = {
                        url: Routing.generate(this.choiceUrl, this.choiceUrlParams),
                        cache: true,
                        data: _.bind(function(term, page) {
                            return {
                                search: term,
                                options: {
                                    limit: this.resultsPerPage,
                                    page: page,
                                    locale: UserContext.get('catalogLocale')
                                }
                            };
                        }, this),
                        results: _.bind(function(data) {
                            this._cacheResults(data.results);
                            data.more = this.resultsPerPage === data.results.length;

                            return data;
                        }, this)
                    };
                } else {
                    config.data = _.map(this.choices, function(choice) {
                        return {
                            id: choice.value,
                            text: choice.label
                        };
                    });
                }

                return config;
            },

            _writeDOMValue: function(value) {
                this.$('li .operator_choice[data-value="' + value.type + '"]').trigger('click');
                var operator = this.$('li.active .operator_choice').data('value');
                if (_.contains(['empty', 'not empty'], operator)) {
                    this._setInputValue(this.criteriaValueSelectors.value, []);
                } else {
                    this._setInputValue(this.criteriaValueSelectors.value, value.value);
                }

                return this;
            },

            _readDOMValue: function() {
                var operator = this.emptyChoice ? this.$('li.active .operator_choice').data('value') : 'in';

                return {
                    value: _.contains(['empty', 'not empty'], operator) ? {} : this._getInputValue(this.criteriaValueSelectors.value),
                    type: operator
                };
            },

            _renderCriteria: function(el) {
                this.operatorChoices = {
                    'in':    _.__('pim.grid.choice_filter.label_in_list'),
                    'empty': _.__('pim.grid.choice_filter.label_empty'),
                    'not empty': _.__('pim.grid.choice_filter.label_not_empty')
                };

                $(el).append(
                    this.popupCriteriaTemplate({
                        emptyChoice:           this.emptyChoice,
                        selectedOperatorLabel: this.operatorChoices[this.emptyValue.type],
                        operatorChoices:       this.operatorChoices,
                        selectedOperator:      this.emptyValue.type
                    })
                );

                initSelect2.init(this.$(this.criteriaValueSelectors.value), this._getSelect2Config());
            },

            _onClickCriteriaSelector: function(e) {
                e.stopPropagation();
                $('body').trigger('click');
                if (!this.popupCriteriaShowed) {
                    this._showCriteria();

                    initSelect2.init(this.$(this.criteriaValueSelectors.value), this._getSelect2Config())
                        .select2('data', this._getCachedResults(this.getValue().value))
                        .select2('open');
                } else {
                    this._hideCriteria();
                }
            },

            _onClickCloseCriteria: function() {
                TextFilter.prototype._onClickCloseCriteria.apply(this, arguments);

                this.$(this.criteriaValueSelectors.value).select2('close');
            },

            _onClickOutsideCriteria: function(e) {
                var elem = this.$(this.criteriaSelector);

                if (e.target != $('body').get(0) && e.target !== elem.get(0) && !elem.has(e.target).length) {
                    this._hideCriteria();
                    this.setValue(this._formatRawValue(this._readDOMValue()));
                    e.stopPropagation();
                }
            },

            _onReadCriteriaInputKey: function(e) {
                if (e.which == 13) {
                    this.$(this.criteriaValueSelectors.value).select2('close');
                    this._hideCriteria();
                    this.setValue(this._formatRawValue(this._readDOMValue()));
                }
            },

            _cacheResults: function (results) {
                _.each(results, function (result) {
                    this.resultCache[result.id] = result.text;
                }, this);
            },

            _getCachedResults: function(ids) {
                var results = [],
                    missingResults = [];

                _.each(ids, function(id) {
                    if (_.isUndefined(this.resultCache[id])) {
                        if (_.isEmpty(this.choices)) {
                            missingResults.push(id);
                        } else {
                            var choice = _.findWhere(this.choices, { value: id });
                            if (_.isUndefined(choice)) {
                                missingResults.push(id);
                            } else {
                                results.push({ id: choice.value, text: choice.label });
                            }
                        }
                    } else {
                        results.push({ id: id, text: this.resultCache[id] });
                    }
                }, this);

                if (missingResults.length) {
                    var params = { options: { ids: missingResults } };

                    $.ajax({
                        url: Routing.generate(this.choiceUrl, this.choiceUrlParams) + '&' + $.param(params),
                        success: _.bind(function(data) {
                            this._cacheResults(data.results);
                            results = _.union(results, data.results);
                        }, this),
                        async: false
                    });
                }

                return results;
            },

            _getInputValue: function(input) {
                return this.$(input).select2('val');
            },

            _setInputValue: function(input, value) {
                this.$(input).select2('data', this._getCachedResults(value));

                return this;
            },

            _updateDOMValue: function() {
                return this._writeDOMValue(this.getValue());
            },

            _formatDisplayValue: function(value) {
                if (_.isEmpty(value.value)) {
                    return value;
                }

                return {
                    value: _.pluck(this._getCachedResults(value.value), 'text').join(', ')
                };
            },

            _getCriteriaHint: function() {
                var operator = this.$('li.active .operator_choice').data('value');
                if (_.contains(['empty', 'not empty'], operator)) {
                    return this.operatorChoices[operator];
                }

                var value = (arguments.length > 0) ? this._getDisplayValue(arguments[0]) : this._getDisplayValue();
                return !_.isEmpty(value.value) ? '"' + value.value + '"': this.placeholder;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 389 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/js/datafilter/filter/select2-rest-choice-filter.js ***!
  \***********************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! oro/datafilter/text-filter */ 52),
        __webpack_require__(/*! pim/formatter/choices/base */ 46),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! pim/template/datagrid/filter/select2-choice-filter */ 171),
        __webpack_require__(/*! pim/initselect2 */ 30),
        __webpack_require__(/*! jquery.select2 */ 29)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function($, _, __, Routing, TextFilter, ChoicesFormatter, UserContext, template, initSelect2) {
        return TextFilter.extend({
            operatorChoices: [],
            choiceUrl: null,
            choiceUrlParams: {},
            emptyChoice: false,
            resultsPerPage: 20,
            popupCriteriaTemplate: _.template(template),

            events: {
                'click .operator_choice': '_onSelectOperator'
            },

            initialize: function(options) {
                _.extend(this.events, TextFilter.prototype.events);

                if (!_.isUndefined(options)) {
                    _.extend(this, _.pick(options, 'choiceUrl', 'choiceUrlParams', 'emptyChoice'));
                }

                if (_.isUndefined(this.emptyValue)) {
                    this.emptyValue = {
                        type: 'in',
                        value: ''
                    };
                }

                TextFilter.prototype.initialize.apply(this, arguments);
            },

            _onSelectOperator: function(e) {
                $(e.currentTarget).parent().parent().find('li').removeClass('active');
                $(e.currentTarget).parent().addClass('active');
                var parentDiv = $(e.currentTarget).parent().parent().parent();

                if (_.contains(['empty', 'not empty'], $(e.currentTarget).attr('data-value'))) {
                    this._disableInput();
                } else {
                    this._enableInput();
                }
                parentDiv.find('button').html($(e.currentTarget).html() + '<span class="caret"></span>');
                e.preventDefault();
            },

            _enableInput: function() {
                this.$(this.criteriaValueSelectors.value).select2(this._getSelect2Config());
                this.$(this.criteriaValueSelectors.value).show();
            },

            _disableInput: function() {
                this.$(this.criteriaValueSelectors.value).val('').select2('destroy');
                this.$(this.criteriaValueSelectors.value).hide();
            },

            _getSelect2Config: function() {
                var config = {
                    multiple: true,
                    width: '290px',
                    minimumInputLength: 0
                };

                if (null !== this.choiceUrl) {
                    config.ajax = {
                        url: Routing.generate(this.choiceUrl, this.choiceUrlParams),
                        cache: true,
                        data: function(term, page) {
                                return {
                                    search: term,
                                    options: {
                                        limit: this.resultsPerPage,
                                        page: page,
                                        locale: UserContext.get('catalogLocale')
                                    }
                                };
                            }.bind(this),
                        results: function(data) {
                                data.results = ChoicesFormatter.format(data);
                                data.more    = this.resultsPerPage === data.results.length;

                                return data;
                            }.bind(this)
                    };
                }

                return config;
            },

            _writeDOMValue: function(value) {
                this.$('li .operator_choice[data-value="' + value.type + '"]').trigger('click');
                var operator = this.$('li.active .operator_choice').data('value');
                if (_.contains(['empty', 'not empty'], operator)) {
                    this._setInputValue(this.criteriaValueSelectors.value, []);
                } else {
                    this._setInputValue(this.criteriaValueSelectors.value, value.value);
                }

                return this;
            },

            _readDOMValue: function() {
                var operator = this.emptyChoice ? this.$('li.active .operator_choice').data('value') : 'in';

                return {
                    value: _.contains(['empty', 'not empty'], operator) ? {} : this._getInputValue(this.criteriaValueSelectors.value),
                    type: operator
                };
            },

            _renderCriteria: function(el) {
                this.operatorChoices = {
                    'in':        __('pim.grid.choice_filter.label_in_list'),
                    'empty':     __('pim.grid.choice_filter.label_empty'),
                    'not empty': __('pim.grid.choice_filter.label_not_empty')
                };

                $(el).append(
                    this.popupCriteriaTemplate({
                        emptyChoice:           this.emptyChoice,
                        selectedOperatorLabel: this.operatorChoices[this.emptyValue.type],
                        operatorChoices:       this.operatorChoices,
                        selectedOperator:      this.emptyValue.type
                    })
                );

                initSelect2.init(this.$(this.criteriaValueSelectors.value), this._getSelect2Config());
            },

            _onClickCriteriaSelector: function(e) {
                e.stopPropagation();
                $('body').trigger('click');
                if (!this.popupCriteriaShowed) {
                    this._showCriteria();
                    this.$(this.criteriaValueSelectors.value).select2('open');
                } else {
                    this._hideCriteria();
                }
            },

            _onClickCloseCriteria: function() {
                TextFilter.prototype._onClickCloseCriteria.apply(this, arguments);

                this.$(this.criteriaValueSelectors.value).select2('close');
            },

            _onClickOutsideCriteria: function(e) {
                var elem = this.$(this.criteriaSelector);

                if (e.target != $('body').get(0) && e.target !== elem.get(0) && !elem.has(e.target).length) {
                    this._hideCriteria();
                    this.setValue(this._formatRawValue(this._readDOMValue()));
                    e.stopPropagation();
                }
            },

            _onReadCriteriaInputKey: function(e) {
                if (e.which == 13) {
                    this.$(this.criteriaValueSelectors.value).select2('close');
                    this._hideCriteria();
                    this.setValue(this._formatRawValue(this._readDOMValue()));
                }
            },

            _getResults: function(identifiers) {
                var results = [];
                var params  = {options: {identifiers: identifiers}};

                $.ajax({
                    url: Routing.generate(this.choiceUrl, this.choiceUrlParams) + '?' + $.param(params),
                    success: function(data) {
                        results = ChoicesFormatter.format(data);
                    },
                    async: false
                });

                return results;
            },

            _getInputValue: function(input) {
                return this.$(input).select2('val');
            },

            _setInputValue: function(input, value) {
                this.$(input).select2('data', this._getResults(value));

                return this;
            },

            _updateDOMValue: function() {
                var currentValue = this.getValue();
                var data         = this.$(this.criteriaValueSelectors.value).select2('data');
                if (0 === _.difference(currentValue.value, _.pluck(data, 'id')).length) {
                    return;
                }

                return this._writeDOMValue(currentValue);
            },

            _formatDisplayValue: function(value) {
                if (_.isEmpty(value.value)) {
                    return value;
                }

                return {
                    value: _.pluck(
                        this.$(this.criteriaValueSelectors.value).select2('data'),
                        'text'
                    ).join(', ')
                };
            },

            _getCriteriaHint: function() {
                var operator = this.$('li.active .operator_choice').data('value');
                if (_.contains(['empty', 'not empty'], operator)) {
                    return this.operatorChoices[operator];
                }

                var value = (arguments.length > 0) ? this._getDisplayValue(arguments[0]) : this._getDisplayValue();

                return !_.isEmpty(value.value) ? '"' + value.value + '"': this.placeholder;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 390 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/js/datafilter/formatter/abstract-formatter.js ***!
  \******************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/* global define */
!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
    'use strict';

    /**
     * Just a convenient class for interested parties to subclass.
     *
     * The default Cell classes don't require the formatter to be a subclass of
     * Formatter as long as the fromRaw(rawData) and toRaw(formattedData) methods
     * are defined.
     *
     * @abstract
     * @export  oro/datafilter/abstract-formatter
     * @class   oro.datafilter.AbstractFormatter
     */
    var AbstractFormatter = function() {};

    AbstractFormatter.prototype = {
        /**
         * Takes a raw value from a model and returns a formatted string for display.
         *
         * @memberOf oro.datafilter.AbstractFormatter
         * @param {*} rawData
         * @return {string}
         */
        fromRaw: function(rawData) {
            return rawData;
        },

        /**
         * Takes a formatted string, usually from user input, and returns a
         * appropriately typed value for persistence in the model.
         *
         * If the user input is invalid or unable to be converted to a raw value
         * suitable for persistence in the model, toRaw must return `undefined`.
         *
         * @memberOf oro.datafilter.AbstractFormatter
         * @param {string} formattedData
         * @return {*|undefined}
         */
        toRaw: function(formattedData) {
            return formattedData;
        }
    };

    return AbstractFormatter;
}.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 391 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/js/datagrid/action/configure-columns-action.js ***!
  \*******************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! oro/loading-mask */ 18),
        __webpack_require__(/*! pim/datagrid/state */ 44),
        __webpack_require__(/*! pim/common/column-list-view */ 325),
        __webpack_require__(/*! bootstrap-modal */ 33),
        __webpack_require__(/*! jquery-ui */ 48)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function(
        $,
        _,
        __,
        Backbone,
        Routing,
        LoadingMask,
        DatagridState,
        ColumnListView
    ) {
        var Column = Backbone.Model.extend({
            defaults: {
                removable: true,
                label: '',
                displayed: false,
                group: __('system_filter_group')
            }
        });

        var ColumnList = Backbone.Collection.extend({ model: Column });

        /**
         * Configure columns action
         *
         * @export  pim/datagrid/configure-columns-action
         * @class   pim.datagrid.ConfigureColumnsAction
         * @extends Backbone.View
         */
        var ConfigureColumnsAction = Backbone.View.extend({

            locale: null,

            label: _.__('pim_datagrid.column_configurator.label'),

            icon: 'th',

            target: '.AknGridToolbar .actions-panel',

            template: _.template(
                '<div class="AknGridToolbar-actionButton">' +
                    '<a href="javascript:void(0);" class="AknActionButton" title="<%= label %>" id="configure-columns">' +
                        '<i class="icon-<%= icon %>"></i>' +
                        '<%= label %>' +
                    '</a>' +
                '</div>'
            ),

            configuratorTemplate: _.template(
                '<div id="column-configurator" class="AknColumnConfigurator"></div>'
            ),

            initialize: function (options) {
                if (_.has(options, 'label')) {
                    this.label = _.__(options.label);
                }
                if (_.has(options, 'icon')) {
                    this.icon = options.icon;
                }

                if (!options.$gridContainer) {
                    throw new Error('Grid selector is not specified');
                }

                this.$gridContainer = options.$gridContainer;
                this.gridName = options.gridName;
                this.locale = decodeURIComponent(options.url).split('dataLocale]=').pop();

                Backbone.View.prototype.initialize.apply(this, arguments);

                this.render();
            },

            render: function() {
                this.$gridContainer
                    .find(this.target)
                    .append(
                        this.template({
                            icon: this.icon,
                            label: this.label
                        })
                    );
                this.subscribe();
            },

            subscribe: function() {
                $('#configure-columns').one('click', this.execute.bind(this));
            },

            execute: function(e) {
                e.preventDefault();
                var url = Routing.generate('pim_datagrid_view_list_available_columns', {
                    alias: this.gridName,
                    dataLocale: this.locale
                });

                var loadingMask = new LoadingMask();
                loadingMask.render().$el.appendTo($('#container'));
                loadingMask.show();


                $.get(url, _.bind(function (columns) {
                    var displayedCodes = DatagridState.get(this.gridName, 'columns');

                    if (displayedCodes) {
                        displayedCodes = displayedCodes.split(',');
                    } else {
                        displayedCodes = _.pluck(this.$gridContainer.data('metadata').columns, 'name');
                    }

                    displayedCodes = _.map(displayedCodes, function(displayedCode, index) {
                        return {
                            code: displayedCode,
                            position: index
                        }
                    });

                    var columnList = new ColumnList();
                    _.each(columns, function(column) {
                        var displayedCode = _.findWhere(displayedCodes, {code: column.code});
                        if (!_.isUndefined(displayedCode)) {
                            column.displayed = true;
                            column.position = displayedCode.position;
                        }

                        columnList.add(column);
                    });

                    var columnListView = new ColumnListView({collection: columnList});

                    var modal = new Backbone.BootstrapModal({
                        className: 'modal modal-large column-configurator-modal',
                        modalOptions: {
                            backdrop: 'static',
                            keyboard: false
                        },
                        allowCancel: true,
                        okCloses: false,
                        cancelText: _.__('pim_datagrid.column_configurator.cancel'),
                        title: _.__('pim_datagrid.column_configurator.title'),
                        content: this.configuratorTemplate(),
                        okText: _.__('pim_datagrid.column_configurator.apply')
                    });

                    loadingMask.hide();
                    loadingMask.$el.remove();

                    modal.open();
                    columnListView.setElement('#column-configurator').render();

                    modal.on('cancel', this.subscribe.bind(this));
                    modal.on('ok', _.bind(function() {
                        var values = columnListView.getDisplayed();
                        if (!values.length) {
                            return;
                        } else {
                            DatagridState.set(this.gridName, 'columns', values.join(','));
                            modal.close();
                            var url = window.location.hash;
                            Backbone.history.fragment = new Date().getTime();
                            Backbone.history.navigate(url, true);
                        }
                    }, this));
                }, this));
            }
        });

        ConfigureColumnsAction.init = function ($gridContainer, gridName) {
            var metadata = $gridContainer.data('metadata');
            var options = metadata.options || {};
            new ConfigureColumnsAction(
                _.extend({ $gridContainer: $gridContainer, gridName: gridName, url: options.url }, options.configureColumns)
            );
        };

        return ConfigureColumnsAction;
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 392 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/js/datagrid/cell/boolean-cell.js ***!
  \*****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global define */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1), __webpack_require__(/*! underscore */ 0), __webpack_require__(/*! backgrid */ 9)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, _, Backgrid) {
    'use strict';

    Backgrid = Backgrid.Backgrid;

    /**
     * Boolean column cell. Added missing behaviour.
     *
     * @export  oro/datagrid/boolean-cell
     * @class   oro.datagrid.BooleanCell
     * @extends Backgrid.BooleanCell
     */
    return Backgrid.BooleanCell.extend({
        /** @property {Boolean} */
        listenRowClick: true,

        /**
         * @inheritDoc
         */
        render: function() {
            Backgrid.BooleanCell.prototype.render.apply(this, arguments);
            this.$input = this.$el.find('input');
            if (!this.column.get('editable')) {
                this.$input.attr('disabled', 'disabled');
            }
            return this;
        },

        /**
         * @inheritDoc
         */
        enterEditMode: function(e) {
            Backgrid.BooleanCell.prototype.enterEditMode.apply(this, arguments);
            if (this.column.get('editable')) {
                var $editor = this.currentEditor.$el;
                $editor.prop('checked', !$editor.prop('checked')).change();
            }
        },

        /**
         * @param {Backgrid.Row} row
         * @param {Event} e
         */
        onRowClicked: function(row, e) {
            if (!this.$input.is(e.target) && !this.$el.is(e.target) && !this.$el.has(e.target).length){
                this.enterEditMode(e);
            }
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 393 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/js/datagrid/cell/integer-cell.js ***!
  \*****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global define */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ 0), __webpack_require__(/*! backgrid */ 9)], __WEBPACK_AMD_DEFINE_RESULT__ = function(_, Backgrid) {
        'use strict';

        Backgrid = Backgrid.Backgrid;

        /**
         * Integer column cell.
         *
         * @export  oro/datagrid/integer-cell
         * @class   oro.datagrid.NumberCell
         * @extends Backgrid.NumberCell
         */
        return Backgrid.NumberCell.extend({
            /** @property {String} */
            style: 'decimal',

            /**
             * {@inheritdoc}
             */
            initialize: function () {
                this.decimals = 0;

                Backgrid.NumberCell.prototype.initialize.apply(this, arguments);
            },

            /**
             * @inheritDoc
             */
            enterEditMode: function (e) {
                if (this.column.get("editable")) {
                    e.stopPropagation();
                }
                return Backgrid.NumberCell.prototype.enterEditMode.apply(this, arguments);
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 394 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/js/datagrid/cell/number-cell.js ***!
  \****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global define */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ 0), __webpack_require__(/*! backgrid */ 9)], __WEBPACK_AMD_DEFINE_RESULT__ = function(_, Backgrid) {
        'use strict';

        Backgrid = Backgrid.Backgrid;
        
        /**
         * Number column cell.
         *
         * @export  oro/datagrid/number-cell
         * @class   oro.datagrid.NumberCell
         * @extends Backgrid.NumberCell
         */
        return Backgrid.NumberCell.extend({
            /** @property {String} */
            style: 'decimal',

            /**
             * @inheritDoc
             */
            enterEditMode: function (e) {
                if (this.column.get("editable")) {
                    e.stopPropagation();
                }
                return Backgrid.NumberCell.prototype.enterEditMode.apply(this, arguments);
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 395 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/js/datagrid/cell/select-cell.js ***!
  \****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global define */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ 0), __webpack_require__(/*! backgrid */ 9)], __WEBPACK_AMD_DEFINE_RESULT__ = function(_, Backgrid) {
    'use strict';

    Backgrid = Backgrid.Backgrid;
    
    /**
     * Select column cell. Added missing behaviour.
     *
     * @export  oro/datagrid/select-cell
     * @class   oro.datagrid.SelectCell
     * @extends Backgrid.SelectCell
     */
    return Backgrid.SelectCell.extend({
        /**
         * @inheritDoc
         */
        initialize: function (options) {
            if (this.choices) {
                this.optionValues = [];
                _.each(this.choices, function(value, key) {
                    this.optionValues.push([value, key]);
                }, this);
            }
            Backgrid.SelectCell.prototype.initialize.apply(this, arguments);
        },

        /**
         * @inheritDoc
         */
        enterEditMode: function (e) {
            if (this.column.get("editable")) {
                e.stopPropagation();
            }
            return Backgrid.StringCell.prototype.enterEditMode.apply(this, arguments);
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 396 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/js/datagrid/listener/callback-listener.js ***!
  \**************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global define */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! oro/datagrid/abstract-listener */ 164)], __WEBPACK_AMD_DEFINE_RESULT__ = function(AbstractListener) {
    'use strict';

    /**
     * Listener with custom callback to execute
     *
     * @export  oro/datagrid/callback-listener
     * @class   oro.datagrid.CallbackListener
     * @extends oro.datagrid.AbstractListener
     */
    return AbstractListener.extend({
        /** @param {Call} */
        processCallback: null,

        /**
         * Initialize listener object
         *
         * @param {Object} options
         */
        initialize: function(options) {
            if (!_.has(options, 'processCallback')) {
                throw new Error('Process callback is not specified');
            }

            this.processCallback = options.processCallback;

            AbstractListener.prototype.initialize.apply(this, arguments);
        },

        /**
         * Execute callback
         *
         * @param {*} value Value of model property with name of this.dataField
         * @param {Backbone.Model} model
         * @protected
         */
        _processValue: function(value, model) {
            this.processCallback(value, model, this);
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! underscore */ 0)))

/***/ }),
/* 397 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/js/datagrid/listener/column-form-listener.js ***!
  \*****************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1), __webpack_require__(/*! underscore */ 0), __webpack_require__(/*! oro/mediator */ 6), __webpack_require__(/*! oro/datagrid/column-form-listener */ 323)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, mediator, OroColumnFormListener) {
        'use strict';

        /**
         * Column form listener based on oro implementation that allows
         * changing of field selectors dynamically using mediator
         */
        var ColumnFormListener = OroColumnFormListener.extend({
            $checkbox: null,
            initialize: function () {
                OroColumnFormListener.prototype.initialize.apply(this, arguments);

                this.$checkbox = $('<input type="checkbox">').css('margin', 0);

                mediator.on('datagrid_collection_set_after', function (collection, $grid) {
                    if (collection.inputName === this.gridName) {
                        this.$el = $grid.find('table.grid thead th:not([style])').first();

                        this.$el.empty().html(this.$checkbox);

                        this.setStateFromCollection(collection);

                        this.$checkbox.on('click', _.bind(function () {
                            var state = this.$checkbox.is(':checked');
                            _.each(collection.models, function (model) {
                                model.set(this.columnName, state);
                            }, this);
                        }, this));
                    }
                }, this);

                mediator.on('grid_load:complete', function (collection) {
                    if (collection.inputName === this.gridName) {
                        this.setStateFromCollection(collection);
                    }
                }, this);

                mediator.bind('column_form_listener:set_selectors:' + this.gridName, function (selectors) {
                    this._clearState();
                    this.selectors = selectors;
                    this._restoreState();
                    this._synchronizeState();
                }, this);

                mediator.trigger('column_form_listener:initialized', this.gridName);
            },

            _explode: function (string) {
                if (!string) {
                    return [];
                }
                return _.map(string.split(','), function (val) {
                    return val ? String(val).trim() : null;
                });
            },

            setStateFromCollection: function (collection) {
                var checked = true;
                _.each(collection.models, function (model) {
                    if (checked) {
                        checked = model.get(this.columnName);
                    }
                }, this);
                this.$checkbox.prop('checked', checked);
            },

            _processValue: function (id, model) {
                OroColumnFormListener.prototype._processValue.apply(this, arguments);

                var selectEvent = model.get(this.columnName) ? 'selectModel' : 'unselectModel';
                mediator.trigger('datagrid:' + selectEvent + ':' + this.gridName, model);
            }
        });

        return {
            init: function ($gridContainer, gridName) {
                var metadata = $gridContainer.data('metadata');
                var options = metadata.options || {};
                if (options.columnListener) {
                    options.columnListener.selectors = options.columnListener.selectors || {};
                    new ColumnFormListener(_.extend({ $gridContainer: $gridContainer, gridName: gridName }, options.columnListener));
                }
            }
        };
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 398 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/js/datagrid/state-listener.js ***!
  \**************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ 0), __webpack_require__(/*! oro/mediator */ 6), __webpack_require__(/*! oro/datagrid/abstract-listener */ 164), __webpack_require__(/*! pim/datagrid/state */ 44)], __WEBPACK_AMD_DEFINE_RESULT__ = function(_, mediator, AbstractListener, DatagridState) {
        'use strict';

        /**
         * Datagrid state listener
         */
        var StateListener = AbstractListener.extend({
            gridName: null,
            $gridContainer: null,

            initialize: function (options) {
                if (!_.has(options, 'gridName')) {
                    throw new Error('Grid name not specified');
                }
                if (!_.has(options, '$gridContainer')) {
                    throw new Error('Grid container not specified');
                }

                this.gridName       = options.gridName;
                this.$gridContainer = options.$gridContainer;

                this.subscribe();
            },

            subscribe: function () {
                mediator.once('datagrid_collection_set_after', this.afterCollectionSet, this);
                mediator.on('grid_load:complete', this.saveGridState, this);

                this.$gridContainer.on('preExecute:reset:' + this.gridName, this.onGridReset.bind(this));

                mediator.once('hash_navigation_request:start', this.unsubscribe, this);
            },

            unsubscribe: function () {
                mediator.off('grid_load:complete', this.saveGridState, this);
            },

            afterCollectionSet: function () {
                mediator.once(
                    'datagrid_filters:rendered',
                    function (collection) {
                        collection.trigger('updateState', collection);

                        // We have to use a timeout here because the toolbar is hidden right after triggering this event
                        setTimeout(_.bind(function() {
                            this.$gridContainer.find('div.toolbar, div.filter-box').show();
                        }, this), 20);
                    }, this
                );
            },

            saveGridState: function (collection) {
                if (collection.inputName === this.gridName) {
                    var $filterBox = this.$gridContainer.find('.filter-box');
                    if ($filterBox.length && !$filterBox.is(':visible')) {
                        $filterBox.show();
                    }

                    var encodedStateData = collection.encodeStateData(collection.state);
                    DatagridState.set(this.gridName, 'filters', encodedStateData);
                }
            },

            onGridReset: function (e, action) {
                action.collection.initialState.filters = {};
            }
        });

        StateListener.init = function ($gridContainer, gridName) {
            new StateListener({ $gridContainer: $gridContainer, gridName: gridName });
        };

        return StateListener;
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 399 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/js/datagrid/widget/export-widget.js ***!
  \********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1), __webpack_require__(/*! underscore */ 0), __webpack_require__(/*! backbone */ 2), __webpack_require__(/*! oro/messenger */ 16)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, Backbone, messenger) {
        'use strict';

        return Backbone.View.extend({

            action: null,

            initialize: function (action) {
                this.action = action;
            },

            run: function () {
                $.get(this.action.getLinkWithParameters())
                    .done(function () {
                        messenger.notificationFlashMessage(
                            'success',
                            _.__('pim.grid.mass_action.quick_export.launched')
                        );
                    })
                    .error(function (jqXHR) {
                        messenger.notificationFlashMessage(
                            'error',
                            _.__(jqXHR.responseText)
                        );
                    });
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 400 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************************!*\
  !*** ./src/Pim/Bundle/DataGridBundle/Resources/public/js/fetcher/datagrid-view-fetcher.js ***!
  \********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Datagrid View Fetcher.
 * We override the default fetcher to add additional methods
 * to fetch default columns & default user datagrid view.
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! pim/base-fetcher */ 32)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        Routing,
        BaseFetcher
    ) {
        return BaseFetcher.extend({
            /**
             * {@inheritdoc}
             */
            initialize: function (options) {
                BaseFetcher.prototype.initialize.apply(this, arguments);
            },

            /**
             * Fetch default columns for grid with given alias
             *
             * @param {string} alias
             *
             * @return Promise
             */
            defaultColumns: function (alias) {
                return $.getJSON(Routing.generate(this.options.urls.columns, { alias: alias }));
            },

            /**
             * Fetch default datagrid view for given alias of the current user
             *
             * @param {string} alias
             *
             * @return Promise
             */
            defaultUserView: function (alias) {
                return $.getJSON(Routing.generate(this.options.urls.userDefaultView, { alias: alias }));
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 401 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/association-type/form/delete.js ***!
  \*****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Delete extension for association type
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! pim/form/common/delete */ 154), __webpack_require__(/*! pim/remover/association-type */ 347)], __WEBPACK_AMD_DEFINE_RESULT__ = function (DeleteForm, AssociationTypeRemover) {
    return DeleteForm.extend({
        remover: AssociationTypeRemover
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 402 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/attribute-option/form.js ***!
  \**********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/attribute-option/form */ 196),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! pim/i18n */ 17)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, Backbone, BaseForm, template, UserContext, i18n) {
        return BaseForm.extend({
            template: _.template(template),
            events: {
                'change input': 'updateModel'
            },
            updateModel: function () {
                var optionValues = {};

                _.each(this.$('input[name^="label-"]'), function (labelInput) {
                    var locale = labelInput.dataset.locale;
                    optionValues[locale] = {
                        locale: locale,
                        value: labelInput.value
                    };
                });

                this.getFormModel().set('code', this.$('input[name="code"]').val());
                this.getFormModel().set('optionValues', optionValues);
            },
            render: function () {
                if (!this.configured) {
                    return this;
                }

                this.$el.html(
                    this.template({
                        locale: UserContext.get('catalogLocale'),
                        i18n: i18n,
                        option: this.getFormData()
                    })
                );

                return this.renderExtensions();
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 403 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/channel/form/delete.js ***!
  \********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Delete extension for channel
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! pim/form/common/delete */ 154), __webpack_require__(/*! pim/remover/channel */ 348)], __WEBPACK_AMD_DEFINE_RESULT__ = function (DeleteForm, ChannelRemover) {
    return DeleteForm.extend({
        remover: ChannelRemover
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 404 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/channel/form/properties/conversion-unit.js ***!
  \****************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Module used to display the conversion unit properties of a channel
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/template/channel/tab/properties/conversion-unit */ 200),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! pim/i18n */ 17),
        __webpack_require__(/*! jquery.select2 */ 29)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        __,
        BaseForm,
        FetcherRegistry,
        template,
        UserContext,
        i18n
    ) {
        return BaseForm.extend({
            className: 'tabsection',
            template: _.template(template),
            catalogLocale: UserContext.get('catalogLocale'),
            config: null,

            /**
             * {@inheritdoc}
             */
            initialize: function (config) {
                this.config = config.config;

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                if (!this.configured) {
                    return this;
                }

                $.when(
                    FetcherRegistry.getFetcher('attribute').search({'types': 'pim_catalog_metric'}),
                    FetcherRegistry.getFetcher('measure').fetchAll()
                ).then(function (attributes, measures) {

                    this.$el.html(this.template({
                        conversionUnits: this.getFormData().conversion_units,
                        metrics: attributes,
                        measures: measures,
                        catalogLocale: this.catalogLocale,
                        label: __(this.config.label),
                        fieldBaseId: this.config.fieldBaseId,
                        doNotConvertLabel: __('pim_enrich.form.channel.tab.properties.conversion_unit.do_not_convert'),
                        i18n: i18n
                    }));

                    this.$('.select2').select2().on('change', this.updateState.bind(this));
                    this.renderExtensions();
                }.bind(this));

                return this;
            },

            /**
             * Sets new attribute conversion unit on change.
             *
             * @param {Object} event
             */
            updateState: function (event) {
                this.setAttributeConversionUnit(
                    event.currentTarget.id.replace(this.config.fieldBaseId, ''),
                    event.currentTarget.value
                );

            },

            /**
             * Sets specified conversion unit settings into form model.
             *
             * @param {String} attribute
             * @param {String} value
             */
            setAttributeConversionUnit: function (attribute, value) {
                var data = this.getFormData();

                if (_.isEmpty(data.conversion_units)) {
                    data.conversion_units = {};
                }

                if (value !== 'no_conversion') {
                    data.conversion_units[attribute] = value;
                } else {
                    delete data.conversion_units[attribute];
                }

                this.setData(data);
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 405 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/channel/form/properties/general.js ***!
  \********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Module used to display the generals properties of a channel
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/template/channel/tab/properties/general */ 201),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! pim/common/property */ 151),
        __webpack_require__(/*! jquery.select2 */ 29)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        __,
        BaseForm,
        FetcherRegistry,
        template,
        UserContext,
        mediator,
        propertyAccessor
    ) {
        return BaseForm.extend({
            className: 'tabsection',
            template: _.template(template),
            catalogLocale: UserContext.get('catalogLocale'),
            errors: [],
            events: {
                'change input.channel-code': 'updateCode'
            },

            /**
             * {@inheritdoc}
             */
            configure: function () {
                this.listenTo(
                    this.getRoot(),
                    'pim_enrich:form:entity:bad_request',
                    this.setValidationErrors.bind(this)
                );
                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:bad_request', this.render.bind(this));

                this.listenTo(
                    this.getRoot(),
                    'pim_enrich:form:entity:pre_save',
                    this.resetValidationErrors.bind(this)
                );

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                if (!this.configured) {
                    return this;
                }

                this.$el.html(this.template({
                    code: this.getFormData().code,
                    hasId: _.has(this.getFormData().meta, 'id'),
                    sectionTitle: __('pim_enrich.form.channel.tab.properties.general'),
                    catalogLocale: this.catalogLocale,
                    errors: this.getValidationErrorsForField('code'),
                    label: __('pim_enrich.form.channel.tab.properties.code'),
                    requiredLabel: __('pim_enrich.form.required')
                }));

                this.delegateEvents();
                this.renderExtensions();
            },

            /**
             * Updates state of code property on event.
             *
             * @param {Object} event
             */
            updateCode: function (event) {
                var data = this.getFormData();
                data.code = event.target.value;

                this.setData(data);
            },

            /**
             * Get the validation errors for the given field
             *
             * @param {string} field
             *
             * @return {mixed}
             */
            getValidationErrorsForField: function (field) {
                return propertyAccessor
                    .accessProperty(
                        this.errors,
                        field,
                        []
                    );
            },

            /**
             * Sets errors
             *
             * @param {Object} errors
             */
            setValidationErrors: function (errors) {
                this.errors = errors.response;
            },

            resetValidationErrors: function () {
                this.errors = {};
                this.render();
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 406 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/channel/form/properties/general/currencies.js ***!
  \*******************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Module used to display the currencies general properties field of a channel
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/template/channel/tab/properties/general/currencies */ 202),
        __webpack_require__(/*! jquery.select2 */ 29)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        __,
        BaseForm,
        FetcherRegistry,
        template
    ) {
        return BaseForm.extend({
            className: 'AknFieldContainer',
            template: _.template(template),

            /**
             * Configures this extension.
             *
             * @return {Promise}
             */
            configure: function () {
                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:bad_request', this.render.bind(this));

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                if (!this.configured) {
                    return this;
                }

                FetcherRegistry.getFetcher('currency').fetchAll().then(function (currencies) {
                    this.$el.html(this.template({
                        currentCurrencies: this.getFormData().currencies,
                        currencies: currencies,
                        errors: this.getParent().getValidationErrorsForField('currencies'),
                        label: __('pim_enrich.form.channel.tab.properties.currencies'),
                        requiredLabel: __('pim_enrich.form.required')
                    }));

                    this.$('.select2').select2().on('change', this.updateState.bind(this));

                    this.renderExtensions();
                }.bind(this));

                return this;
            },

            /**
             * Sets new currencies on change.
             *
             * @param {Object} event
             */
            updateState: function (event) {
                this.setCurrencies(event.val);
            },

            /**
             * Sets specified currencies into root model.
             *
             * @param {Array} codes
             */
            setCurrencies: function (codes) {
                if (null === codes) {
                    codes = [];
                }
                var data = this.getFormData();

                data.currencies = codes;
                this.setData(data);
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 407 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/channel/form/properties/general/locales.js ***!
  \****************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Module used to display the locales general properties field of a channel
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/template/channel/tab/properties/general/locales */ 203),
        __webpack_require__(/*! jquery.select2 */ 29)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        __,
        BaseForm,
        FetcherRegistry,
        template
    ) {
        return BaseForm.extend({
            className: 'AknFieldContainer',
            template: _.template(template),
            initialLocales: null,
            locales: null,

            /**
             * Configures this extension.
             *
             * @return {Promise}
             */
            configure: function () {
                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:bad_request', this.render.bind(this));
                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:post_save', this.setCurrentLocales.bind(this));

                this.initialLocales = this.getFormData().locales;

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                if (!this.configured) {
                    return this;
                }

                FetcherRegistry.getFetcher('locale').fetchAll().then(function (locales) {
                    this.locales = locales;
                    this.$el.html(this.template({
                        currentLocales: this.getFormData().locales,
                        locales: locales,
                        label: __('pim_enrich.form.channel.tab.properties.locales'),
                        requiredLabel: __('pim_enrich.form.required'),
                        errors: this.getParent().getValidationErrorsForField('locales')
                    }));

                    this.$('.select2').select2().on('change', this.updateState.bind(this));

                    this.renderExtensions();
                }.bind(this));

                return this;
            },

            /**
             * Sets new locales on change.
             *
             * @param {Object} event
             */
            updateState: function (event) {
                var localesToSet = [];

                _.each(event.val, function (code) {
                    localesToSet.push(
                        _.find(this.locales, function (locale) {
                            return locale.code === code;
                        })
                    );
                }.bind(this));

                this.setLocales(localesToSet);
            },

            /**
             * Sets specified locales into root model.
             *
             * @param {Array} locales
             */
            setLocales: function (locales) {
                var data = this.getFormData();
                data.locales = locales;
                this.setData(data);
            },

            /**
             * Sets current locales
             */
            setCurrentLocales: function () {
                var oldLocales = this.initialLocales;
                var newLocales = this.getFormData().locales;

                if (!_.isEqual(oldLocales, newLocales)) {
                    this.getRoot().trigger('pim_enrich:form:entity:locales_updated');

                    this.initialLocales = newLocales;
                }

            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 408 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/channel/form/save.js ***!
  \******************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Save extension for channel
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form/common/save */ 159),
        __webpack_require__(/*! oro/messenger */ 16),
        __webpack_require__(/*! pim/saver/channel */ 356),
        __webpack_require__(/*! pim/field-manager */ 150),
        __webpack_require__(/*! pim/i18n */ 17),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! module-config */ 21),
        __webpack_require__(/*! pim/router */ 11)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        __,
        BaseSave,
        messenger,
        ChannelSaver,
        FieldManager,
        i18n,
        UserContext,
        Routing,
        module,
        router
    ) {
        return BaseSave.extend({
            updateSuccessMessage: __('pim_enrich.entity.channel.info.update_successful'),
            updateFailureMessage: __('pim_enrich.entity.channel.info.update_failed'),
            createSuccessMessage: __('pim_enrich.entity.channel.info.create_successful'),
            createFailureMessage: __('pim_enrich.entity.channel.info.create_failed'),

            /**
             * {@inheritdoc}
             */
            postSave: function (isUpdate) {
                this.getRoot().trigger('pim_enrich:form:entity:post_save');
                var code = this.getFormData().code;
                if (!isUpdate) {
                    messenger.notificationFlashMessage(
                        'success',
                        this.createSuccessMessage
                    );
                    router.redirectToRoute(this.config.redirectUrl, {'code': code});

                    return;
                }

                messenger.notificationFlashMessage(
                    'success',
                    this.updateSuccessMessage
                );
            },

            /**
             * {@inheritdoc}
             */
            save: function () {
                var channel = $.extend(true, {}, this.getFormData());
                var code = null;
                var isUpdate = false;
                var method = 'POST';

                if (_.has(channel.meta, 'id')) {
                    code = channel.code;
                    isUpdate = true;
                    method = 'PUT';
                }

                delete channel.meta;

                this.showLoadingMask();
                this.getRoot().trigger('pim_enrich:form:entity:pre_save');

                return ChannelSaver
                    .save(code, channel, method)
                    .then(function (data) {

                        this.setData(data);
                        this.getRoot().trigger('pim_enrich:form:entity:post_fetch', data);
                        this.postSave(isUpdate);
                    }.bind(this))
                    .fail(this.fail.bind(this))
                    .always(this.hideLoadingMask.bind(this));
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 409 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/controller/registry.js ***!
  \********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1), __webpack_require__(/*! controllers */ 133)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, module) {
        var controllers       = controllers || {}
        var defaultController = module.config().defaultController;

        return {
            /**
             * Get the controller for the given name
             *
             * @param {String} name
             *
             * @return {Promise}
             */
            get: function (name) {
                var deferred = $.Deferred();

                var controller = controllers[name] || defaultController;
                __webpack_require__.e/* require */(1/* duplicate */).then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(/*! . */ 378)(controller.module)]; (function (Controller) {
                    controller.class = Controller;

                    deferred.resolve(controller);
                }.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}).catch(__webpack_require__.oe);

                return deferred.promise();
            }
        };
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 410 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/family/form/attributes.js ***!
  \***********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Attributes tabs view
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/template/family/tab/attributes */ 222),
        __webpack_require__(/*! jquery.select2 */ 29)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        __,
        BaseForm,
        FetcherRegistry,
        template
    ) {
        return BaseForm.extend({
            className: 'AknTabContainer-content attributes',
            template: _.template(template),

            /**
             * {@inheritdoc}
             */
            initialize: function (config) {
                this.config = config.config;

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            configure: function () {
                this.trigger('tab:register', {
                    code: this.code,
                    label: __(this.config.label)
                });

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                if (!this.configured) {
                    return this;
                }

                this.$el.html(this.template({}));

                this.renderExtensions();
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 411 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/family/form/attributes/toolbar.js ***!
  \*******************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Attributes tab top toolbar view
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/family/tab/attributes/toolbar */ 224)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        __,
        BaseForm,
        template
    ) {
        return BaseForm.extend({
            className: 'AknGridToolbar',
            template: _.template(template),
            errors: [],

            /**
             * {@inheritdoc}
             */
            initialize: function (config) {
                this.config = config.config;

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                if (!this.configured) {
                    return this;
                }

                this.$el.html(this.template({}));

                this.renderExtensions();
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 412 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/family/form/attributes/toolbar/add-select/attribute-group/select.js ***!
  \*****************************************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Family add attribute group select extension view
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/common/add-select */ 181)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        __,
        BaseAddSelect
    ) {
        return BaseAddSelect.extend({
            className: 'AknButtonList-item add-attribute-group'
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));



/***/ }),
/* 413 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/family/form/delete.js ***!
  \*******************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Family delete extension
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! pim/form/common/delete */ 154), __webpack_require__(/*! pim/remover/family */ 349)], __WEBPACK_AMD_DEFINE_RESULT__ = function (DeleteForm, FamilyRemover) {
    return DeleteForm.extend({
        remover: FamilyRemover
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 414 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/family/form/properties/general.js ***!
  \*******************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Extension used for family properties tab general tab section
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(/*! underscore */ 0),
    __webpack_require__(/*! oro/translator */ 3),
    __webpack_require__(/*! pim/form */ 149),
    __webpack_require__(/*! pim/fetcher-registry */ 10),
    __webpack_require__(/*! pim/common/property */ 151),
    __webpack_require__(/*! pim/template/form/tab/section */ 268),
    __webpack_require__(/*! oro/loading-mask */ 18),
    __webpack_require__(/*! jquery.select2 */ 29)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        __,
        BaseForm,
        FetcherRegistry,
        propertyAccessor,
        template,
        LoadingMask
    ) {
        return BaseForm.extend({
            className: 'tabsection',
            template: _.template(template),
            errors: [],

            /**
             * {@inheritdoc}
             */
            initialize: function (config) {
                this.config = config.config;

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            configure: function () {

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                this.$el.html(this.template({
                    sectionTitle: __(this.config.label),
                    dropZone: this.config.dropZone
                }));

                this.renderExtensions();
            },

            /**
             * Get the validation errors for the given field
             *
             * @param {string} field
             *
             * @return {mixed}
             */
            getValidationErrorsForField: function (field) {
                return propertyAccessor
                    .accessProperty(
                        this.errors,
                        field,
                        []
                    );
            },

            /**
             * Sets errors
             *
             * @param {Object} errors
             */
            setValidationErrors: function (errors) {
                this.errors = errors.response;
            },

            /**
             * Resets validation errors
             */
            resetValidationErrors: function () {
                this.errors = {};
                this.render();
            },

            /**
             * Shows the loading mask
             */
            showLoadingMask: function () {
                this.loadingMask = new LoadingMask();
                this.loadingMask.render().$el.appendTo(this.getRoot().$el).show();
            },

            /**
             * Hides the loading mask
             */
            hideLoadingMask: function () {
                this.loadingMask.hide().$el.remove();
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));



/***/ }),
/* 415 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/family/form/properties/general/attribute-as-label.js ***!
  \**************************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Attributes used as label field view
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/i18n */ 17),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! pim/security-context */ 31),
        __webpack_require__(/*! pim/template/family/tab/general/attribute-as-label */ 225),
        __webpack_require__(/*! jquery.select2 */ 29)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        __,
        BaseForm,
        FetcherRegistry,
        i18n,
        UserContext,
        SecurityContext,
        template
    ) {
        return BaseForm.extend({
            className: 'AknFieldContainer',
            template: _.template(template),
            errors: [],
            catalogLocale: UserContext.get('catalogLocale'),

            /**
             * {@inheritdoc}
             */
            initialize: function (config) {
                this.config = config.config;
            },

            /**
             * {@inheritdoc}
             */
            configure: function () {
                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                if (!this.configured) {
                    return this;
                }

                this.$el.html(this.template({
                    i18n: i18n,
                    catalogLocale: this.catalogLocale,
                    attributes: _.filter(
                        this.getFormData().attributes,
                        function (attribute) {
                            return attribute.type === 'pim_catalog_text' ||
                            attribute.type === 'pim_catalog_identifier';
                        }
                    ),
                    currentAttribute: this.getFormData().attribute_as_label,
                    fieldBaseId: this.config.fieldBaseId,
                    errors: this.errors,
                    label: __(this.config.label),
                    requiredLabel: __('pim_enrich.form.required'),
                    isReadOnly: !SecurityContext.isGranted('pim_enrich_family_edit_properties')
                }));

                this.$('.select2').select2().on('change', this.updateState.bind(this));

                this.renderExtensions();
            },

            /**
             * Update object state on property change
             *
             * @param event
             */
            updateState: function (event) {
                var data = this.getFormData();
                data.attribute_as_label = event.currentTarget.value;
                this.setData(data);
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 416 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/family/form/properties/general/code.js ***!
  \************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Code field view
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/form/properties/input */ 259)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        __,
        BaseForm,
        template
    ) {
        return BaseForm.extend({
            className: 'input',
            template: _.template(template),
            errors: [],

            /**
             * {@inheritdoc}
             */
            initialize: function (config) {
                this.config = config.config;
            },

            /**
             * {@inheritdoc}
             */
            configure: function () {
                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                if (!this.configured) {
                    return this;
                }

                this.$el.html(this.template({
                    fieldName: this.config.fieldBaseId + 'code',
                    className: 'family-code',
                    value: this.getFormData().code,
                    errors: [],
                    label: __(this.config.label),
                    requiredLabel: __('pim_enrich.form.required'),
                    isRequired: true,
                    isReadOnly: true
                }));

                this.renderExtensions();
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 417 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/family/form/properties/general/translation.js ***!
  \*******************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Family label translation fields view
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/common/properties/translation */ 333),
        __webpack_require__(/*! pim/security-context */ 31),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/template/form/properties/translation */ 172)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        BaseTranslation,
        SecurityContext,
        FetcherRegistry,
        template
    ) {
        return BaseTranslation.extend({
            template: _.template(template),

            /**
             * {@inheritdoc}
             */
            render: function () {
                FetcherRegistry.getFetcher('locale')
                    .search({'activated': true, 'cached': true})
                    .then(function (locales) {
                        this.locales = locales;

                        this.$el.html(this.template({
                            model: this.getFormData(),
                            locales: this.locales,
                            errors: this.validationErrors,
                            label: this.config.label,
                            fieldBaseId: this.config.fieldBaseId,
                            isReadOnly: !SecurityContext.isGranted('pim_enrich_family_edit_properties')
                        }));

                        this.renderExtensions();
                    }.bind(this));

                this.delegateEvents();
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 418 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/family/form/save.js ***!
  \*****************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Family save extension
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form/common/save */ 159),
        __webpack_require__(/*! oro/messenger */ 16),
        __webpack_require__(/*! pim/saver/family */ 358),
        __webpack_require__(/*! pim/field-manager */ 150),
        __webpack_require__(/*! pim/i18n */ 17),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! pim/security-context */ 31)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        __,
        BaseSave,
        messenger,
        FamilySaver,
        FieldManager,
        i18n,
        UserContext
    ) {
        return BaseSave.extend({
            updateSuccessMessage: __('pim_enrich.entity.family.info.update_successful'),
            updateFailureMessage: __('pim_enrich.entity.family.info.update_failed'),

            /**
             * {@inheritdoc}
             */
            save: function () {
                var family = $.extend(true, {}, this.getFormData());
                family.attributes = _.pluck(family.attributes, 'code');

                delete family.meta;

                var notReadyFields = FieldManager.getNotReadyFields();
                if (0 < notReadyFields.length) {
                    var fieldLabels = _.map(notReadyFields, function (field) {
                        return i18n.getLabel(
                            field.attribute.label,
                            UserContext.get('catalogLocale'),
                            field.attribute.code
                        );
                    });

                    messenger.notificationFlashMessage(
                        'error',
                        __(
                            'pim_enrich.entity.family.info.field_not_ready',
                            {'fields': fieldLabels.join(', ')}
                        )
                    );

                    return;
                }

                this.showLoadingMask();
                this.getRoot().trigger('pim_enrich:form:entity:pre_save');

                return FamilySaver
                    .save(family.code, family, 'PUT')
                    .then(function (data) {
                        this.postSave();

                        this.setData(data);
                        this.getRoot().trigger('pim_enrich:form:entity:post_fetch', data);
                    }.bind(this))
                    .fail(this.fail.bind(this))
                    .always(this.hideLoadingMask.bind(this));
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 419 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/family/mass-edit/attributes.js ***!
  \****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Family mass edit attributes requirements table view
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! pim/family-edit-form/attributes/attributes */ 326),
        __webpack_require__(/*! oro/mediator */ 6)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        BaseAttributesView,
        mediator
    ) {
        return BaseAttributesView.extend({
            lock: false,

            /**
             * {@inheritdoc}
             */
            configure: function () {
                mediator.on(
                    'mass-edit:form:lock',
                    this.onLock.bind(this)
                );

                mediator.on(
                    'mass-edit:form:unlock',
                    this.onUnlock.bind(this)
                );

                return BaseAttributesView.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            toggleAttribute: function () {
                if (this.lock) {
                    return false;
                }

                BaseAttributesView.prototype.toggleAttribute.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            onRemoveAttribute: function () {
                if (this.lock) {
                    return false;
                }

                BaseAttributesView.prototype.onRemoveAttribute.apply(this, arguments);
            },

            /**
             * Lock event callback
             */
            onLock: function () {
                this.lock = true;
            },

            /**
             * Unlock event callback
             */
            onUnlock: function () {
                this.lock = false;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 420 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/family/mass-edit/hidden-field-updater.js ***!
  \**************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Mass edit attribute requirements
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! pim/form */ 149)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, $, BaseForm) {
        return BaseForm.extend({
            /**
             * {@inheritdoc}
             */
            configure: function () {
                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:update_state', this.render);
                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:post_update', this.render);

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                var data = this.getFormData();
                data.attributes = _.pluck(data.attributes, 'code');
                delete data.meta;

                var stringifiedData = JSON.stringify(data, null, 0);
                $('#pim_enrich_mass_edit_choose_action_operation_values').val(stringifiedData);

                return this;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 421 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/family/mass-edit/toolbar/add-select/attribute/select.js ***!
  \*****************************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Family mass edit form add attribute select extension view
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/family-edit-form/attributes/toolbar/add-select/attribute */ 327)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        FetcherRegistry,
        FamilyAddAttributeSelect
    ) {
        return FamilyAddAttributeSelect.extend({
            /**
             * {@inheritdoc}
             */
            getItemsToExclude: function () {
                return FetcherRegistry.getFetcher(this.mainFetcher)
                    .getIdentifierAttribute()
                    .then(function (identifier) {
                        var existingAttributes = _.pluck(
                            this.getFormData().attributes,
                            'code'
                        );

                        if (!_.contains(existingAttributes, identifier.code)) {
                            existingAttributes.push(identifier.code);
                        }

                        return existingAttributes;
                    }.bind(this));
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));



/***/ }),
/* 422 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/fetcher/attribute-fetcher.js ***!
  \**************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1), __webpack_require__(/*! underscore */ 0), __webpack_require__(/*! pim/base-fetcher */ 32), __webpack_require__(/*! routing */ 4)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, BaseFetcher, Routing) {
    return BaseFetcher.extend({
        identifierPromise: null,
        fetchByTypesPromises: [],

        /**
         * Return the identifier attribute
         *
         * @return {Promise}
         */
        getIdentifierAttribute: function () {
            if (null === this.identifierPromise) {
                this.identifierPromise = $.Deferred();

                return this.fetchByTypes([this.options.identifier_type])
                    .then(function (attributes) {
                        if (attributes.length > 0) {
                            this.identifierPromise.resolve(attributes[0]).promise();

                            return this.identifierPromise;
                        }

                        return this.identifierPromise
                            .reject()
                            .promise();
                    }.bind(this));
            }

            return this.identifierPromise;
        },

        /**
         * Fetch attributes by types
         *
         * @param {Array} attributeTypes
         *
         * @return {Promise}
         */
        fetchByTypes: function (attributeTypes) {
            var cacheKey = attributeTypes.sort().join('');

            if (!_.has(this.fetchByTypesPromises, cacheKey)) {
                this.fetchByTypesPromises[cacheKey] = this.getJSON(
                    this.options.urls.list,
                    {types: attributeTypes.join(',')}
                )
                .then(_.identity)
                .promise();
            }

            return this.fetchByTypesPromises[cacheKey];
        },

        /**
         * This method overrides the base method, to send a POST query instead of a GET query, because the request
         * URI can be too long.
         * TODO Should be deleted to set it back to GET.
         *
         * {@inheritdoc}
         */
        getJSON: function (url, parameters) {
            return $.post(Routing.generate(url), parameters, null, 'json');
        },

        /**
         * {@inheritdoc}
         */
        clear: function () {
            BaseFetcher.prototype.clear.apply(this, arguments);

            this.identifierPromise = null;
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 423 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/fetcher/attribute-group-fetcher.js ***!
  \********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Attribute group fetcher
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(/*! jquery */ 1),
    __webpack_require__(/*! pim/base-fetcher */ 32),
    __webpack_require__(/*! routing */ 4)
], __WEBPACK_AMD_DEFINE_RESULT__ = function (
    $,
    BaseFetcher,
    Routing
) {
    return BaseFetcher.extend({
        /**
         * Overrides base method, to send query using POST instead GET,
         * because the request URI can be too long.
         * TODO Should be deleted to set it back to GET.
         * SEE attribute fetcher
         *
         * {@inheritdoc}
         */
        getJSON: function (url, parameters) {
            return $.post(Routing.generate(url), parameters, null, 'json');
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 424 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/fetcher/completeness-fetcher.js ***!
  \*****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1), __webpack_require__(/*! underscore */ 0), __webpack_require__(/*! routing */ 4), __webpack_require__(/*! pim/base-fetcher */ 32)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, Routing, BaseFetcher) {
    return BaseFetcher.extend({
        /**
         * Fetch completenesses for the given product id
         *
         * @param Integer productId
         *
         * @return Promise
         */
        fetchForProduct: function (productId, family) {
            if (!(productId in this.entityPromises)) {
                this.entityPromises[productId] = $.getJSON(
                    Routing.generate(this.options.urls.get, { id: productId })
                ).then(function (completenesses) {
                    return {completenesses: completenesses, family: family};
                });

                return this.entityPromises[productId];
            } else {
                return this.entityPromises[productId].then(function (completeness) {
                    return (family !== completeness.family) ?
                        {completenesses: {}, family: family} :
                        this.entityPromises[productId];
                }.bind(this));
            }

        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 425 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/fetcher/locale-fetcher.js ***!
  \***********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/base-fetcher */ 32),
        __webpack_require__(/*! routing */ 4)

    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        BaseFetcher,
        Routing
    ) {
        return BaseFetcher.extend({
            entityActivatedListPromise: null,
            /**
             * @param {Object} options
             */
            initialize: function (options) {
                this.options = options || {};
            },

            /**
             * Fetch an element based on its identifier
             *
             * @param {string} identifier
             *
             * @return {Promise}
             */
            fetchActivated: function () {
                if (!this.entityActivatedListPromise) {
                    if (!_.has(this.options.urls, 'list')) {
                        return $.Deferred().reject().promise();
                    }

                    this.entityActivatedListPromise = $.getJSON(
                        Routing.generate(this.options.urls.list),
                        {activated: true}
                    ).then(_.identity).promise();
                }

                return this.entityActivatedListPromise;
            },

            /**
             * {inheritdoc}
             */
            clear: function () {
                this.entityActivatedListPromise = null;

                BaseFetcher.prototype.clear.apply(this, arguments);
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 426 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/fetcher/product-fetcher.js ***!
  \************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! module-config */ 21),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! pim/cache-invalidator */ 179),
        __webpack_require__(/*! pim/product-manager */ 163)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        Backbone,
        module,
        Routing,
        mediator,
        CacheInvalidator,
        ProductManager
    ) {
        return Backbone.Model.extend({
            /**
             * @param {Object} options
             */
            initialize: function (options) {
                this.options = options || {};
            },

            /**
             * Fetch an element based on its identifier
             *
             * @param {string} identifier
             *
             * @return {Promise}
             */
            fetch: function (identifier) {
                return $.getJSON(Routing.generate(this.options.urls.get, { id: identifier }))
                    .then(function (product) {
                        var cacheInvalidator = new CacheInvalidator();
                        cacheInvalidator.checkStructureVersion(product);

                        return ProductManager.generateMissing(product);
                    }.bind(this))
                    .then(function (product) {
                        mediator.trigger('pim_enrich:form:product:post_fetch', product);

                        return product;
                    })
                    .promise();
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 427 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/fetcher/variant-group-fetcher.js ***!
  \******************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! pim/base-fetcher */ 32),
        __webpack_require__(/*! module-config */ 21),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! pim/cache-invalidator */ 179),
        __webpack_require__(/*! pim/product-manager */ 163)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        BaseFetcher,
        module,
        Routing,
        mediator,
        CacheInvalidator,
        ProductManager
    ) {
        return BaseFetcher.extend({
            /**
             * @param {Object} options
             */
            initialize: function (options) {
                this.options = options || {};
            },

            /**
             * Fetch an element based on its identifier
             *
             * @param {string} identifier
             * @param {Object} options
             *
             * @return {Promise}
             */
            fetch: function (identifier, options) {
                options = options || {};

                options.code = identifier;
                var promise = BaseFetcher.prototype.fetch.apply(this, [identifier, options]);

                return promise
                    .then(function (variantGroup) {
                        var cacheInvalidator = new CacheInvalidator();
                        cacheInvalidator.checkStructureVersion(variantGroup);

                        return variantGroup;
                    })
                    .then(ProductManager.generateMissing.bind(ProductManager))
                    .then(function (variantGroup) {
                        mediator.trigger('pim_enrich:form:variant_group:post_fetch', variantGroup);

                        return variantGroup;
                    });
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 428 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/filter/attribute/boolean.js ***!
  \*************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Boolean attribute filter.
 *
 * @author    Yohan Blain <yohan.blain@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)
 */


!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(/*! jquery */ 1),
    __webpack_require__(/*! underscore */ 0),
    __webpack_require__(/*! oro/translator */ 3),
    __webpack_require__(/*! pim/filter/attribute/attribute */ 156),
    __webpack_require__(/*! pim/fetcher-registry */ 10),
    __webpack_require__(/*! pim/user-context */ 5),
    __webpack_require__(/*! pim/i18n */ 17),
    __webpack_require__(/*! pim/template/filter/attribute/boolean */ 226),
    __webpack_require__(/*! bootstrap.bootstrapswitch */ 45)
], __WEBPACK_AMD_DEFINE_RESULT__ = function (
    $,
    _,
    __,
    BaseFilter,
    FetcherRegistry,
    UserContext,
    i18n,
    template
) {
    return BaseFilter.extend({
        shortname: 'boolean',
        template: _.template(template),
        events: {
            'change [name="filter-value"]': 'updateState'
        },

        /**
         * {@inheritdoc}
         */
        configure: function () {
            this.listenTo(this.getRoot(), 'pim_enrich:form:entity:pre_update', function (data) {
                _.defaults(data, {field: this.getCode(), operator: '=', value: true});
            }.bind(this));

            return BaseFilter.prototype.configure.apply(this, arguments);
        },

        /**
         * {@inheritdoc}
         */
        renderInput: function (templateContext) {
            return this.template(_.extend({}, templateContext, {
                value: this.getValue(),
                field: this.getField(),
                labels: {
                    on: __('switch_on'),
                    off: __('switch_off')
                }
            }));
        },

        /**
         * {@inheritdoc}
         */
        postRender: function () {
            this.$('.switch').bootstrapSwitch();
        },

        /**
         * {@inheritdoc}
         */
        updateState: function () {
            this.setData({
                field: this.getField(),
                operator: '=',
                value: this.$('[name="filter-value"]').is(':checked')
            });
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 429 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/filter/attribute/date.js ***!
  \**********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(/*! jquery */ 1),
    __webpack_require__(/*! underscore */ 0),
    __webpack_require__(/*! oro/translator */ 3),
    __webpack_require__(/*! pim/filter/attribute/attribute */ 156),
    __webpack_require__(/*! pim/template/filter/attribute/date */ 227),
    __webpack_require__(/*! pim/fetcher-registry */ 10),
    __webpack_require__(/*! pim/user-context */ 5),
    __webpack_require__(/*! pim/i18n */ 17),
    __webpack_require__(/*! datepicker */ 161),
    __webpack_require__(/*! pim/formatter/date */ 167),
    __webpack_require__(/*! pim/date-context */ 160),
    __webpack_require__(/*! jquery.select2 */ 29)
], __WEBPACK_AMD_DEFINE_RESULT__ = function (
    $,
    _,
    __,
    BaseFilter,
    template,
    FetcherRegistry,
    UserContext,
    i18n,
    Datepicker,
    DateFormatter,
    DateContext
) {
    return BaseFilter.extend({
        shortname: 'date',
        template: _.template(template),
        events: {
            'change [name^="filter-"]': 'updateState'
        },

        /**
         * Date widget options
         */
        datetimepickerOptions: {
            format: DateContext.get('date').format,
            defaultFormat: DateContext.get('date').defaultFormat,
            language: DateContext.get('language')
        },

        /**
         * Model date format
         */
        modelDateFormat: 'yyyy-MM-dd',

        /**
         * {@inheritdoc}
         */
        configure: function () {
            this.listenTo(this.getRoot(), 'pim_enrich:form:entity:pre_update', function (data) {
                _.defaults(data, {field: this.getCode(), operator: _.first(_.values(this.config.operators))});
            }.bind(this));

            return BaseFilter.prototype.configure.apply(this, arguments);
        },

        /**
         * {@inherit}
         */
        isEmpty: function () {
            var value = this.getValue();

            if (_.contains(['BETWEEN', 'NOT BETWEEN'], this.getOperator()) &&
                (undefined === value || !_.isArray(value) || _.isEmpty(value[0]) || _.isEmpty(value[1]))
            ) {
                return true;
            }

            if (!_.contains(['EMPTY', 'NOT EMPTY'], this.getOperator()) &&
                (undefined === value || '' === value)
            ) {
                return true;
            }

            return false;
        },

        /**
         * Initializes select2 and datepicker after rendering.
         */
        postRender: function () {
            var startDate = this.$('.start-date-wrapper:first');
            var endDate = this.$('.end-date-wrapper:first');

            this.$('[name="filter-operator"]').select2();

            if (0 !== startDate.length) {
                Datepicker
                    .init(startDate, this.datetimepickerOptions)
                    .on('changeDate', this.updateState.bind(this));
            }
            if (0 !== endDate.length) {
                Datepicker
                    .init(endDate, this.datetimepickerOptions)
                    .on('changeDate', this.updateState.bind(this));
            }
        },

        /**
         * {@inherit}
         */
        renderInput: function () {
            var dateFormat = DateContext.get('date').format;
            var value = this.getValue();
            var startValue = DateFormatter.format(value, this.modelDateFormat, dateFormat);
            var endValue = null;

            if (_.isArray(value)) {
                startValue = DateFormatter.format(value[0], this.modelDateFormat, dateFormat);
                endValue = DateFormatter.format(value[1], this.modelDateFormat, dateFormat);
            }

            return this.template({
                isEditable: this.isEditable(),
                __: __,
                shortName: this.shortname,
                field: this.getField(),
                operator: this.getOperator(),
                startValue: startValue,
                endValue: endValue,
                operatorChoices: this.config.operators
            });
        },

        /**
         * {@inherit}
         */
        updateState: function () {
            this.$('.start-date-wrapper').datetimepicker('hide');
            this.$('.end-date-wrapper').datetimepicker('hide');

            var value    = null;
            var operator = this.$('[name="filter-operator"]').val();

            if (!_.contains(['EMPTY', 'NOT EMPTY'], operator)) {
                var dateFormat = DateContext.get('date').format;
                var startValue = this.$('[name="filter-value-start"]').val();
                var formattedStartVal = DateFormatter.format(startValue, dateFormat, this.modelDateFormat);
                var valueEndField = this.$('[name="filter-value-end"]');

                value = formattedStartVal;

                if (0 !== valueEndField.length) {
                    var endValue = valueEndField.val();
                    var formattedEndVal = DateFormatter.format(endValue, dateFormat, this.modelDateFormat);

                    value = [formattedStartVal, formattedEndVal];
                }
            }

            this.setData({
                field: this.getField(),
                operator: operator,
                value: value
            });

            this.render();
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 430 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/filter/attribute/identifier.js ***!
  \****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(/*! jquery */ 1),
    __webpack_require__(/*! underscore */ 0),
    __webpack_require__(/*! oro/translator */ 3),
    __webpack_require__(/*! pim/filter/filter */ 158),
    __webpack_require__(/*! pim/fetcher-registry */ 10),
    __webpack_require__(/*! pim/user-context */ 5),
    __webpack_require__(/*! pim/template/filter/product/identifier */ 240)
], __WEBPACK_AMD_DEFINE_RESULT__ = function (
    $,
    _,
    __,
    BaseFilter,
    FetcherRegistry,
    UserContext,
    template
) {
    return BaseFilter.extend({
        shortname: 'identifier',
        template: _.template(template),
        events: {
            'change [name="filter-value"]': 'updateState'
        },

        /**
         * {@inheritdoc}
         */
        isEmpty: function () {
            return _.isEmpty(this.getValue());
        },

        /**
         * {@inheritdoc}
         */
        renderInput: function () {
            return this.template({
                __: __,
                value: _.isArray(this.getValue()) ? this.getValue().join(', ') : '',
                field: this.getField(),
                isEditable: this.isEditable()
            });
        },

        /**
         * {@inheritdoc}
         */
        getTemplateContext: function () {
            return BaseFilter.prototype.getTemplateContext.apply(this, arguments)
                .then(function (templateContext) {
                    return _.extend({}, templateContext, {
                        removable: false
                    });
                }.bind(this));
        },

        /**
         * {@inheritdoc}
         */
        updateState: function () {
            var value = this.$('[name="filter-value"]').val().split(/[\s,]+/);
            var cleanedValues = _.reject(value, function (val) {
                return '' === val;
            });

            this.setData({
                field: this.getField(),
                operator: 'IN',
                value: cleanedValues
            });
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 431 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/filter/attribute/media.js ***!
  \***********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(/*! jquery */ 1),
    __webpack_require__(/*! underscore */ 0),
    __webpack_require__(/*! oro/translator */ 3),
    __webpack_require__(/*! pim/filter/attribute/attribute */ 156),
    __webpack_require__(/*! pim/fetcher-registry */ 10),
    __webpack_require__(/*! pim/user-context */ 5),
    __webpack_require__(/*! pim/i18n */ 17),
    __webpack_require__(/*! pim/template/filter/attribute/media */ 228),
    __webpack_require__(/*! jquery.select2 */ 29)
], __WEBPACK_AMD_DEFINE_RESULT__ = function (
    $,
    _,
    __,
    BaseFilter,
    FetcherRegistry,
    UserContext,
    i18n,
    template
) {
    return BaseFilter.extend({
        shortname: 'media',
        template: _.template(template),
        events: {
            'change [name="filter-value"], [name="filter-operator"]': 'updateState'
        },

        /**
         * {@inheritdoc}
         */
        configure: function () {
            this.listenTo(this.getRoot(), 'pim_enrich:form:entity:pre_update', function (data) {
                _.defaults(data, {field: this.getCode(), value: '', operator: _.first(this.config.operators)});
            }.bind(this));

            return BaseFilter.prototype.configure.apply(this, arguments);
        },

        /**
         * {@inheritdoc}
         */
        isEmpty: function () {
            return !_.contains(['EMPTY', 'NOT EMPTY'], this.getOperator()) &&
                (undefined === this.getValue() || '' === this.getValue());
        },

        /**
         * {@inheritdoc}
         */
        renderInput: function (templateContext) {
            return this.template(_.extend({}, templateContext, {
                __: __,
                value: this.getValue(),
                field: this.getField(),
                operator: this.getOperator(),
                operators: this.config.operators
            }));
        },

        /**
         * {@inheritdoc}
         */
        postRender: function () {
            this.$('.operator').select2({minimumResultsForSearch: -1});
        },

        /**
         * {@inheritdoc}
         */
        updateState: function () {
            var value    = this.$('[name="filter-value"]').val();
            var operator = this.$('[name="filter-operator"]').val();

            this.setData({
                field: this.getField(),
                operator: operator,
                value: value
            });
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 432 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/filter/attribute/metric.js ***!
  \************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(/*! jquery */ 1),
    __webpack_require__(/*! underscore */ 0),
    __webpack_require__(/*! oro/translator */ 3),
    __webpack_require__(/*! pim/filter/attribute/attribute */ 156),
    __webpack_require__(/*! pim/fetcher-registry */ 10),
    __webpack_require__(/*! pim/user-context */ 5),
    __webpack_require__(/*! pim/i18n */ 17),
    __webpack_require__(/*! pim/template/filter/attribute/metric */ 229),
    __webpack_require__(/*! jquery.select2 */ 29)
], __WEBPACK_AMD_DEFINE_RESULT__ = function (
    $,
    _,
    __,
    BaseFilter,
    FetcherRegistry,
    UserContext,
    i18n,
    template
) {
    return BaseFilter.extend({
        shortname: 'metric',
        template: _.template(template),
        events: {
            'change [name="filter-data"], [name="filter-operator"], select.unit': 'updateState'
        },

        /**
         * {@inheritdoc}
         */
        configure: function () {
            return $.when(
                FetcherRegistry.getFetcher('attribute').fetch(this.getCode()),
                BaseFilter.prototype.configure.apply(this, arguments)
            ).then(function (attribute) {
                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:pre_update', function (data) {
                    _.defaults(data, {
                        field: this.getCode(),
                        operator: _.first(_.values(this.config.operators)),
                        value: {
                            amount: '',
                            unit: attribute.default_metric_unit
                        }
                    });
                }.bind(this));
            }.bind(this));
        },

        /**
         * {@inheritdoc}
         */
        isEmpty: function () {
            return !_.contains(['EMPTY', 'NOT EMPTY'], this.getOperator()) &&
                (undefined === this.getValue() ||
                undefined === this.getValue().amount ||
                '' === this.getValue().amount);
        },

        /**
         * {@inheritdoc}
         */
        renderInput: function (templateContext) {
            return this.template(_.extend({}, templateContext, {
                __: __,
                value: this.getValue(),
                field: this.getField(),
                operator: this.getOperator(),
                operators: this.config.operators
            }));
        },

        /**
         * {@inheritdoc}
         */
        postRender: function () {
            this.$('.operator, .unit').select2({minimumResultsForSearch: -1});
        },

        /**
         * {@inheritdoc}
         */
        getTemplateContext: function () {
            return $.when(
                BaseFilter.prototype.getTemplateContext.apply(this, arguments),
                FetcherRegistry.getFetcher('measure').fetchAll()
            ).then(function (templateContext, measures) {
                return _.extend({}, templateContext, {
                    units: measures[templateContext.attribute.metric_family]
                });
            }.bind(this));
        },

        /**
         * {@inheritdoc}
         */
        updateState: function () {
            var value = {
                amount: this.$('[name="filter-data"]').val(),
                unit: this.$('select[name="filter-unit"]').val()
            };

            var operator = this.$('[name="filter-operator"]').val();

            this.setData({
                field: this.getField(),
                operator: operator,
                value: value
            });
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 433 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/filter/attribute/number.js ***!
  \************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(/*! jquery */ 1),
    __webpack_require__(/*! underscore */ 0),
    __webpack_require__(/*! oro/translator */ 3),
    __webpack_require__(/*! pim/filter/attribute/attribute */ 156),
    __webpack_require__(/*! pim/fetcher-registry */ 10),
    __webpack_require__(/*! pim/user-context */ 5),
    __webpack_require__(/*! pim/i18n */ 17),
    __webpack_require__(/*! pim/template/filter/attribute/number */ 230),
    __webpack_require__(/*! jquery.select2 */ 29)
], __WEBPACK_AMD_DEFINE_RESULT__ = function (
    $,
    _,
    __,
    BaseFilter,
    FetcherRegistry,
    UserContext,
    i18n,
    template
) {
    return BaseFilter.extend({
        shortname: 'number',
        template: _.template(template),
        events: {
            'change [name="filter-operator"], [name="filter-value"]': 'updateState'
        },

        /**
         * {@inheritdoc}
         */
        configure: function () {
            this.listenTo(this.getRoot(), 'pim_enrich:form:entity:pre_update', function (data) {
                _.defaults(data, {field: this.getCode(), operator: _.first(_.values(this.config.operators))});
            }.bind(this));

            return BaseFilter.prototype.configure.apply(this, arguments);
        },

        /**
         * {@inherit}
         */
        isEmpty: function () {
            return !_.contains(['EMPTY', 'NOT EMPTY'], this.getOperator()) &&
                (undefined === this.getValue() || '' === this.getValue());
        },

        /**
         * {@inherit}
         */
        renderInput: function (templateContext) {
            return this.template(_.extend({}, templateContext, {
                __: __,
                shortName: this.shortname,
                value: this.getValue(),
                field: this.getField(),
                operator: this.getOperator(),
                operatorChoices: this.config.operators
            }));
        },

        /**
         * {@inheritdoc}
         */
        postRender: function () {
            this.$('.operator').select2({minimumResultsForSearch: -1});
        },

        /**
         * {@inherit}
         */
        updateState: function () {
            var operator = this.$('[name="filter-operator"]').val();
            var value = null;

            if (!_.contains(['EMPTY', 'NOT EMPTY'], operator)) {
                value = this.$('[name="filter-value"]').val().trim();
            }

            this.setData({
                field: this.getField(),
                operator: operator,
                value: value
            });
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 434 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/filter/attribute/price-collection.js ***!
  \**********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(/*! jquery */ 1),
    __webpack_require__(/*! underscore */ 0),
    __webpack_require__(/*! oro/translator */ 3),
    __webpack_require__(/*! pim/filter/attribute/attribute */ 156),
    __webpack_require__(/*! pim/fetcher-registry */ 10),
    __webpack_require__(/*! pim/user-context */ 5),
    __webpack_require__(/*! pim/i18n */ 17),
    __webpack_require__(/*! pim/template/filter/attribute/price-collection */ 231),
    __webpack_require__(/*! jquery.select2 */ 29)
], __WEBPACK_AMD_DEFINE_RESULT__ = function (
    $,
    _,
    __,
    BaseFilter,
    FetcherRegistry,
    UserContext,
    i18n,
    template
) {
    return BaseFilter.extend({
        shortname: 'price-collection',
        template: _.template(template),
        events: {
            'change [name="filter-data"], [name="filter-operator"], select.currency': 'updateState'
        },

        /**
         * {@inheritdoc}
         */
        configure: function () {
            this.listenTo(this.getRoot(), 'pim_enrich:form:entity:pre_update', function (data) {
                _.defaults(data, {
                    field: this.getCode(),
                    operator: _.first(_.values(this.config.operators)),
                    value: {
                        amount: '',
                        currency: ''
                    }
                });
            }.bind(this));

            return BaseFilter.prototype.configure.apply(this, arguments);
        },

        /**
         * {@inheritdoc}
         */
        isEmpty: function () {
            return !_.contains(['EMPTY', 'NOT EMPTY'], this.getOperator()) &&
                (undefined === this.getValue() ||
                undefined === this.getValue().amount ||
                '' === this.getValue().amount);
        },

        /**
         * {@inheritdoc}
         */
        renderInput: function (templateContext) {
            return this.template(_.extend({}, templateContext, {
                __: __,
                value: this.getValue(),
                field: this.getField(),
                operator: this.getOperator(),
                operators: this.config.operators
            }));
        },

        /**
         * {@inheritdoc}
         */
        postRender: function () {
            this.$('.operator, .currency').select2({minimumResultsForSearch: -1});
        },

        /**
         * {@inheritdoc}
         */
        getTemplateContext: function () {
            return $.when(
                BaseFilter.prototype.getTemplateContext.apply(this, arguments),
                FetcherRegistry.getFetcher('currency').fetchAll()
            ).then(function (templateContext, currencies) {
                return _.extend({}, templateContext, {
                    currencies: currencies
                });
            }.bind(this));
        },

        /**
         * {@inheritdoc}
         */
        updateState: function () {
            var value = {
                amount: this.$('[name="filter-data"]').val(),
                currency: this.$('select[name="filter-currency"]').val()
            };

            var operator = this.$('[name="filter-operator"]').val();

            this.setData({
                field: this.getField(),
                operator: operator,
                value: value
            });
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 435 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/filter/attribute/select.js ***!
  \************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(/*! jquery */ 1),
    __webpack_require__(/*! underscore */ 0),
    __webpack_require__(/*! oro/translator */ 3),
    __webpack_require__(/*! routing */ 4),
    __webpack_require__(/*! pim/filter/attribute/attribute */ 156),
    __webpack_require__(/*! pim/fetcher-registry */ 10),
    __webpack_require__(/*! pim/user-context */ 5),
    __webpack_require__(/*! pim/i18n */ 17),
    __webpack_require__(/*! pim/template/filter/attribute/select */ 232),
    __webpack_require__(/*! jquery.select2 */ 29)
], __WEBPACK_AMD_DEFINE_RESULT__ = function (
    $,
    _,
    __,
    Routing,
    BaseFilter,
    FetcherRegistry,
    UserContext,
    i18n,
    template
) {
    return BaseFilter.extend({
        shortname: 'select',
        template: _.template(template),
        choicePromise: null,
        events: {
            'change [name="filter-value"], [name="filter-operator"]': 'updateState'
        },

        /**
         * {@inheritdoc}
         */
        initialize: function () {
            this.choicePromise = null;

            return BaseFilter.prototype.initialize.apply(this, arguments);
        },

        /**
         * {@inheritdoc}
         */
        configure: function () {
            this.listenTo(this.getRoot(), 'pim_enrich:form:entity:pre_update', function (data) {
                _.defaults(data, {field: this.getCode() + '.code'});
            }.bind(this));

            return BaseFilter.prototype.configure.apply(this, arguments);
        },

        /**
         * {@inheritdoc}
         */
        isEmpty: function () {
            return !_.contains(['EMPTY', 'NOT EMPTY'], this.getOperator()) &&
                (undefined === this.getValue() || _.isEmpty(this.getValue()));
        },

        /**
         * {@inheritdoc}
         */
        renderInput: function () {
            if (undefined === this.getOperator()) {
                this.setOperator(_.first(_.values(this.config.operators)));
            }

            return this.template({
                __: __,
                value: this.getValue(),
                field: this.getField(),
                operator: this.getOperator(),
                editable: this.isEditable(),
                operators: this.config.operators
            });
        },

        /**
         * {@inheritdoc}
         */
        postRender: function (templateContext) {
            this.$('.operator').select2({
                minimumResultsForSearch: -1
            });

            if (!_.contains(['EMPTY', 'NOT EMPTY'], this.getOperator())) {
                this.$('.value').select2(templateContext.select2Options);
            }
        },

        /**
         * {@inheritdoc}
         */
        getTemplateContext: function () {
            return FetcherRegistry
                .getFetcher('attribute')
                .fetch(this.getCode())
                .then(function (attribute) {
                    return this.cleanInvalidValues(attribute, this.getValue()).then(function (cleanedValues) {
                        if (!_.isEqual(this.getValue(), cleanedValues)) {
                            this.setValue(cleanedValues, {silent: false});
                        }

                        return {
                            label: i18n.getLabel(attribute.labels, UserContext.get('uiLocale'), attribute.code),
                            select2Options: this.getSelect2Options(attribute),
                            removable: this.isRemovable(),
                            editable: this.isEditable()
                        };
                    }.bind(this));
                }.bind(this));
        },

        /**
         * {@inheritdoc}
         */
        updateState: function () {
            var cleanedValues = [];
            var operator = this.$('[name="filter-operator"]').val();

            if (!_.contains(['EMPTY', 'NOT EMPTY'], operator)) {
                var value = this.$('[name="filter-value"]').val().split(/[\s,]+/);
                cleanedValues = _.reject(value, function (val) {
                    return '' === val;
                });
            }

            this.setData({
                field: this.getField(),
                operator: operator,
                value: cleanedValues
            });
        },

        /**
         * Return the choice options or reference data to populate the select2.
         *
         * @returns {Object}
         */
        getSelect2Options: function (attribute) {
            var choiceUrl = this.getChoiceUrl(attribute);

            return {
                ajax: {
                    url: choiceUrl,
                    cache: true,
                    data: function (term) {
                        return {
                            search: term,
                            options: {
                                locale: UserContext.get('uiLocale')
                            }
                        };
                    },
                    results: function (data) {
                        return data;
                    }
                },
                initSelection: function (element, callback) {
                    this.getChoices(attribute).then(function (response) {
                        var results = response.results;
                        var choices = _.map($(element).val().split(','), function (choice) {
                            return _.findWhere(results, {id: choice});
                        });
                        callback(choices);
                    }.bind(this));
                }.bind(this),
                multiple: true
            };
        },

        /**
         * Return the select choice promise which, once resolved, return all possible choices
         * for the given select attribute.
         *
         * @param {string} attribute
         *
         * @returns {Promise}
         */
        getChoices: function (attribute) {
            var choiceUrl = this.getChoiceUrl(attribute);

            if (null === this.choicePromise) {
                this.choicePromise = $.get(choiceUrl);
            }

            return this.choicePromise;
        },

        /**
         * Get the string Url to access all select choices related to the given attribute.
         *
         * @param {string} attribute
         *
         * @returns {string}
         */
        getChoiceUrl: function (attribute) {
            return Routing.generate(
                this.config.url,
                {
                    class: this.config.entityClass,
                    dataLocale: UserContext.get('uiLocale'),
                    collectionId: attribute.id,
                    options: {type: 'code'},
                    referenceDataName: attribute.reference_data_name
                }
            );
        },

        /**
         * Clean invalid values by removing possibly non-existent options coming from database.
         * This method returns a promise which, once resolved, should return the attribute.
         *
         * @param {string} attribute
         * @param {array} currentValues
         *
         * @returns {Promise}
         */
        cleanInvalidValues: function (attribute, currentValues) {
            return this.getChoices(attribute).then(function (response) {
                var possibleValues = _.pluck(response.results, 'id');
                currentValues  = undefined !== currentValues ? currentValues : [];

                return _.intersection(currentValues, possibleValues);
            }.bind(this));
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 436 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/filter/attribute/string.js ***!
  \************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(/*! jquery */ 1),
    __webpack_require__(/*! underscore */ 0),
    __webpack_require__(/*! oro/translator */ 3),
    __webpack_require__(/*! pim/filter/attribute/attribute */ 156),
    __webpack_require__(/*! pim/fetcher-registry */ 10),
    __webpack_require__(/*! pim/user-context */ 5),
    __webpack_require__(/*! pim/i18n */ 17),
    __webpack_require__(/*! pim/template/filter/attribute/string */ 233),
    __webpack_require__(/*! jquery.select2 */ 29)
], __WEBPACK_AMD_DEFINE_RESULT__ = function (
    $,
    _,
    __,
    BaseFilter,
    FetcherRegistry,
    UserContext,
    i18n,
    template
) {
    return BaseFilter.extend({
        shortname: 'string',
        template: _.template(template),
        events: {
            'change [name="filter-operator"], [name="filter-value"]': 'updateState'
        },

        /**
         * {@inheritdoc}
         */
        configure: function () {
            this.listenTo(this.getRoot(), 'pim_enrich:form:entity:pre_update', function (data) {
                _.defaults(data, {field: this.getCode(), value: '', operator: _.first(this.config.operators)});
            }.bind(this));

            return BaseFilter.prototype.configure.apply(this, arguments);
        },

        /**
         * {@inherit}
         */
        isEmpty: function () {
            return !_.contains(['EMPTY', 'NOT EMPTY'], this.getOperator()) &&
                (undefined === this.getValue() || '' === this.getValue());
        },

        /**
         * {@inherit}
         */
        renderInput: function (templateContext) {
            return this.template(_.extend({}, templateContext, {
                __: __,
                value: this.getValue(),
                field: this.getField(),
                operator: this.getOperator(),
                operators: this.config.operators
            }));
        },

        /**
         * {@inheritdoc}
         */
        postRender: function () {
            this.$('.operator').select2({minimumResultsForSearch: -1});
        },

        /**
         * {@inherit}
         */
        updateState: function () {
            var value    = this.$('[name="filter-value"]').val();
            var operator = this.$('[name="filter-operator"]').val();

            this.setData({
                field: this.getField(),
                operator: operator,
                value: value
            });

            this.render();
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 437 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/filter/product/category.js ***!
  \************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(/*! jquery */ 1),
    __webpack_require__(/*! underscore */ 0),
    __webpack_require__(/*! oro/translator */ 3),
    __webpack_require__(/*! backbone */ 2),
    __webpack_require__(/*! pim/filter/filter */ 158),
    __webpack_require__(/*! routing */ 4),
    __webpack_require__(/*! pim/filter/product/category/selector */ 328),
    __webpack_require__(/*! pim/fetcher-registry */ 10),
    __webpack_require__(/*! pim/template/filter/product/category */ 235),
    __webpack_require__(/*! jquery.select2 */ 29)
], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, __, Backbone, BaseFilter, Routing, CategoryTree, fetcherRegistry, template) {
    var TreeModal = Backbone.BootstrapModal.extend({
        className: 'modal jstree-modal'
    });

    return BaseFilter.extend({
        shortname: 'category',
        template: _.template(template),
        className: 'AknFieldContainer control-group filter-item category-filter',
        events: {
            'click button': 'openSelector'
        },

        /**
         * {@inherit}
         */
        configure: function () {
            this.listenTo(this, 'channel:update:after', this.channelUpdated.bind(this));
            this.listenTo(this.getRoot(), 'pim_enrich:form:entity:pre_update', function (data) {
                _.defaults(data, {field: this.getCode(), operator: 'IN CHILDREN', value: []});
            }.bind(this));

            return BaseFilter.prototype.configure.apply(this, arguments);
        },

        /**
         * Returns rendered input.
         *
         * @return {String}
         */
        renderInput: function () {
            var categoryCount = 'IN CHILDREN' === this.getOperator() ? 0 : this.getValue().length;

            return this.template({
                isEditable: this.isEditable(),
                titleEdit: __('pim_connector.export.categories.selector.title'),
                labelEdit: __('pim_connector.export.categories.selector.edit'),
                labelInfo: __(
                    'pim_connector.export.categories.selector.label',
                    {count: categoryCount},
                    categoryCount
                ),
                value: this.getValue()
            });
        },

        /**
         * Resets selection after channel has been modified then re-renders the view.
         */
        channelUpdated: function () {
            this.getCurrentChannel().then(function (channel) {
                this.setDefaultValues(channel);
                this.render();
            }.bind(this));
        },

        /**
         * {@inherit}
         */
        getTemplateContext: function () {
            return $.when(
                BaseFilter.prototype.getTemplateContext.apply(this, arguments),
                this.getCurrentChannel()
            ).then(function (templateContext, channel) {
                if ('IN CHILDREN' === this.getOperator()) {
                    this.setDefaultValues(channel);
                }

                return templateContext;
            }.bind(this));
        },

        /**
         * Open the selector popin
         */
        openSelector: function () {
            var modal = new TreeModal({
                title: __('pim_connector.export.categories.selector.modal.title'),
                cancelText: __('pim_connector.export.categories.selector.modal.cancel'),
                okText: __('pim_connector.export.categories.selector.modal.confirm'),
                content: ''
            });

            modal.render();

            var tree = new CategoryTree({
                el: modal.$el.find('.modal-body'),
                attributes: {
                    channel: this.getParentForm().getFilters().structure.scope,
                    categories: 'IN CHILDREN' === this.getOperator() ? [] : this.getValue()
                }
            });

            tree.render();
            modal.open();

            modal.on('cancel', function () {
                modal.remove();
                tree.remove();
            });

            modal.on('ok', function () {
                if (_.isEmpty(tree.attributes.categories)) {
                    this.getCurrentChannel().then(function (channel) {
                        this.setDefaultValues(channel);
                    }.bind(this));
                } else {
                    this.setData({
                        field: this.getField(),
                        operator: 'IN',
                        value: tree.attributes.categories
                    });
                }

                modal.close();
                modal.remove();
                tree.remove();
                this.render();
            }.bind(this));
        },

        /**
         * {@inheritdoc}
         */
        isEmpty: function () {
            return false;
        },

        /**
         * Get the current selected channel
         *
         * @return {Promise}
         */
        getCurrentChannel: function () {
            return fetcherRegistry.getFetcher('channel')
                .fetch(this.getParentForm().getFilters().structure.scope);
        },

        /**
         * Set the default values for the filter
         *
         * @param {object} channel
         */
        setDefaultValues: function (channel) {
            if (this.getOperator() === 'IN CHILDREN' && _.isEqual(this.getValue(), [channel.category_tree])) {
                return;
            }

            this.setData({
                field: this.getField(),
                operator: 'IN CHILDREN',
                value: [channel.category_tree]
            });
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 438 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/filter/product/completeness.js ***!
  \****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(/*! underscore */ 0),
    __webpack_require__(/*! oro/translator */ 3),
    __webpack_require__(/*! pim/filter/filter */ 158),
    __webpack_require__(/*! routing */ 4),
    __webpack_require__(/*! pim/template/filter/product/completeness */ 237),
    __webpack_require__(/*! jquery.select2 */ 29)
], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, __, BaseFilter, Routing, template) {
    return BaseFilter.extend({
        shortname: 'completeness',
        template: _.template(template),
        events: {
            'change [name="filter-operator"]': 'updateState'
        },

        /**
         * {@inheritdoc}
         */
        initialize: function (config) {
            this.config = config.config;
        },

        /**
         * {@inheritdoc}
         */
        configure: function () {
            this.on('locales:update:after', this.updateState.bind(this));
            this.listenTo(this.getRoot(), 'pim_enrich:form:entity:pre_update', function (data) {
                _.defaults(data, {field: this.getCode(), operator: _.first(this.config.operators), value: 100});
            }.bind(this));

            return BaseFilter.prototype.configure.apply(this, arguments);
        },

        /**
         * Returns rendered input.
         *
         * @return {String}
         */
        renderInput: function () {
            return this.template({
                isEditable: this.isEditable(),
                __: __,
                operator: this.getOperator(),
                value: this.getValue(),
                operatorChoices: this.config.operators
            });
        },

        /**
         * Initializes select2 after rendering.
         */
        postRender: function () {
            this.$('[name="filter-operator"]').select2({minimumResultsForSearch: -1});
        },

        /**
         * {@inheritdoc}
         */
        isEmpty: function () {
            return false;
        },

        /**
         * Updates operator and value on fields change.
         */
        updateState: function () {
            this.setData({
                field: this.getField(),
                operator: this.$('[name="filter-operator"]').val(),
                value: 100,
                context: {'locales': this.getParentForm().getFilters().structure.locales}
            });
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 439 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/filter/product/enabled.js ***!
  \***********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

//Should be reworked to be a boolean filter

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/filter/filter */ 158),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! pim/template/filter/product/enabled */ 238),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! pim/i18n */ 17),
        __webpack_require__(/*! jquery.select2 */ 29)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, __, BaseFilter, Routing, template) {
    return BaseFilter.extend({
        shortname: 'enabled',
        template: _.template(template),
        removable: false,
        events: {
            'change [name="filter-value"]': 'updateState'
        },

        /**
         * {@inherit}
         */
        configure: function () {
            this.listenTo(this.getRoot(), 'pim_enrich:form:entity:pre_update', function (data) {
                _.defaults(data, {field: this.getCode(), operator: '=', value: true});
            }.bind(this));

            return BaseFilter.prototype.configure.apply(this, arguments);
        },

        /**
         * Returns rendered input.
         *
         * @return {String}
         */
        renderInput: function () {
            return this.template({
                isEditable: this.isEditable(),
                labels: {
                    title: __('pim_enrich.export.product.filter.enabled.title'),
                    valueChoices: {
                        all: __('pim_enrich.export.product.filter.enabled.value.all'),
                        enabled: __('pim_enrich.export.product.filter.enabled.value.enabled'),
                        disabled: __('pim_enrich.export.product.filter.enabled.value.disabled')
                    }
                },
                value: this.getValue()
            });
        },

        /**
         * Initializes select2 after rendering.
         */
        postRender: function () {
            this.$('[name="filter-value"]').select2({minimumResultsForSearch: -1});
        },

        /**
         * {@inheritdoc}
         */
        isEmpty: function () {
            return false;
        },

        /**
         * Updates operator and value on fields change.
         */
        updateState: function () {
            var value = this.$('[name="filter-value"]').val();

            if ('all' === value) {
                this.setData({field: this.getField(), operator: 'ALL', value: null});
            } else {
                this.setData({field: this.getField(), operator: '=', value: 'enabled' === value});
            }
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 440 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/filter/product/family.js ***!
  \**********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(/*! underscore */ 0),
    __webpack_require__(/*! oro/translator */ 3),
    __webpack_require__(/*! pim/filter/filter */ 158),
    __webpack_require__(/*! routing */ 4),
    __webpack_require__(/*! pim/template/filter/product/family */ 239),
    __webpack_require__(/*! pim/fetcher-registry */ 10),
    __webpack_require__(/*! pim/user-context */ 5),
    __webpack_require__(/*! pim/i18n */ 17),
    __webpack_require__(/*! jquery.select2 */ 29)
], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, __, BaseFilter, Routing, template, fetcherRegistry, userContext, i18n) {
    return BaseFilter.extend({
        shortname: 'family',
        config: {},
        template: _.template(template),
        events: {
            'change [name="filter-value"]': 'updateState'
        },

        /**
         * {@inheritdoc}
         */
        initialize: function (config) {
            this.config = config.config;

            this.selectOptions = {
                allowClear: true,
                multiple: true,
                ajax: {
                    url: Routing.generate(this.config.url),
                    quietMillis: 250,
                    cache: true,
                    data: function (term, page) {
                        return {
                            search: term,
                            options: {
                                limit: 20,
                                page: page,
                                locale: userContext.get('uiLocale')
                            }
                        };
                    },
                    results: function (families) {
                        var data = {
                            more: 20 === _.keys(families).length,
                            results: []
                        };
                        _.each(families, function (value, key) {
                            data.results.push({
                                id: key,
                                text: i18n.getLabel(value.labels, userContext.get('uiLocale'), value.code)
                            });
                        });

                        return data;
                    }
                },
                initSelection: function (element, callback) {
                    var families = this.getValue();
                    if (null !== families) {
                        fetcherRegistry.getFetcher('family')
                            .fetchByIdentifiers(families)
                            .then(function (families) {
                                callback(_.map(families, function (family) {
                                    return {
                                        id: family.code,
                                        text: i18n.getLabel(family.labels, userContext.get('uiLocale'), family.code)
                                    };
                                }));
                            });
                    }
                }.bind(this)
            };

            return BaseFilter.prototype.initialize.apply(this, arguments);
        },

        /**
         * {@inherit}
         */
        configure: function () {
            this.listenTo(this.getRoot(), 'pim_enrich:form:entity:pre_update', function (data) {
                _.defaults(data, {field: this.getCode(), operator: '='});
            }.bind(this));

            return BaseFilter.prototype.configure.apply(this, arguments);
        },

        /**
         * {@inheritdoc}
         */
        renderInput: function () {
            return this.template({
                isEditable: this.isEditable(),
                __: __,
                field: this.getField(),
                value: this.getValue(),
                shortname: this.shortname
            });
        },

        /**
         * {@inheritdoc}
         */
        postRender: function () {
            this.$('[name="filter-value"]').select2(this.selectOptions);
        },

        /**
         * {@inheritdoc}
         */
        isEmpty: function () {
            return _.isEmpty(this.getValue());
        },

        /**
         * {@inheritdoc}
         */
        updateState: function () {
            var value = this.$('[name="filter-value"]').val();

            this.setData({
                field: this.getField(),
                operator: 'IN',
                value: '' === value ?
                    [] :
                    value.split(',')
            });
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 441 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/filter/product/updated.js ***!
  \***********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(/*! jquery */ 1),
    __webpack_require__(/*! underscore */ 0),
    __webpack_require__(/*! oro/translator */ 3),
    __webpack_require__(/*! pim/filter/filter */ 158),
    __webpack_require__(/*! routing */ 4),
    __webpack_require__(/*! pim/template/filter/product/updated */ 241),
    __webpack_require__(/*! pim/fetcher-registry */ 10),
    __webpack_require__(/*! pim/user-context */ 5),
    __webpack_require__(/*! pim/i18n */ 17),
    __webpack_require__(/*! jquery.select2 */ 29),
    __webpack_require__(/*! datepicker */ 161),
    __webpack_require__(/*! pim/date-context */ 160),
    __webpack_require__(/*! pim/formatter/date */ 167)
], __WEBPACK_AMD_DEFINE_RESULT__ = function (
    $,
    _,
    __,
    BaseFilter,
    Routing,
    template,
    fetcherRegistry,
    userContext,
    i18n,
    initSelect2,
    Datepicker,
    DateContext,
    DateFormatter
) {
    return BaseFilter.extend({
        shortname: 'updated',
        template: _.template(template),
        events: {
            'change [name="filter-operator"], [name="filter-value-updated"]': 'updateState'
        },

        /* Date widget options */
        datetimepickerOptions: {
            format: DateContext.get('date').format,
            defaultFormat: DateContext.get('date').defaultFormat,
            language: DateContext.get('language')
        },

        /* Model date format */
        modelDateFormat: 'yyyy-MM-dd HH:mm:ss',

        /**
         * Initializes configuration.
         *
         * @param config
         */
        initialize: function (config) {
            this.config = config.config;

            return BaseFilter.prototype.initialize.apply(this, arguments);
        },

        /**
         * {@inheritdoc}
         */
        configure: function () {
            this.listenTo(this.getRoot(), 'pim_enrich:form:entity:pre_update', function (data) {
                _.defaults(data, {field: this.getCode(), operator: _.first(_.values(this.config.operators))});
            }.bind(this));

            return BaseFilter.prototype.configure.apply(this, arguments);
        },

        /**
         * Returns rendered input.
         *
         * @return {String}
         */
        renderInput: function () {
            var value    = this.getValue();
            var operator = this.getOperator();

            if ('SINCE LAST JOB' !== operator && 'SINCE LAST N DAYS' !== operator) {
                value = DateFormatter.format(value, this.modelDateFormat, DateContext.get('date').format);
            }

            return this.template({
                isEditable: this.isEditable(),
                __: __,
                field: this.getField(),
                operator: operator,
                value: value,
                operatorChoices: this.config.operators
            });
        },

        /**
         * Initializes select2 and datepicker after rendering.
         */
        postRender: function () {
            this.$('[name="filter-operator"]').select2({minimumResultsForSearch: -1});

            if ('>' === this.getOperator()) {
                Datepicker
                    .init(this.$('.date-wrapper:first'), this.datetimepickerOptions)
                    .on('changeDate', this.updateState.bind(this));
            }
        },

        /**
         * {@inheritdoc}
         */
        isEmpty: function () {
            return !this.getOperator() || 'ALL' === this.getOperator();
        },

        /**
         * Updates operator and value on fields change.
         * Value is reset after operator has changed.
         */
        updateState: function () {
            this.$('.date-wrapper:first').datetimepicker('hide');

            var oldOperator = this.getOperator();
            var value       = this.$('[name="filter-value-updated"]').val();
            var operator    = this.$('[name="filter-operator"]').val();

            if (operator !== oldOperator) {
                value = '';
            }

            if ('>' === operator) {
                value = DateFormatter.format(value, DateContext.get('date').format, this.modelDateFormat);
            } else if ('SINCE LAST JOB' === operator) {
                value = this.getParentForm().getFormData().code;
            }
            if (_.isUndefined(value)) {
                value = '';
            }

            this.setData({
                field: this.getField(),
                operator: operator,
                value: value
            });

            this.render();
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 442 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/common/attributes/attribute-group-selector.js ***!
  \************************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Attribute group selector extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/form/common/group-selector */ 332),
        __webpack_require__(/*! pim/attribute-group-manager */ 185),
        __webpack_require__(/*! pim/template/form/tab/attribute/attribute-group-selector */ 264),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! pim/i18n */ 17),
        __webpack_require__(/*! pim/provider/to-fill-field-provider */ 186)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, GroupSelectorForm, AttributeGroupManager, template, UserContext, i18n, toFillFieldProvider) {
        return GroupSelectorForm.extend({
            template: _.template(template),

            /**
             * {@inheritdoc}
             */
            configure: function () {
                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:validation_error', this.onValidationError);
                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:post_fetch', this.onPostFetch);
                this.listenTo(UserContext, 'change:catalogLocale', this.render);
                this.listenTo(UserContext, 'change:catalogScope', this.render);

                return GroupSelectorForm.prototype.configure.apply(this, arguments);
            },

            /**
             * Triggered on validation error
             *
             * @param {Event} event
             */
            onValidationError: function (event) {
                this.removeBadges();

                var object = event.sentData;
                var valuesErrors = _.uniq(event.response.values, function (error) {
                    return JSON.stringify(error);
                });

                if (valuesErrors) {
                    AttributeGroupManager.getAttributeGroupsForObject(object)
                        .then(function (attributeGroups) {
                            var globalErrors = [];
                            _.each(valuesErrors, function (error) {
                                if (error.global) {
                                    globalErrors.push(error);
                                }

                                var attributeGroup = AttributeGroupManager.getAttributeGroupForAttribute(
                                    attributeGroups,
                                    error.attribute
                                );
                                this.addToBadge(attributeGroup, 'invalid');
                            }.bind(this));

                            // Don't force attributes tab if only global errors
                            if (!_.isEmpty(valuesErrors) && valuesErrors.length > globalErrors.length) {
                                this.getRoot().trigger('pim_enrich:form:show_attribute', _.first(valuesErrors));
                            }
                        }.bind(this));
                }
            },

            /**
             * Triggered on post fetch
             */
            onPostFetch: function () {
                this.removeBadges();
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                $.when(
                    toFillFieldProvider.getFields(this.getRoot(), this.getFormData()),
                    AttributeGroupManager.getAttributeGroupsForObject(this.getFormData())
                ).then(function (attributes, attributeGroups) {
                    var toFillAttributeGroups = _.uniq(_.map(attributes, function (attribute) {
                        return AttributeGroupManager.getAttributeGroupForAttribute(
                            attributeGroups,
                            attribute
                        );
                    }));

                    this.$el.html(this.template({
                        current: this.getCurrent(),
                        elements: this.getElements(),
                        badges: this.badges,
                        locale: UserContext.get('catalogLocale'),
                        toFillAttributeGroups: toFillAttributeGroups,
                        i18n: i18n
                    }));

                    this.delegateEvents();
                }.bind(this));

                return this;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 443 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/common/attributes/copy.js ***!
  \****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Copy extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @author    Yohan Blain <yohan.blain@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! pim/template/form/tab/attribute/copy */ 266),
        __webpack_require__(/*! pim/form/common/attributes/copy-field */ 330),
        __webpack_require__(/*! pim/field-manager */ 150),
        __webpack_require__(/*! pim/attribute-manager */ 153),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! pim/fetcher-registry */ 10)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        BaseForm,
        mediator,
        template,
        CopyField,
        FieldManager,
        AttributeManager,
        UserContext,
        FetcherRegistry
    ) {
        return BaseForm.extend({
            template: _.template(template),
            className: 'AknAttributeActions-copyActions attribute-copy-actions',
            copyFields: {},
            copying: false,
            locale: null,
            scope: null,
            scopeLabel: null,
            events: {
                'click .start-copying': 'startCopying',
                'click .stop-copying': 'stopCopying',
                'click .select-all': 'selectAll',
                'click .select-all-visible': 'selectAllVisible',
                'click .select-none': 'selectNone',
                'click .copy': 'copy'
            },

            /**
             * Configure this extension
             *
             * @returns {Promise}
             */
            configure: function () {
                this.locale = UserContext.get('catalogLocale');
                this.scope  = UserContext.get('catalogScope');
                this.getScopeLabel(this.scope).then(function (scopeLabel) {
                    this.scopeLabel = scopeLabel;
                }.bind(this));

                this.listenTo(this.getRoot(), 'pim_enrich:form:field:extension:add', this.addFieldExtension);

                this.onExtensions('pim_enrich:form:scope_switcher:pre_render', this.initScope.bind(this));
                this.onExtensions('pim_enrich:form:locale_switcher:pre_render', this.initLocale.bind(this));
                this.onExtensions('pim_enrich:form:scope_switcher:change', function (event) {
                    this.setScope(event.scopeCode);
                }.bind(this));
                this.onExtensions('pim_enrich:form:locale_switcher:change', function (event) {
                    this.setLocale(event.localeCode);
                }.bind(this));

                return this.getScopeLabel(this.scope).then(function (scopeLabel) {
                    this.scopeLabel = scopeLabel;
                }.bind(this)).then(function () {
                    return BaseForm.prototype.configure.apply(this, arguments)
                });
            },

            /**
             * Return the values object from which data must be copied
             *
             * @returns {Object}
             */
            getSourceData: function () {
                return this.getFormData().values;
            },

            /**
             * Render the copy panel
             *
             * @returns {Object}
             */
            render: function () {
                this.trigger('comparison:change', this.copying);

                this.$el.html(this.template({'copying': this.copying}));
                if (this.copying) {
                    this.renderExtensions();
                }

                this.delegateEvents();

                return this;
            },

            /**
             * Render the copy element inside each field that can be copied
             *
             * @param {Object} event
             */
            addFieldExtension: function (event) {
                var field = event.field;
                if (this.copying && this.canBeCopied(field)) {
                    field.addElement('comparison', this.code, this.getCopyField(field));
                }
            },

            /**
             * Get or create a copy field object corresponding to the specified field
             *
             * @param {Field} field
             *
             * @returns {CopyField}
             */
            getCopyField: function (field) {
                var code = field.attribute.code;
                if (!_.has(this.copyFields, code)) {
                    var sourceData = this.getSourceData();
                    var copyField = new CopyField(field.attribute);

                    copyField.setContext({
                        locale: this.locale,
                        scope: this.scope,
                        scopeLabel: this.scopeLabel
                    });
                    copyField.setValues(sourceData[code]);
                    copyField.setField(field);

                    this.copyFields[code] = copyField;
                }

                return this.copyFields[code];
            },

            /**
             * Indicate if the specified field can be copied
             *
             * @param {Field} field
             * @returns {boolean}
             */
            canBeCopied: function (field) {
                return field.attribute.localizable || field.attribute.scopable;
            },

            /**
             * Launch the copy process for selected fields
             */
            copy: function () {
                _.each(this.copyFields, function (copyField) {
                    if (copyField.selected && copyField.field && copyField.field.isEditable()) {
                        var formValues = this.getFormModel().get('values');
                        var oldValue = AttributeManager.getValue(
                            formValues[copyField.field.attribute.code],
                            copyField.field.attribute,
                            UserContext.get('catalogLocale'),
                            UserContext.get('catalogScope')
                        );

                        oldValue.data = copyField.getCurrentValue().data;
                        this.getRoot().trigger('pim_enrich:form:entity:update_state');
                        copyField.setSelected(false);
                    }
                }.bind(this));

                this.trigger('copy:copy-fields:after');
            },

            /**
             * Enter in copy mode
             */
            startCopying: function () {
                this.copying = true;
                this.triggerContextChange();
            },

            /**
             * Close copy mode
             */
            stopCopying: function () {
                this.copying = false;
                this.triggerContextChange();
            },

            /**
             * Initialize  the locale if there is none, or modify it by reference if there is already one
             *
             * @param {Object} event
             */
            initLocale: function (event) {
                if (undefined === this.getLocale()) {
                    this.setLocale(event.localeCode);
                } else {
                    event.localeCode = this.getLocale();
                }
            },

            /**
             * Change the locale for copy context
             *
             * @param {string} locale
             */
            setLocale: function (locale) {
                this.locale = locale;
                this.triggerContextChange();
            },

            /**
             * Get the current locale for copy
             *
             * @returns {string}
             */
            getLocale: function () {
                return this.locale;
            },

            /**
             * Initialize  the scope if there is none, or modify it by reference if there is already one
             *
             * @param {Object} event
             */
            initScope: function (event) {
                if (undefined === this.getScope()) {
                    this.setScope(event.scopeCode);
                } else {
                    event.scopeCode = this.getScope();
                }
            },

            /**
             * Change the scope for copy context
             *
             * @param {string} scopeCode
             */
            setScope: function (scopeCode) {
                this.getScopeLabel(scopeCode).then(function (scopeLabel) {
                    this.scopeLabel = scopeLabel;
                    this.scope = scopeCode;
                    this.triggerContextChange();
                }.bind(this));
            },

            /**
             * Get the current scope for copy
             *
             * @returns {string}
             */
            getScope: function () {
                return this.scope;
            },

            /**
             * Reset copy fields cache then trigger the context change event
             */
            triggerContextChange: function () {
                this.copyFields = {};
                this.trigger('copy:context:change');
            },

            /**
             * Mark all fields (from all attribute groups) as selected
             */
            selectAll: function () {
                var fieldPromises = [];
                _.each(this.getSourceData(), function (value, attributeCode) {
                    fieldPromises.push(FieldManager.getField(attributeCode));
                }.bind(this));

                $.when.apply(this, fieldPromises)
                    .then(function () {
                        this.selectFields(arguments);
                    }.bind(this));
            },

            /**
             * Mark all visible fields (from active attribute group) as selected
             */
            selectAllVisible: function () {
                this.selectFields(FieldManager.getVisibleFields());
            },

            /**
             * Mark all fields as unselected
             */
            selectNone: function () {
                this.selectFields([]);
            },

            /**
             * Unselect all field
             */
            unselectAll: function () {
                _.each(this.copyFields, function (field) {
                    field.setSelected(false);
                });
            },

            /**
             * Mark specified fields as selected and trigger the select event
             *
             * @param {Field[]} fields
             */
            selectFields: function (fields) {
                this.unselectAll();

                _.each(fields, function (field) {
                    if (this.canBeCopied(field)) {
                        this.getCopyField(field).setSelected(true);
                    }
                }.bind(this));

                this.trigger('copy:select:after');
            },

            /**
             * Get the scope label with the given scope code
             *
             * @param {string} scopeCode
             *
             * @returns {Promise}
             */
            getScopeLabel: function (scopeCode) {
                return FetcherRegistry.getFetcher('channel').fetchAll().then(function (channels) {
                    var scope = _.findWhere(channels, { code: scopeCode });

                    return scope.label;
                });
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 444 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/common/back-to-grid.js ***!
  \*************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Back to grid extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/form/back-to-grid */ 245),
        __webpack_require__(/*! pim/router */ 11),
        __webpack_require__(/*! pim/user-context */ 5)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, __, BaseForm, template, router, UserContext) {
        return BaseForm.extend({
            tagName: 'span',
            events: {
                'click': 'backToGrid'
            },
            className: 'AknTitleContainer-backLink back-link',
            template: _.template(template),
            config: {},
            attributes: {
                title: __('pim_enrich.navigation.link.back_to_grid')
            },

            /**
             * {@inheritdoc}
             */
            initialize: function (meta) {
                this.config = meta.config;
            },

            /**
             * {@inheritdoc}
             */
            configure: function () {
                UserContext.off('change:catalogLocale', this.render);
                this.listenTo(UserContext, 'change:catalogLocale', this.render);

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                this.$el.html(this.template());

                return this;
            },

            backToGrid: function () {
                router.redirectToRoute(
                    this.config.backUrl,
                    {
                        dataLocale: UserContext.get('catalogLocale')
                    }
                );
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 445 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/common/edit-form.js ***!
  \**********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Edit form
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alps <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! module-config */ 21),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! pim/template/form/edit-form */ 248),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/field-manager */ 150)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        module,
        _,
        __,
        Backbone,
        template,
        BaseForm,
        mediator,
        FetcherRegistry,
        FieldManager
    ) {
        return BaseForm.extend({
            template: _.template(template),

            /**
             * {@inheritdoc}
             */
            configure: function () {
                mediator.clear('pim_enrich:form');
                Backbone.Router.prototype.once('route', this.unbindEvents);

                if (_.has(module.config(), 'forwarded-events')) {
                    this.forwardMediatorEvents(module.config()['forwarded-events']);
                }

                this.onExtensions('save-buttons:register-button', function (button) {
                    this.getExtension('save-buttons').trigger('save-buttons:add-button', button);
                }.bind(this));

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                if (!this.configured) {
                    return this;
                }
                this.getRoot().trigger('pim_enrich:form:render:before');

                this.$el.html(this.template());

                this.renderExtensions();

                this.getRoot().trigger('pim_enrich:form:render:after');
            },

            /**
             * Clear the mediator
             */
            unbindEvents: function () {
                mediator.clear('pim_enrich:form');
            },

            /**
             * Clear the cached informations
             */
            clearCache: function () {
                FetcherRegistry.clearAll();
                FieldManager.clearFields();
                this.render();
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 446 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/common/form-tabs.js ***!
  \**********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Form tabs extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/form/form-tabs */ 249)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, Backbone, BaseForm, template) {
        return BaseForm.extend({
            template: _.template(template),
            className: 'AknTabContainer tabbable tabs-top',
            tabs: [],
            fullPanel: false,
            urlParsed: false,
            events: {
                'click header ul.nav-tabs li': 'selectTab'
            },

            /**
             * {@inheritdoc}
             */
            initialize: function () {
                this.tabs = [];

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            configure: function () {
                this.onExtensions('tab:register',  this.registerTab.bind(this));
                this.listenTo(this.getRoot(), 'pim_enrich:form:form-tabs:change', this.setCurrentTab);

                window.addEventListener('resize', this.resize.bind(this));
                this.listenTo(this.getRoot(), 'pim_enrich:form:render:after', this.resize);

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * Register a tab into the form tab extension
             *
             * @param {Event} event
             */
            registerTab: function (event) {
                this.tabs.push({
                    code: event.code,
                    isVisible: event.isVisible,
                    label: event.label
                });

                this.render();
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                if (!this.configured || _.isEmpty(this.tabs)) {
                    return this;
                }

                var tabs = this.getTabs();
                this.ensureDefault();

                this.$el.html(
                    this.template({
                        tabs: tabs,
                        currentTab: this.getCurrentTab(),
                        fullPanel: this.fullPanel
                    })
                );
                this.delegateEvents();
                this.initializeDropZones();

                var currentTab = this.getTabExtension(this.getCurrentTab());
                if (currentTab) {
                    var zone = this.getZone('container');
                    zone.appendChild(currentTab.el);
                    this.renderExtension(currentTab);
                    this.resize();
                }

                var panelsExtension = this.getExtension('panels');
                if (panelsExtension) {
                    this.getZone('panels').appendChild(panelsExtension.el);
                    this.renderExtension(panelsExtension);
                }

                return this;
            },

            /**
             * Get visible tabs
             *
             * @return {Array}
             */
            getTabs: function () {
                var tabs = _.clone(this.tabs);
                tabs = _.filter(tabs, function (tab) {
                    return !_.isFunction(tab.isVisible) || tab.isVisible();
                });

                return tabs;
            },

            /**
             * Resize the container to avoid multiple scrollbar
             */
            resize: function () {
                var currentTab = this.getTabExtension(this.getCurrentTab());
                if (currentTab && _.isFunction(currentTab.resize)) {
                    currentTab.resize();
                }
            },

            /**
             * Select a tab in the form-tabs
             *
             * @param {Event} event
             */
            selectTab: function (event) {
                this.setCurrentTab(event.currentTarget.dataset.tab);
            },

            /**
             * Set the current tab and ask render if needed
             *
             * @param {string} tab
             */
            setCurrentTab: function (tab) {
                var needRender = false;

                if (this.getCurrentTab() !== tab) {
                    sessionStorage.setItem('current_form_tab', tab);
                    needRender = true;
                }

                if (this.fullPanel) {
                    this.fullPanel = false;
                    needRender = true;
                }

                if (needRender) {
                    this.render();
                }

                return this;
            },

            /**
             * get the current tab
             *
             * @return {string}
             */
            getCurrentTab: function () {
                return sessionStorage.getItem('current_form_tab');
            },

            /**
             * Is the form-tabs in full panel mode ?
             *
             * @return {Boolean}
             */
            isFullPanel: function () {
                return this.fullPanel;
            },

            /**
             * Set the form tabs in full panel or not
             *
             * @param {Boolean} fullPanel
             */
            setFullPanel: function (fullPanel) {
                if (this.fullPanel !== fullPanel) {
                    this.fullPanel = fullPanel;
                    this.render();
                }
            },

            /**
             * Ensure default value for the current tab
             */
            ensureDefault: function () {
                var tabs = this.getTabs();

                if (!_.isNull(sessionStorage.getItem('redirectTab')) &&
                    _.findWhere(tabs, {code: sessionStorage.getItem('redirectTab').substring(1)})
                ) {
                    this.setCurrentTab(sessionStorage.redirectTab.substring(1));

                    sessionStorage.removeItem('redirectTab');
                }

                var currentTabIsNotDefined = _.isNull(this.getCurrentTab());
                var currentTabDoesNotExist = !_.findWhere(tabs, {code: this.getCurrentTab()});
                if ((currentTabIsNotDefined || currentTabDoesNotExist) && _.first(tabs)) {
                    this.setCurrentTab(_.first(tabs).code);
                }
            },

            /**
             * Get a child tab extension
             *
             * @param {string} code
             *
             * @return {Object}
             */
            getTabExtension: function (code) {
                return this.extensions[_.find(this.extensions, function (extension) {
                    var extensionCode = extension.config && extension.config.tabCode ?
                        extension.config.tabCode :
                        extension.code;
                    var expectedPosition = extensionCode.length - code.length;

                    return expectedPosition >= 0 && expectedPosition === extensionCode.indexOf(code, expectedPosition);
                }).code];
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 447 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/common/index/confirm-button.js ***!
  \*********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Confirm button extension
 *
 * @author    Alban Alnot <alban.alnot@consertotech.pro>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! pim/template/form/index/confirm-button */ 252)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        __,
        BaseForm,
        Routing,
        template
    ) {
        return BaseForm.extend({
            template: _.template(template),

            /**
             * {@inheritdoc}
             */
            initialize: function (config) {
                this.config = config.config || {};

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                this.$el.html(this.template({
                    buttonClass: this.config.buttonClass,
                    buttonLabel: __(this.config.buttonLabel),
                    title: __(this.config.title),
                    message: __(this.config.message),
                    url: Routing.generate(this.config.url),
                    redirectUrl: Routing.generate(this.config.redirectUrl),
                    errorMessage: __(this.config.errorMessage),
                    successMessage: __(this.config.successMessage),
                    iconName: this.config.iconName
                }));

                this.renderExtensions();

                return this;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 448 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/common/index/create-button.js ***!
  \********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Create button
 *
 * @author    Alban Alnot <alban.alnot@consertotech.pro>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/form/index/create-button */ 253),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! pim/dialogform */ 190)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        __,
        BaseForm,
        template,
        Routing,
        DialogForm
    ) {
        return BaseForm.extend({
            template: _.template(template),
            dialog: null,

            /**
             * {@inheritdoc}
             */
            initialize: function (config) {
                this.config = config.config;

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                this.$el.html(this.template({
                    title: __(this.config.title),
                    iconName: this.config.iconName,
                    url: Routing.generate(this.config.url)
                }));

                this.dialog = new DialogForm('#create-button-extension');

                return this;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 449 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/common/index/grid.js ***!
  \***********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Generic grid renderer
 *
 * @author    Alban Alnot <alban.alnot@consertotech.pro>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/common/grid */ 165),
        __webpack_require__(/*! pim/user-context */ 5)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        BaseForm,
        Grid,
        UserContext
    ) {
        return BaseForm.extend({
            grid: null,

            /**
             * {@inheritdoc}
             */
            initialize: function (config) {
                this.config = config.config;

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            configure: function () {
                var metaData = this.config.metadata || {};
                metaData[this.config.localeKey || 'localeCode'] = UserContext.get('catalogLocale');

                this.grid = new Grid(this.config.alias, metaData);

                BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                this.$el.empty().append(this.grid.render().$el);

                return this;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 450 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/common/index/index.js ***!
  \************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Index extension for any basic screen with grid
 *
 * @author    Alban Alnot <alban.alnot@consertotech.pro>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/form/index/index */ 254)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        __,
        BaseForm,
        template
    ) {
        return BaseForm.extend({
            template: _.template(template),

            /**
             * {@inheritdoc}
             */
            initialize: function (config) {
                this.config = config.config;

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                this.$el.html(this.template({
                    title: __(this.config.title)
                }));

                this.renderExtensions();

                return this;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 451 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/common/meta/created.js ***!
  \*************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__; 
/**
 * Created at extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/form/meta/created */ 255)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, __, BaseForm, formTemplate) {
        return BaseForm.extend({
            tagName: 'span',
            className: 'AknTitleContainer-metaItem',
            template: _.template(formTemplate),

            /**
             * {@inheritdoc}
             */
            initialize: function (meta) {
                this.config = meta.config;

                this.label   = __(this.config.label);
                this.labelBy = __(this.config.labelBy);

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                var product = this.getFormData();
                var html = '';

                if (product.meta.created) {
                    html = this.template({
                        label: this.label,
                        labelBy: this.labelBy,
                        loggedAt: _.result(product.meta.created, 'logged_at', null),
                        author: _.result(product.meta.created, 'author', null)
                    });
                }

                this.$el.html(html);

                return this;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 452 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/common/meta/status.js ***!
  \************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Updated at extension
 *
 * @author    Alban Alnot <alban.alnot@consertotech.pro>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! pim/template/form/meta/status */ 256),
        __webpack_require__(/*! pim/common/property */ 151)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, __, BaseForm, mediator, formTemplate, propertyAccessor) {
        return BaseForm.extend({
            tagName: 'span',
            className: 'AknTitleContainer-metaItem',
            template: _.template(formTemplate),

            /**
             * {@inheritdoc}
             */
            initialize: function (meta) {
                this.config = meta.config;
                this.label   = __(this.config.label);
                this.value   = __(this.config.value);

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            configure: function () {
                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:post_update', this.render);

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                var status = this.getFormData();
                var value = this.config.valuePath ?
                    propertyAccessor.accessProperty(status, this.config.valuePath) : '';

                this.$el.html(this.template({
                    label: this.label,
                    value: value
                }));

                return this;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 453 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/common/meta/updated.js ***!
  \*************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Updated at extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! pim/template/form/meta/updated */ 257)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, __, BaseForm, mediator, formTemplate) {
        return BaseForm.extend({
            tagName: 'span',
            className: 'AknTitleContainer-metaItem',
            template: _.template(formTemplate),

            /**
             * {@inheritdoc}
             */
            initialize: function (meta) {
                this.config = meta.config;

                this.label   = __(this.config.label);
                this.labelBy = __(this.config.labelBy);

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            configure: function () {
                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:post_update', this.render);

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                var product = this.getFormData();
                var html = '';

                if (product.meta.updated) {
                    html = this.template({
                        label: this.label,
                        labelBy: this.labelBy,
                        loggedAt: _.result(product.meta.updated, 'logged_at', null),
                        author: _.result(product.meta.updated, 'author', null)
                    });
                }

                this.$el.html(html);

                return this;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 454 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/common/properties/general.js ***!
  \*******************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Module used to display the generals properties of an entity type
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/template/form/properties/general */ 258),
        __webpack_require__(/*! jquery.select2 */ 29)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        __,
        BaseForm,
        FetcherRegistry,
        template
    ) {
        return BaseForm.extend({
            className: 'tabsection',
            template: _.template(template),

            /**
             * {@inheritdoc}
             */
            render: function () {
                var config = this.options.config;

                this.$el.html(this.template({
                    model: this.getFormData(),
                    sectionTitle: __(config.sectionTitle),
                    codeLabel: __(config.codeLabel),
                    formRequired: __(config.formRequired),
                    inputField: config.inputField
                }));

                this.$el.find('select.select2').select2({});

                this.renderExtensions();
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 455 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/common/save-buttons.js ***!
  \*************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Save buttons extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/form/save-buttons */ 261)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, Backbone, mediator, BaseForm, template) {
        return BaseForm.extend({
            className: 'AknTitleContainer-rightButton',
            template: _.template(template),
            buttonDefaults: {
                priority: 100,
                events: {}
            },
            events: {},

            /**
             * {@inheritdoc}
             */
            initialize: function () {
                this.model = new Backbone.Model({
                    buttons: []
                });

                this.on('save-buttons:add-button', this.addButton.bind(this));

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                var buttons = this.model.get('buttons');
                this.$el.html(this.template({
                    primaryButton: _.first(buttons),
                    secondaryButtons: buttons.slice(1)
                }));
                this.delegateEvents();

                return this;
            },

            /**
             * Add a button to the main button
             *
             * @param {Object} options
             */
            addButton: function (options) {
                var button = _.extend({}, this.buttonDefaults, options);
                this.events = _.extend(this.events, button.events);
                var buttons = this.model.get('buttons');

                buttons.push(button);
                buttons = _.sortBy(buttons, 'priority').reverse();
                this.model.set('buttons', buttons);
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 456 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/common/save-form.js ***!
  \**********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Save extension for simple entity types
 *
 * @author    Tamara Robichet <tamara.robichet@akeneo.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form/common/save */ 159),
        __webpack_require__(/*! oro/messenger */ 16),
        __webpack_require__(/*! pim/saver/entity-saver */ 357),
        __webpack_require__(/*! pim/field-manager */ 150),
        __webpack_require__(/*! pim/i18n */ 17),
        __webpack_require__(/*! pim/user-context */ 5)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        __,
        BaseSave,
        messenger,
        EntitySaver,
        FieldManager,
        i18n,
        UserContext
    ) {
        return BaseSave.extend({

            /**
             * Sets message labels for updates
             */
            configure: function () {
                this.updateSuccessMessage = __(this.config.updateSuccessMessage);
                this.updateFailureMessage = __(this.config.updateFailureMessage);
                this.notReadyMessage = __(this.config.notReadyMessage);

                return BaseSave.prototype.configure.apply(this, arguments);
            },

            /**
             * Given an array of fields, return the translation for each in a map
             *
             * @param  {Array} fields         An array of field objects
             * @param  {String} catalogLocale The locale
             * @return {Array}                An array of labels
             */
            getFieldLabels: function (fields, catalogLocale) {
                return _.map(fields, function (field) {
                    return i18n.getLabel(
                        field.attribute.label,
                        catalogLocale,
                        field.attribute.code
                    );
                });
            },

            /**
             * Shows an error message for the given message text and labels
             *
             * @param  {String} message The given error message
             * @param  {Array} labels   An array of field names
             */
            showFlashMessage: function (message, labels) {
                var flash = __(message, { 'fields': labels.join(', ') });
                messenger.notificationFlashMessage('error', flash);
            },

            /**
             * {@inheritdoc}
             */
            save: function () {
                var entity = $.extend(true, {}, this.getFormData());
                delete entity.meta;

                var notReadyFields = FieldManager.getNotReadyFields();

                if (0 < notReadyFields.length) {
                    var catalogLocale = UserContext.get('catalogLocale');
                    var fieldLabels = this.getFieldLabels(notReadyFields, catalogLocale);

                    return this.showFlashMessage(this.notReadyMessage, fieldLabels);
                }

                this.showLoadingMask();
                this.getRoot().trigger('pim_enrich:form:entity:pre_save');

                return EntitySaver
                    .setUrl(this.config.url)
                    .save(entity.code, entity)
                    .then(function (data) {
                        this.postSave();
                        this.setData(data);
                        this.getRoot().trigger('pim_enrich:form:entity:post_fetch', data);
                    }.bind(this))
                    .fail(this.fail.bind(this))
                    .always(this.hideLoadingMask.bind(this));
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 457 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/common/state.js ***!
  \******************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * State manager extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! pim/dialog */ 14),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/form/state */ 262)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        __,
        Backbone,
        Dialog,
        BaseForm,
        template
    ) {
        return BaseForm.extend({
            className: 'updated-status',
            template: _.template(template),
            state: null,
            linkSelector: 'a[href^="/"]:not(".no-hash")',

            /**
             * {@inheritdoc}
             */
            initialize: function (meta) {
                this.config = _.extend({}, {
                    confirmationMessage: 'pim_enrich.confirmation.discard_changes',
                    confirmationTitle: 'pim_enrich.confirmation.leave',
                    message: 'pim_enrich.info.entity.updated'
                }, meta.config);

                this.confirmationMessage = __(this.config.confirmationMessage, {entity: __(this.config.entity)});
                this.confirmationTitle   = __(this.config.confirmationTitle);
                this.message             = __(this.config.message);

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * @inheritdoc
             */
            configure: function () {
                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:update_state', this.render);
                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:post_update', this.render);
                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:post_fetch', this.collectAndRender);
                this.listenTo(this.getRoot(), 'pim_enrich:form:state:confirm', this.onConfirmation);
                this.listenTo(this.getRoot(), 'pim_enrich:form:can-leave', this.linkClicked);
                $(window).on('beforeunload', this.beforeUnload.bind(this));

                Backbone.Router.prototype.on('route', this.unbindEvents);

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * Detach event listeners
             */
            unbindEvents: function () {
                $(window).off('beforeunload', this.beforeUnload);
            },

            /**
             * @inheritdoc
             */
            render: function () {
                if (null === this.state || undefined === this.state) {
                    this.collectState();
                }

                this.$el.html(
                    this.template({
                        message: this.message
                    })
                ).css('opacity', this.hasModelChanged() ? 1 : 0);

                return this;
            },

            /**
             * Store a stringified representation of the form model for further comparisons
             */
            collectState: function () {
                this.state = JSON.stringify(this.getFormData());
            },

            /**
             * Force collect state and re-render
             */
            collectAndRender: function () {
                this.collectState();
                this.render();
            },

            /**
             * Callback triggered on beforeunload event
             */
            beforeUnload: function () {
                if (this.hasModelChanged()) {
                    return this.confirmationMessage;
                }
            },

            /**
             * Callback triggered on any link click event to ask confirmation if there are unsaved changes
             *
             * @param {Object} event
             *
             * @return {boolean}
             */
            linkClicked: function (event) {
                if (this.hasModelChanged()) {
                    event.canLeave = confirm(this.confirmationMessage);
                }
            },

            /**
             * Check if current form model has changed compared to the stored model state
             *
             * @return {boolean}
             */
            hasModelChanged: function () {
                return this.state !== JSON.stringify(this.getFormData());
            },

            /**
             * Display a dialog modal to ask an action confirmation if model has changed
             *
             * @param {string} message
             * @param {string} title
             * @param {function} action
             */
            confirmAction: function (message, title, action) {
                if (this.hasModelChanged()) {
                    Dialog.confirm(message, title, action);
                } else {
                    action();
                }
            },

            /**
             * Callback that can be triggered from anywhere to ask an action confirmation
             *
             * @param {Object} event
             */
            onConfirmation: function (event) {
                this.confirmAction(
                    event.message || this.confirmationMessage,
                    event.title || this.confirmationTitle,
                    event.action
                );
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 458 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/common/tab/history.js ***!
  \************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/common/grid */ 165),
        __webpack_require__(/*! oro/translator */ 3)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        BaseForm,
        Grid,
        __
    ) {
        return BaseForm.extend({
            className: 'AknTabContainer-content tabbable tabs-left history',
            historyGrid: null,

            /**
             * @param {Object} meta
             */
            initialize: function (meta) {
                this.config = _.extend({}, meta.config);
                this.config.modelDependent = false;
            },

            /**
             * {@inheritdoc}
             */
            configure: function () {
                this.trigger('tab:register', {
                    code: this.config.tabCode ? this.config.tabCode : this.code,
                    label: __(this.config.title)
                });

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                if (!this.historyGrid) {
                    this.historyGrid = new Grid(
                        'history-grid',
                        {
                            object_class: this.config.class,
                            object_id: this.getFormData().meta.id
                        }
                    );
                }

                this.$el.empty().append(this.historyGrid.render().$el);

                return this;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 459 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/common/tab/properties.js ***!
  \***************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Module used to display a simple properties tab
 *
 * @author    Nicolas Dupont <nicolas@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/template/form/tab/properties */ 267),
        __webpack_require__(/*! jquery.select2 */ 29)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        __,
        BaseForm,
        FetcherRegistry,
        template
    ) {
        return BaseForm.extend({
            className: 'AknTabContainer-content properties',
            template: _.template(template),

            /**
             * {@inheritdoc}
             */
            initialize: function (config) {
                this.config = config.config;

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            configure: function () {
                this.trigger('tab:register', {
                    code: this.code,
                    label: __(this.config.label)
                });

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                this.$el.html(this.template({}));

                this.renderExtensions();
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 460 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/form/form-modal.js ***!
  \****************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * This service instantiates a modal with a custom form.
 * The custom form must be passed in as a service.
 *
 * A deferred object is returned on modal opening:
 * - Success: Resolved when the user clicks on the OK button, the callback contains the form data.
 * - Fail: the user canceled the modal form.
 *
 * Typical use example
 * ===================
 *
 * var onDataSubmission = function (form) {
 *     var deferred = $.Deferred();
 *     var formData = form.getFormData();
 *
 *     // validate your data...
 *
 *     if (validData) {
 *          deferred.resolve();
 *     } else {
 *          deferred.reject();
 *          // display errors on form, or whatever
 *     }
 *
 *     return deferred;
 * }
 *
 * var myFormModal = new FormModal('pim-product-edit-form', onDataSubmission);
 *
 * myFormModal.open()
 *      .then(function(myFormData) {
 *          // on success
 *      })
 *      .fail(function() {
 *          // user clicked Cancel button
 *      });
 *
 * @author    Adrien Pétremann <adrien.petremann@akeneo.com>
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! pim/form-builder */ 7)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        Backbone,
        mediator,
        FormBuilder
    ) {
        return Backbone.View.extend({
            /**
             * The form name the modal should display.
             * This service must be registered with RequireJS, eg: 'pim-product-edit-form'
             */
            formName: '',

            /**
             * Instance of the UI modal element.
             */
            modal: null,

            /**
             * Callback triggered on form submission.
             * This callback should return a promise, resolved when data validation check is OK.
             */
            submitCallback: null,

            /**
             * UI modal parameters
             */
            modalParameters: {
                allowCancel: true,
                okCloses:    false,
                content:     '',
                title:       '[modal_title]',
                okText:      '[ok]',
                cancelText:  '[cancel]',
                modalOptions: {
                    backdrop: 'static',
                    keyboard: false
                }
            },

            /**
             * @param {string}   formName
             * @param {function} submitCallback
             * @param {Object}   modalParameters
             */
            initialize: function (formName, submitCallback, modalParameters) {
                this.formName        = formName;
                this.submitCallback  = submitCallback;
                this.modalParameters = _.extend(this.modalParameters, modalParameters);
            },

            /**
             * Render the modal with the custom form service.
             * Returns the deferred object to catch success (OK) & fail (Cancel) event of the modal.
             *
             * @return {Promise}
             */
            open: function () {
                var deferred = $.Deferred();

                FormBuilder
                    .build(this.formName)
                    .then(function (form) {
                        this.modal = new Backbone.BootstrapModal(this.modalParameters);
                        this.modal.open();

                        form.setElement(this.modal.$('.modal-body')).render();

                        mediator.on('pim_enrich:form:modal:ok_button:disable', function () {
                            this.disableOkBtn();
                        }.bind(this));

                        mediator.on('pim_enrich:form:modal:ok_button:enable', function () {
                            this.enableOkBtn();
                        }.bind(this));

                        this.modal.on('cancel', deferred.reject);
                        this.modal.on('ok', function () {
                            if (this.modal.$('.modal-footer .ok').hasClass('disabled')) {
                                return;
                            }
                            this.submitCallback(form).then(function () {
                                var data = form.getFormData();
                                deferred.resolve(data);

                                this.modal.close();
                            }.bind(this));
                        }.bind(this));
                    }.bind(this));

                return deferred;
            },

            /**
             * Close the modal UI element.
             */
            close: function () {
                this.modal.close();
            },

            /**
             * Enable the modal ok button.
             */
            enableOkBtn: function () {
                this.modal.$('.modal-footer .ok').removeClass('disabled');
            },

            /**
             * Disable the modal ok button.
             */
            disableOkBtn: function () {
                this.modal.$('.modal-footer .ok').addClass('disabled');
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 461 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/grid/view-selector-create-view.js ***!
  \*******************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Create extension for the Datagrid View Selector.
 * It displays a button near the selector to allow the user to create a new view.
 *
 * @author    Adrien Pétremann <adrien.petremann@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/grid/view-selector/create-view */ 270),
        __webpack_require__(/*! pim/template/grid/view-selector/create-view-label-input */ 269),
        __webpack_require__(/*! pim/datagrid/state */ 44),
        __webpack_require__(/*! pim/saver/datagrid-view */ 175),
        __webpack_require__(/*! oro/messenger */ 16)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        __,
        Backbone,
        BaseForm,
        template,
        templateInput,
        DatagridState,
        DatagridViewSaver,
        messenger
    ) {
        return BaseForm.extend({
            template: _.template(template),
            templateInput: _.template(templateInput),
            tagName: 'span',
            className: 'create-button',
            events: {
                'click .create': 'promptCreateView'
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                if ('view' !== this.getRoot().currentViewType) {
                    this.$el.html('');

                    return this;
                }

                this.$el.html(this.template({
                    label: __('grid.view_selector.create_view')
                }));

                this.$('[data-toggle="tooltip"]').tooltip();

                return this;
            },

            /**
             * Prompt the view creation modal.
             */
            promptCreateView: function () {
                this.getRoot().trigger('grid:view-selector:close-selector');

                var modal = new Backbone.BootstrapModal({
                    title: __('grid.view_selector.choose_label'),
                    content: this.templateInput({placeholder: __('grid.view_selector.placeholder')}),
                    okText: __('pim_datagrid.view_selector.create_view_modal.confirm'),
                    cancelText: __('pim_datagrid.view_selector.create_view_modal.cancel')
                });
                modal.open();

                var $submitButton = modal.$el.find('.ok').hide();

                modal.on('ok', this.saveView.bind(this, modal));
                modal.on('cancel', function () {
                    modal.remove();
                }.bind(this));
                modal.$('input[name="new-view-label"]').on('input', function (event) {
                    var label = event.target.value;

                    if (!label.length) {
                        $submitButton.hide();
                    } else {
                        $submitButton.show();
                    }
                });
                modal.$('input[name="new-view-label"]').on('keypress', function (event) {
                    if (13 === (event.keyCode || event.which) && event.target.value.length) {
                        $submitButton.trigger('click');
                    }
                });
            },

            /**
             * Save the current Datagrid view in database and triggers an event to the parent
             * to select it.
             *
             * @param {object} modal
             */
            saveView: function (modal) {
                var gridState = DatagridState.get(this.getRoot().gridAlias, ['filters', 'columns']);
                var newView = {
                    filters: gridState.filters,
                    columns: gridState.columns,
                    label: modal.$('input[name="new-view-label"]').val()
                };

                DatagridViewSaver.save(newView, this.getRoot().gridAlias)
                    .done(function (response) {
                        this.getRoot().trigger('grid:view-selector:view-created', response.id);
                    }.bind(this))
                    .fail(function (response) {
                        _.each(response.responseJSON, function (error) {
                            messenger.notificationFlashMessage('error', error);
                        });
                    });
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 462 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/grid/view-selector-current.js ***!
  \***************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Module to display the current view in the Datagrid View Selector.
 * This module accepts extensions to display more info beside the view.
 *
 * @author    Adrien Petremann <adrien.petremann@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/grid/view-selector/current */ 271)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        Backbone,
        BaseForm,
        template
    ) {
        return BaseForm.extend({
            template: _.template(template),
            datagridView: null,
            dirtyColumns: false,
            dirtyFilters: false,

            /**
             * {@inheritdoc}
             */
            configure: function () {
                this.listenTo(
                    this.getRoot(),
                    'grid:view-selector:state-changed',
                    this.onDatagridStateChange.bind(this)
                );

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                this.$el.html(this.template({
                    view: this.datagridView,
                    dirtyFilters: this.dirtyFilters,
                    dirtyColumns: this.dirtyColumns
                }));

                this.renderExtensions();

                return this;
            },

            /**
             * Method called on datagrid state change (when columns or filters are modified).
             * Set the state to dirty if it's the case then re-render this extension.
             *
             * @param {Object} datagridState
             */
            onDatagridStateChange: function (datagridState) {
                if (null === datagridState.columns) {
                    datagridState.columns = '';
                }

                var initialView = this.getRoot().initialView;
                var initialViewExists = null !== initialView && 0 !== initialView.id;

                var filtersModified = this.areFiltersModified(initialView.filters, datagridState.filters);
                var columnsModified = !_.isEqual(initialView.columns, datagridState.columns.split(','));

                if (initialViewExists) {
                    this.dirtyFilters = filtersModified;
                    this.dirtyColumns = columnsModified;
                } else {
                    var isDefaultFilters = ('' === datagridState.filters);
                    var isDefaultColumns = _.isEqual(this.getRoot().defaultColumns, datagridState.columns.split(','));

                    this.dirtyFilters = !isDefaultFilters;
                    this.dirtyColumns = !isDefaultColumns;
                }

                this.render();
            },

            /**
             * Set the view of this module.
             *
             * @param {Object} view
             */
            setView: function (view) {
                this.datagridView = view;
            },

            /**
             * Check if current datagrid state filters are modified regarding the initial view
             *
             * @param {Object} initialViewFilters
             * @param {Object} datagridStateFilters
             *
             * @return {boolean}
             */
            areFiltersModified: function (initialViewFilters, datagridStateFilters) {
                return initialViewFilters !== datagridStateFilters;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 463 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/grid/view-selector-line.js ***!
  \************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Module to display a line in the Select2 dropdown of the Datagrid View Selector.
 * This module accepts extensions to display more info beside the view.
 *
 * @author    Adrien Petremann <adrien.petremann@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/grid/view-selector/line */ 272)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        Backbone,
        BaseForm,
        template
    ) {
        return BaseForm.extend({
            template: _.template(template),
            datagridView: null,
            datagridViewType: null,
            currentViewId: null,

            /**
             * {@inheritdoc}
             */
            render: function () {
                this.$el.html(this.template({
                    view: this.datagridView,
                    isCurrent: (this.currentViewId === this.datagridView.id)
                }));

                this.renderExtensions();

                return this;
            },

            /**
             * Set the view of this module.
             *
             * @param {Object}  view
             * @param {String}  viewType
             * @param {int}     currentViewId
             */
            setView: function (view, viewType, currentViewId) {
                this.datagridView = view;
                this.datagridViewType = viewType;
                this.currentViewId = currentViewId;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 464 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/grid/view-selector-remove-view.js ***!
  \*******************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Remove extension for the Datagrid View Selector.
 * It displays a button near the selector to allow the user to remove the current view.
 *
 * @author    Adrien Pétremann <adrien.petremann@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/grid/view-selector/remove-view */ 273),
        __webpack_require__(/*! pim/dialog */ 14),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! pim/remover/datagrid-view */ 324),
        __webpack_require__(/*! oro/messenger */ 16)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        __,
        BaseForm,
        template,
        Dialog,
        UserContext,
        DatagridViewRemover,
        messenger
    ) {
        return BaseForm.extend({
            template: _.template(template),
            tagName: 'span',
            className: 'remove-button',
            events: {
                'click .remove': 'promptDeletion'
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                if ('view' !== this.getRoot().currentViewType ||
                    this.getRoot().currentView.id === 0 ||
                    UserContext.get('meta').id !== this.getRoot().currentView.owner_id
                ) {
                    this.$el.html('');

                    return this;
                }

                this.$el.html(this.template({
                    label: __('grid.view_selector.remove')
                }));

                this.$('[data-toggle="tooltip"]').tooltip();

                return this;
            },

            /**
             * Prompt the datagrid view deletion modal.
             */
            promptDeletion: function (event) {
                event.stopPropagation();

                Dialog.confirm(
                    __('grid.view_selector.confirmation.remove'),
                    __('grid.view_selector.confirmation.delete'),
                    function () {
                        this.removeView(this.getRoot().currentView);
                    }.bind(this)
                );
            },

            /**
             * Remove the current Datagrid View and triggers an event to the parent.
             *
             * @param {Object} view
             */
            removeView: function (view) {
                DatagridViewRemover.remove(view)
                    .done(function () {
                        this.getRoot().trigger('grid:view-selector:view-removed');
                    }.bind(this))
                    .fail(function (response) {
                        messenger.notificationFlashMessage('error', response.responseJSON);
                    });
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 465 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/grid/view-selector-save-view.js ***!
  \*****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Save extension for the Datagrid View Selector.
 * It displays a button near the selector to allow the user to save the current changes
 * to the current view.
 *
 * @author    Adrien Pétremann <adrien.petremann@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/grid/view-selector/save-view */ 274),
        __webpack_require__(/*! pim/datagrid/state */ 44),
        __webpack_require__(/*! pim/dialog */ 14),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! pim/saver/datagrid-view */ 175),
        __webpack_require__(/*! oro/messenger */ 16)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        __,
        BaseForm,
        template,
        DatagridState,
        Dialog,
        Routing,
        UserContext,
        DatagridViewSaver,
        messenger
    ) {
        return BaseForm.extend({
            template: _.template(template),
            tagName: 'span',
            className: 'save-button',
            events: {
                'click .save': 'saveView'
            },

            /**
             * {@inheritdoc}
             */
            configure: function () {
                this.listenTo(this.getRoot(), 'grid:view-selector:state-changed', this.onDatagridStateChange);

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                if ('view' !== this.getRoot().currentViewType ||
                    UserContext.get('meta').id !== this.getRoot().currentView.owner_id
                ) {
                    this.$el.html('');

                    return;
                }

                this.$el.html(this.template({
                    dirty: this.dirty,
                    label: __('grid.view_selector.save_changes')
                }));

                this.$('[data-toggle="tooltip"]').tooltip();
            },

            /**
             * Method called on datagrid state change (when columns or filters are modified)
             *
             * @param {Object} datagridState
             */
            onDatagridStateChange: function (datagridState) {
                var initialView = this.getRoot().initialView;
                var initialViewExists = null !== initialView && 0 !== initialView.id;

                if (initialViewExists) {
                    var filtersModified = initialView.filters !== datagridState.filters;
                    var columnsModified = !_.isEqual(initialView.columns, datagridState.columns.split(','));

                    this.dirty = filtersModified || columnsModified;
                    this.render();
                }
            },

            /**
             * Save the current Datagrid view in database and triggers an event to the parent
             * to select it.
             */
            saveView: function () {
                var gridState = DatagridState.get(this.getRoot().gridAlias, ['filters', 'columns']);

                var currentView = $.extend(true, {}, this.getRoot().currentView);
                currentView.filters = gridState.filters;
                currentView.columns = gridState.columns;

                DatagridViewSaver.save(currentView, this.getRoot().gridAlias)
                    .done(function (response) {
                        this.getRoot().trigger('grid:view-selector:view-saved', response.id);
                    }.bind(this))
                    .fail(function (response) {
                        _.each(response.responseJSON, function (error) {
                            messenger.notificationFlashMessage('error', error);
                        });
                    });
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 466 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/grid/view-selector.js ***!
  \*******************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Main module for the Datagrid View Selector.
 * Mainly composed by a Select2 component with several extension points.
 *
 * Allow the user to search & select a Grid View in a list.
 *
 * @author    Adrien Pétremann <adrien.petremann@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/grid/view-selector */ 275),
        __webpack_require__(/*! pim/initselect2 */ 30),
        __webpack_require__(/*! pim/datagrid/state */ 44),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/form-builder */ 7),
        __webpack_require__(/*! module-config */ 21)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        __,
        Backbone,
        BaseForm,
        template,
        initSelect2,
        DatagridState,
        FetcherRegistry,
        FormBuilder,
        module
    ) {
        return BaseForm.extend({
            template: _.template(template),
            resultsPerPage: 20,
            queryTimer: null,
            config: {},
            currentViewType: null,
            currentView: null,
            initialView: null,
            defaultColumns: [],
            defaultUserView: null,
            gridAlias: null,
            select2Instance: null,
            viewTypeSwitcher: null,
            currentLoadingPage: null,
            currentLoadingTerm: null,

            events: {
                'click .view-type-item': 'switchViewType'
            },

            /**
             * {@inheritdoc}
             */
            initialize: function (meta) {
                this.config = meta.config;

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            configure: function (gridAlias) {
                this.gridAlias = gridAlias;

                if (_.has(module.config(), 'forwarded-events')) {
                    this.forwardMediatorEvents(module.config()['forwarded-events']);
                }

                this.listenTo(this.getRoot(), 'grid:view-selector:view-created', this.onViewCreated.bind(this));
                this.listenTo(this.getRoot(), 'grid:view-selector:view-saved', this.onViewSaved.bind(this));
                this.listenTo(this.getRoot(), 'grid:view-selector:view-removed', this.onViewRemoved.bind(this));
                this.listenTo(this.getRoot(), 'grid:view-selector:close-selector', this.closeSelect2.bind(this));
                this.listenTo(this.getRoot(), 'grid:product-grid:state_changed', this.onGridStateChange.bind(this));

                Backbone.Router.prototype.on('route', this.unbindEvents.bind(this));

                return FetcherRegistry.getFetcher('datagrid-view')
                    .defaultColumns(this.gridAlias)
                    .then(function (columns) {
                        this.defaultColumns = columns;

                        return BaseForm.prototype.configure.apply(this, arguments);
                    }.bind(this));
            },

            /**
             * Detach event listeners
             */
            unbindEvents: function () {
                this.off();
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                this.initializeSelection().then(function () {
                    this.initializeViewTypes();

                    this.$el.html(this.template({
                        __: __,
                        currentViewType: this.currentViewType,
                        viewTypes: this.config.viewTypes,
                        displayViewSwitcher: this.config.viewTypes.length > 1
                    }));

                    this.initializeSelectWidget();
                    this.renderExtensions();
                }.bind(this));
            },

            /**
             * Initialize the view type to display at initialization.
             */
            initializeViewTypes: function () {
                this.currentViewType = 'view';
            },

            /**
             * Initialize the Select2 component and format elements.
             */
            initializeSelectWidget: function () {
                var $select = this.$('input[type="hidden"]');

                var options = {
                    dropdownCssClass: 'select2--bigDrop grid-view-selector',
                    closeOnSelect: false,

                    /**
                     * Format result (datagrid view list) method of select2.
                     * This way we can display views and their infos beside them.
                     */
                    formatResult: function (item, $container) {
                        FormBuilder.build('pim-grid-view-selector-line').then(function (form) {
                            form.setParent(this);
                            form.setView(item, this.currentViewType, this.currentView.id);
                            $container.append(form.render().$el);
                        }.bind(this));
                    }.bind(this),

                    /**
                     * Format current selection method of select2.
                     */
                    formatSelection: function (item, $container) {
                        FormBuilder.buildForm('pim-grid-view-selector-current').then(function (form) {
                            form.setParent(this);
                            form.setView(item);

                            return form.configure().then(function () {
                                $container.append(form.render().$el);
                                this.onGridStateChange();
                            }.bind(this));
                        }.bind(this));
                    }.bind(this),

                    query: function (options) {
                        clearTimeout(this.queryTimer);
                        this.queryTimer = setTimeout(function () {

                            var page = 1;
                            if (options.context && options.context.page) {
                                page = options.context.page;
                            }

                            var searchParameters = this.getSelectSearchParameters(options.term, page);
                            var fetcher = this.config.fetchers[this.currentViewType];

                            if (this.currentLoadingPage === page && this.currentLoadingTerm === options.term) {
                                return;
                            }

                            this.currentLoadingPage = page;
                            this.currentLoadingTerm = options.term;

                            FetcherRegistry.getFetcher(fetcher).search(searchParameters).then(function (views) {
                                var choices = this.toSelect2Format(views);

                                if (page === 1 && !options.term) {
                                    choices = this.ensureDefaultView(choices);
                                }

                                options.callback({
                                    results: choices,
                                    more: choices.length === this.getResultsPerPage(),
                                    context: {
                                        page: page + 1
                                    }
                                });
                            }.bind(this));
                        }.bind(this), 400);
                    }.bind(this),

                    /**
                     * Initialize the select2 with current selected view. If no current view is selected,
                     * we select the user's one. If he doesn't have one, we create a default one for him!
                     */
                    initSelection: function (element, callback) {
                        callback(this.currentView);
                    }.bind(this)
                };

                this.select2Instance = initSelect2.init($select, options);
                this.select2Instance.on('select2-selecting', function (event) {
                    var view = event.object;
                    this.selectView(view);
                }.bind(this));

                this.select2Instance.on('select2-close', function () {
                    this.currentLoadingPage = null;
                    this.currentLoadingTerm = null;
                }.bind(this));

                var $search = this.$('.select2-search');
                $search.prepend($('<i class="icon-search"></i>'));
            },

            /**
             * Method called on view type switching.
             *
             * @param {Event} event
             */
            switchViewType: function (event) {
                this.currentViewType = $(event.target).data('value');

                this.render();
            },

            /**
             * Initialize the Select2 selection based on the DatagridState.
             * Could be the User default one, or an existing view edited or whatever.
             *
             * @return {Promise}
             */
            initializeSelection: function () {
                var activeViewId = DatagridState.get(this.gridAlias, 'view');
                var isDefaultView = ('0' === activeViewId);
                var deferred = $.Deferred();

                this.getUserDefaultView().then(function (userDefaultView) {
                    if (userDefaultView && (!activeViewId || isDefaultView)) {
                        // User is on default view but has a custom default one
                        userDefaultView.text = userDefaultView.label;
                        deferred.resolve(userDefaultView);
                    } else if (activeViewId && !isDefaultView) {
                        // User is on an existing view
                        FetcherRegistry.getFetcher('datagrid-view')
                            .fetch(activeViewId, {alias: this.gridAlias, cached: false})
                            .then(this.postFetchDatagridView.bind(this))
                            .then(function (view) {
                                deferred.resolve(view);
                            })
                            .fail(function () {
                                this.selectView(userDefaultView ? userDefaultView : this.getDefaultView());
                            }.bind(this));
                    } else {
                        // Other, set the default view
                        deferred.resolve(this.getDefaultView());
                    }
                }.bind(this));

                deferred.then(function (initView) {
                    var datagridState = DatagridState.get(this.gridAlias, ['filters', 'columns']);

                    this.initialView = $.extend(true, {}, initView);
                    this.currentView = $.extend(true, {}, initView);

                    if (0 !== this.initialView.id && datagridState.columns !== null) {
                        this.currentView.filters = datagridState.filters;
                        this.currentView.columns = datagridState.columns.split(',');
                    }

                    this.getRoot().trigger('grid:view-selector:initialized', this.currentView);

                    return initView;
                }.bind(this));

                return deferred;
            },

            /**
             * Method called right after fetching the view from the backend.
             * This is where we can handle the view before it goes to select2.
             *
             * @param {Object} view
             *
             * @return {Promise}
             */
            postFetchDatagridView: function (view) {
                view.text = view.label;

                return $.Deferred().resolve(view).promise();
            },

            /**
             * Return the default view object which contains default columns & no filter.
             *
             * @return {Object}
             */
            getDefaultView: function () {
                return {
                    id: 0,
                    text: __('grid.view_selector.default_view'),
                    columns: this.defaultColumns,
                    type: 'view',
                    filters: ''
                };
            },

            /**
             * Return the default user view object.
             *
             * @return {Object}
             */
            getUserDefaultView: function () {
                return FetcherRegistry.getFetcher('datagrid-view')
                    .defaultUserView(this.gridAlias)
                    .then(function (defaultUserView) {
                        this.defaultUserView = defaultUserView.view;

                        return defaultUserView.view;
                    }.bind(this));
            },

            /**
             * Ensure given choices contain a default view if user doesn't have one.
             *
             * @param {array} choices
             *
             * @return {array}
             */
            ensureDefaultView: function (choices) {
                if (null !== this.defaultUserView || 'view' !== this.currentViewType) {
                    return choices;
                }

                choices.push(this.getDefaultView());

                return choices;
            },

            /**
             * Method called when the grid state changes.
             * It allows this selector to react to new filters / columns etc..
             */
            onGridStateChange: function () {
                var datagridState = DatagridState.get(this.gridAlias, ['filters', 'columns']);
                if (null === datagridState.columns) {
                    datagridState.columns = '';
                }

                if (null !== this.currentView) {
                    this.currentView.filters = datagridState.filters;
                    this.currentView.columns = datagridState.columns.split(',');
                }

                this.getRoot().trigger('grid:view-selector:state-changed', datagridState);
            },

            /**
             * Method called when a new view has been created.
             * This method fetches the newly created view thanks to its id, then selects it.
             *
             * @param {int} viewId
             */
            onViewCreated: function (viewId) {
                FetcherRegistry.getFetcher('datagrid-view').clear();
                FetcherRegistry.getFetcher('datagrid-view')
                    .fetch(viewId, {alias: this.gridAlias})
                    .then(function (view) {
                        this.selectView(view);
                    }.bind(this));
            },

            /**
             * Method called when a view has been saved.
             * This method fetches the saved view thanks to its id, then selects it.
             *
             * @param {int} viewId
             */
            onViewSaved: function (viewId) {
                this.onViewCreated(viewId);
            },

            /**
             * Method called when a view is removed.
             * We reset all filters on the grid.
             */
            onViewRemoved: function () {
                FetcherRegistry.getFetcher('datagrid-view').clear();
                this.selectView(this.getDefaultView());
            },

            /**
             * Close the Select2 instance of this View Selector
             */
            closeSelect2: function () {
                if (null !== this.select2Instance) {
                    this.select2Instance.select2('close');
                }
            },

            /**
             * Method called when the user selects a view through this selector.
             *
             * @param {Object} view The selected view
             */
            selectView: function (view) {
                DatagridState.set(this.gridAlias, {
                    view: view.id,
                    filters: view.filters,
                    columns: view.columns.join(',')
                });

                this.currentView = view;
                this.trigger('grid:view-selector:view-selected', view);
                this.reloadPage();
            },

            /**
             * Get grid view fetcher search parameters by giving select2 search term & page
             *
             * @param {string} term
             * @param {int}    page
             *
             * @return {Object}
             */
            getSelectSearchParameters: function (term, page) {
                return $.extend(true, {}, this.config.searchParameters, {
                    search: term,
                    alias: this.gridAlias,
                    options: {
                        limit: this.getResultsPerPage(),
                        page: page
                    }
                });
            },

            /**
             * Take incoming data and format them to have all required parameters
             * to be used by the select2 module.
             *
             * @param {array} data
             *
             * @return {array}
             */
            toSelect2Format: function (data) {
                return _.map(data, function (view) {
                    view.text = view.label;

                    if (!_.has(view, 'id') && _.has(view, 'code')) {
                        view.id = view.code;
                    }

                    return view;
                });
            },

            /**
             * Reload the page.
             */
            reloadPage: function () {
                var url = window.location.hash;
                Backbone.history.fragment = new Date().getTime();
                Backbone.history.navigate(url, true);
            },

            getResultsPerPage: function () {
                return this.resultsPerPage;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 467 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/group-type/form/delete.js ***!
  \***********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Delete extension for group type
 *
 * @author    Tamara Robichet <tamara.robichet@akeneo.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! pim/form/common/delete */ 154), __webpack_require__(/*! pim/remover/group-type */ 351)], __WEBPACK_AMD_DEFINE_RESULT__ = function (DeleteForm, GroupTypeRemover) {
    return DeleteForm.extend({
        remover: GroupTypeRemover
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 468 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/group/form/delete.js ***!
  \******************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Delete extension for groups
 *
 * @author    Nicolas Dupont <nicolas@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! pim/form/common/delete */ 154), __webpack_require__(/*! pim/remover/group */ 350)], __WEBPACK_AMD_DEFINE_RESULT__ = function (DeleteForm, GroupRemover) {
    return DeleteForm.extend({
        remover: GroupRemover
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 469 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/group/form/meta/product-count.js ***!
  \******************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Group meta extension to display number of products this group contains
 *
 * @author    Nicolas Dupont <nicolas@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/group/meta/product-count */ 276)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, __, BaseForm, formTemplate) {
        return BaseForm.extend({
            tagName: 'span',
            template: _.template(formTemplate),

            /**
             * {@inheritdoc}
             */
            initialize: function (config) {
                this.config = config.config;

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            configure: function () {
                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:post_fetch', this.render);

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                var group = this.getFormData();
                var html = '';

                if (_.has(group, 'products')) {
                    html = this.template({
                        label: __(this.config.productCountLabel),
                        productCount: group.products.length
                    });
                }

                this.$el.html(html);

                return this;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 470 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/group/form/products.js ***!
  \********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Module used to display the product datagrid in a group
 *
 * @author    Nicolas Dupont <nicolas@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! pim/common/grid */ 165)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        __,
        BaseForm,
        FetcherRegistry,
        UserContext,
        Grid
    ) {
        return BaseForm.extend({
            className: 'AknTabContainer-content products',

            /**
             * {@inheritdoc}
             */
            initialize: function (config) {
                this.config = config.config;

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            configure: function () {
                this.trigger('tab:register', {
                    code: this.code,
                    label: __(this.config.label)
                });

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                if (!this.productGroupGrid) {
                    this.productGroupGrid = new Grid(
                        this.config.gridId,
                        {
                            locale: UserContext.get('catalogLocale'),
                            currentGroup: this.getFormData().meta.id,
                            id: this.getFormData().meta.id,
                            selection: this.getFormData().products
                        }
                    );

                    this.productGroupGrid.on('grid:selection:updated', function (selection) {
                        this.setData('products', selection);
                    }.bind(this));

                    this.getRoot().on('pim_enrich:form:entity:post_fetch', function () {
                        this.productGroupGrid.refresh();
                    }.bind(this));
                }

                this.$el.empty().append(this.productGroupGrid.render().$el);

                this.renderExtensions();
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 471 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/group/form/properties/general.js ***!
  \******************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Module used to display the generals properties of a group
 *
 * @author    Nicolas Dupont <nicolas@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/template/group/tab/properties/general */ 277),
        __webpack_require__(/*! jquery.select2 */ 29)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        __,
        BaseForm,
        FetcherRegistry,
        template
    ) {
        return BaseForm.extend({
            className: 'tabsection',
            template: _.template(template),

            /**
             * {@inheritdoc}
             */
            render: function () {
                this.$el.html(this.template({
                    model: this.getFormData(),
                    sectionTitle: __('pim_enrich.form.group.tab.properties.general'),
                    codeLabel: __('pim_enrich.form.group.tab.properties.code'),
                    typeLabel: __('pim_enrich.form.group.tab.properties.type'),
                    __: __
                }));

                this.$el.find('select.select2').select2({});

                this.renderExtensions();
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 472 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/group/form/save.js ***!
  \****************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Save extension for Group
 *
 * @author    Nicolas Dupont <nicolas@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form/common/save */ 159),
        __webpack_require__(/*! oro/messenger */ 16),
        __webpack_require__(/*! pim/saver/group */ 359),
        __webpack_require__(/*! pim/field-manager */ 150),
        __webpack_require__(/*! pim/i18n */ 17),
        __webpack_require__(/*! pim/user-context */ 5)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        __,
        BaseSave,
        messenger,
        GroupSaver,
        FieldManager,
        i18n,
        UserContext
    ) {
        return BaseSave.extend({
            updateSuccessMessage: __('pim_enrich.entity.group.info.update_successful'),
            updateFailureMessage: __('pim_enrich.entity.group.info.update_failed'),

            /**
             * {@inheritdoc}
             */
            save: function () {
                var group = $.extend(true, {}, this.getFormData());

                delete group.meta;

                var notReadyFields = FieldManager.getNotReadyFields();

                if (0 < notReadyFields.length) {
                    var fieldLabels = _.map(notReadyFields, function (field) {
                        return i18n.getLabel(
                            field.attribute.label,
                            UserContext.get('catalogLocale'),
                            field.attribute.code
                        );
                    });

                    messenger.notificationFlashMessage(
                        'error',
                        __('pim_enrich.entity.group.info.field_not_ready', {'fields': fieldLabels.join(', ')})
                    );

                    return;
                }

                this.showLoadingMask();
                this.getRoot().trigger('pim_enrich:form:entity:pre_save');

                return GroupSaver
                    .save(group.code, group)
                    .then(function (data) {
                        this.postSave();

                        this.setData(data);
                        this.getRoot().trigger('pim_enrich:form:entity:post_fetch', data);
                    }.bind(this))
                    .fail(this.fail.bind(this))
                    .always(this.hideLoadingMask.bind(this));
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 473 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/common/edit/content/data/help.js ***!
  \**********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Extension to add a help tooltip on filters.
 *
 * @author    Yohan Blain <yohan.blain@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)
 */


!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(/*! jquery */ 1),
    __webpack_require__(/*! underscore */ 0),
    __webpack_require__(/*! oro/translator */ 3),
    __webpack_require__(/*! pim/form */ 149),
    __webpack_require__(/*! pim/template/export/product/edit/content/data/help */ 215)

], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, __, BaseForm, template) {
    return BaseForm.extend({
        template: _.template(template),

        /**
         * {@inheritdoc}
         */
        configure: function () {
            this.listenTo(this.getRoot(), 'pim_enrich:form:filter:extension:add', this.addFilterExtension.bind(this));

            return BaseForm.prototype.configure.apply(this, arguments);
        },

        /**
         * Adds the extension to filters.
         * If the translation is not here the tooltip won't be displayed at all.
         *
         * @param {Object} event
         */
        addFilterExtension: function (event) {
            var key  = 'pim_enrich.export.product.filter.' + event.filter.shortname + '.help';
            var text = __(key);

            if (key === text) {
                return;
            }

            var $content = $(this.template({text: text}));

            $content.find('[data-toggle="tooltip"]').tooltip();

            event.filter.addElement(
                'after-input',
                'help',
                $content
            );
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 474 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/common/edit/field/decimal-separator.js ***!
  \****************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Decimal separator fetcher
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(/*! jquery */ 1),
    __webpack_require__(/*! underscore */ 0),
    __webpack_require__(/*! oro/translator */ 3),
    __webpack_require__(/*! pim/fetcher-registry */ 10),
    __webpack_require__(/*! pim/job/common/edit/field/select */ 183)
], __WEBPACK_AMD_DEFINE_RESULT__ = function (
    $,
    _,
    __,
    FetcherRegistry,
    SelectField
) {
    return SelectField.extend({
        /**
         * {@inherit}
         */
        configure: function () {
            return $.when(
                FetcherRegistry.getFetcher('formats').fetchAll(),
                SelectField.prototype.configure.apply(this, arguments)
            ).then(function (formats) {
                this.config.options = formats.decimal_separators;
            }.bind(this));
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 475 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/common/edit/field/switch.js ***!
  \*****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Switch view extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(/*! underscore */ 0),
    __webpack_require__(/*! pim/job/common/edit/field/field */ 168),
    __webpack_require__(/*! pim/template/export/common/edit/field/switch */ 206),
    __webpack_require__(/*! bootstrap.bootstrapswitch */ 45)
], __WEBPACK_AMD_DEFINE_RESULT__ = function (
    _,
    BaseField,
    fieldTemplate
) {
    return BaseField.extend({
        fieldTemplate: _.template(fieldTemplate),
        events: {
            'change input': 'updateState'
        },

        /**
         * {@inheritdoc}
         */
        render: function () {
            BaseField.prototype.render.apply(this, arguments);

            this.$('.switch').bootstrapSwitch();
        },

        /**
         * Get the field dom value
         *
         * @return {string}
         */
        getFieldValue: function () {
            return this.$('input[type="checkbox"]').prop('checked');
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 476 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/common/edit/field/text.js ***!
  \***************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Text view extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(/*! underscore */ 0),
    __webpack_require__(/*! pim/job/common/edit/field/field */ 168),
    __webpack_require__(/*! pim/template/export/common/edit/field/text */ 207)
], __WEBPACK_AMD_DEFINE_RESULT__ = function (
    _,
    BaseField,
    fieldTemplate
) {
    return BaseField.extend({
        fieldTemplate: _.template(fieldTemplate),
        events: {
            'change input': 'updateState'
        },

        /**
         * Get the field dom value
         *
         * @return {string}
         */
        getFieldValue: function () {
            return this.$('input').val();
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 477 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/common/edit/label.js ***!
  \**********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Title extension for jobs
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! pim/form/common/label */ 166), __webpack_require__(/*! oro/translator */ 3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (BaseLabel, __) {
        return BaseLabel.extend({

            /**
             * Provide the object label
             *
             * @return {String}
             */
            getLabel: function () {
                var prefix = __('pim_enrich.form.job_instance.title.' + this.getFormData().type);

                return prefix + ' - ' + this.getFormData().label;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 478 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/common/edit/meta.js ***!
  \*********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Label extension for jobs
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! pim/form */ 149), __webpack_require__(/*! underscore */ 0), __webpack_require__(/*! oro/translator */ 3), __webpack_require__(/*! pim/template/export/common/edit/meta */ 209)], __WEBPACK_AMD_DEFINE_RESULT__ = function (BaseForm, _, __, template) {
        return BaseForm.extend({
            template: _.template(template),

            /**
             * {@inheritdoc}
             */
            render: function () {
                this.$el.html(this.template({
                    jobInstance: this.getFormData(),
                    __: __
                }));

                return this;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 479 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/common/edit/properties.js ***!
  \***************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Properties form
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! module-config */ 21),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/template/export/common/edit/properties */ 210),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/common/property */ 151)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        module,
        _,
        __,
        template,
        BaseForm,
        propertyAccessor
    ) {
        return BaseForm.extend({
            template: _.template(template),
            errors: {},

            /**
             * {@inheritdoc}
             */
            initialize: function (config) {
                this.config = config.config;

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * {@inherit}
             */
            configure: function () {
                this.trigger('tab:register', {
                    code: this.config.tabCode ? this.config.tabCode : this.code,
                    label: __(this.config.tabTitle)
                });
                this.listenTo(
                    this.getRoot(),
                    'pim_enrich:form:entity:post_fetch',
                    this.resetValidationErrors.bind(this)
                );
                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:post_fetch', this.render.bind(this));
                this.listenTo(
                    this.getRoot(),
                    'pim_enrich:form:entity:validation_error',
                    this.setValidationErrors.bind(this)
                );
                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:validation_error', this.render.bind(this));

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * Set validation errors after save request failure
             *
             * @param {event} event
             */
            setValidationErrors: function (event) {
                this.errors = event.response;
            },

            /**
             * Remove validation error
             */
            resetValidationErrors: function () {
                this.errors = {};
            },

            /**
             * Get the validtion errors for the given field
             *
             * @param {string} field
             *
             * @return {mixed}
             */
            getValidationErrorsForField: function (field) {
                return propertyAccessor.accessProperty(this.errors, field, null);
            },

            /**
             * {@inherit}
             */
            render: function () {
                if (!this.configured) {
                    return this;
                }

                this.$el.html(
                    this.template({__: __})
                );

                this.renderExtensions();
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 480 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/common/edit/upload-launch.js ***!
  \******************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Upload and launch button
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/job/common/edit/launch */ 336),
        __webpack_require__(/*! pim/router */ 11),
        __webpack_require__(/*! oro/messenger */ 16)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, __, BaseLaunch, router, messenger) {
        return BaseLaunch.extend({
            /**
             * {@inherit}
             */
            configure: function () {
                this.listenTo(this.getRoot(), 'pim_enrich:form:job:file_updated', this.render.bind(this));

                return BaseLaunch.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                this.$el.html(this.template({
                    label: __(this.getFormData().file ? this.config.upload : this.config.launch)
                }));

                return this;
            },

            /**
             * Launch the job
             */
            launch: function () {
                if (this.getFormData().file) {
                    var formData = new FormData();
                    formData.append('file', this.getFormData().file);

                    $.ajax({
                        url: this.getUrl(),
                        method: 'POST',
                        data: formData,
                        contentType: false,
                        cache: false,
                        processData: false
                    })
                    .then(function (response) {
                        router.redirect(response.redirectUrl);
                    }.bind(this))
                    .fail(function () {
                        messenger.notificationFlashMessage('error', __('pim_enrich.form.job_instance.fail.launch'));
                    });
                } else {
                    $.post(this.getUrl(), {method: 'POST'}).
                        then(function (response) {
                            router.redirect(response.redirectUrl);
                        })
                        .fail(function () {
                            messenger.notificationFlashMessage('error', __('pim_enrich.form.job_instance.fail.launch'));
                        });
                }

            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 481 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/common/edit/upload.js ***!
  \***********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(/*! jquery */ 1),
    __webpack_require__(/*! underscore */ 0),
    __webpack_require__(/*! oro/translator */ 3),
    __webpack_require__(/*! pim/form */ 149),
    __webpack_require__(/*! pim/template/export/common/edit/upload */ 211)
], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, __, BaseForm, template) {
    return BaseForm.extend({
        template: _.template(template),
        events: {
            'change input[type="file"]': 'addFile',
            'click .clear-field': 'removeFile'
        },

        /**
         * {@inheritdoc}
         */
        render: function () {
            this.$el.html(this.template({
                file: this.getFormData().file
            }));

            return this;
        },

        /**
         * When a file is added to the dom input
         */
        addFile: function () {
            var input = this.$('input[type="file"]').get(0);
            if (!input || 0 === input.files.length) {
                return;
            }

            this.setData({file: input.files[0]});

            this.getRoot().trigger('pim_enrich:form:job:file_updated');

            this.render();
        },

        /**
         * When the user remove the file from the input
         */
        removeFile: function () {
            this.setData({file: null});

            this.getRoot().trigger('pim_enrich:form:job:file_updated');

            this.render();
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 482 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/common/edit/validation.js ***!
  \***************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(/*! jquery */ 1),
    __webpack_require__(/*! underscore */ 0),
    __webpack_require__(/*! oro/translator */ 3),
    __webpack_require__(/*! pim/form */ 149),
    __webpack_require__(/*! pim/template/export/common/edit/validation */ 212),
    __webpack_require__(/*! oro/messenger */ 16),
    __webpack_require__(/*! pim/common/property */ 151)

], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, __, BaseForm, template, messenger, propertyAccessor) {
    return BaseForm.extend({
        template: _.template(template),
        errors: [],

        /**
         * {@inherit}
         */
        configure: function () {
            this.listenTo(this.getRoot(), 'pim_enrich:form:filter:extension:add', this.addFilterExtension.bind(this));
            this.listenTo(this.getRoot(), 'pim_enrich:form:entity:bad_request', this.setValidationErrors.bind(this));

            return BaseForm.prototype.configure.apply(this, arguments);
        },

        setValidationErrors: function (event) {
            this.errors = event.response;

            this.getRoot().trigger('pim_enrich:form:entity:validation_error', event);
        },

        /**
         * Adds the extension to filters.
         * If there is an error for the current filter, we add an element to it.
         *
         * @param {Object} event
         */
        addFilterExtension: function (event) {
            var filter = event.filter;

            if (null !== propertyAccessor
                .accessProperty(this.errors, 'configuration.filters.data' + filter.getField())
            ) {
                var content = $(this.template({
                    errors: propertyAccessor.accessProperty(
                        this.errors,
                        'configuration.filters.data' + filter.getField()
                    )
                }));

                event.filter.addElement(
                    'below-input',
                    'validation',
                    content
                );
            }
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 483 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/common/label.js ***!
  \*****************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Title extension for jobs
 *
 * @author    Alban Alnot <alban.alnot@consertotech.pro>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! pim/form/common/label */ 166), __webpack_require__(/*! oro/translator */ 3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (BaseLabel, __) {
        return BaseLabel.extend({

            /**
             * Provide the object label
             *
             * @return {String}
             */
            getLabel: function () {
                var jobInstance = this.getFormData().jobInstance;
                var prefix = __('pim_enrich.form.job_execution.title.details');

                return prefix + ' - ' + jobInstance.label + ' [' + jobInstance.code + ']';
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 484 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/execution/auto-refresh.js ***!
  \***************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Auto refresh
 *
 * @author    Alban Alnot <alban.alnot@consertotech.pro>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/template/job-execution/auto-refresh */ 278),
        __webpack_require__(/*! backbone */ 2)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, __, BaseForm, FetcherRegistry, template, Backbone) {
        return BaseForm.extend({
            template: _.template(template),
            events: {
                'click a': 'startAutoUpdateOnClick'
            },
            autoRefreshDelay: 1000, //1 second
            autoRefreshTimeout: null,

            stopAutoRefreshDelay: 2 * 60 * 1000, //2 minutes
            stopAutoUpdateTimeout: null,

            status: null, //3 status: isLoading | isFinished | isNotFinished

            /**
             * {@inheritdoc}
             */
            initialize: function (config) {
                this.config = config.config;
                this.setStatus('isLoading');

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            configure: function () {
                this.listenTo(this.getRoot(), 'pim-job-execution-form:start-auto-update', this.startAutoUpdate);
                this.listenTo(this.getRoot(), 'pim-job-execution-form:stop-auto-update', this.stopAll);

                // Clear interval/timeout when changing the page
                Backbone.Router.prototype.on('route', this.stopAll.bind(this));

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * Restart the auto refresh timeout
             */
            restartAutoRefreshTimeout: function () {
                //We do not want a setInterval here,
                //in order to avoid to fetch every second even if a fetch is already in progress...
                clearTimeout(this.autoRefreshTimeout);
                this.autoRefreshTimeout =
                    setTimeout(this.fetchData.bind(this, this.getFormData()), this.autoRefreshDelay);
            },

            /**
             * Start the auto update
             */
            startAutoUpdate: function () {

                //Refreshing data every seconds
                this.restartAutoRefreshTimeout();

                //After 2 minutes, stop the auto refresh and display the button 'Refresh' (only if the job is not done!)
                clearTimeout(this.stopAutoUpdateTimeout);
                this.stopAutoUpdateTimeout =
                    setTimeout(function () {
                        this.stopAll();
                        this.setStatus('isNotFinished');
                    }.bind(this), this.stopAutoRefreshDelay);
            },

            /**
             * Fetch the data
             * @param jobExecution
             */
            fetchData: function (jobExecution) {

                if (jobExecution.isRunning) {
                    this.setStatus('isLoading');
                    var jobId = jobExecution.meta.id;
                    FetcherRegistry.getFetcher('job-execution').fetch(jobId, {id: jobId, cached: false})
                        .then(function (newJobExecution) {
                            this.setData(newJobExecution);
                            this.render();
                            this.restartAutoRefreshTimeout();
                        }.bind(this));
                } else {
                    ///Data are up to date!
                    this.stopAll();
                    this.setStatus('isFinished');
                }
            },

            /**
             * Called when clicking on 'Refresh' button
             */
            startAutoUpdateOnClick: function () {
                this.setStatus('isLoading');
                this.startAutoUpdate();
            },

            /**
             * Stop all timeout
             */
            stopAll: function () {
                clearTimeout(this.autoRefreshTimeout);
                clearTimeout(this.stopAutoUpdateTimeout);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                this.$el.html(this.template({
                    __: __,
                    status: this.status,
                    loadingShown: this.status === 'isLoading',
                    refreshBtnShown: this.status === 'isNotFinished'
                }));

                return this;
            },

            /**
             * Change the status of the extension
             * @param status (isLoading | isFinished | isNotFinished)
             */
            setStatus: function (status) {
                if (status !== 'isLoading' && status !== 'isFinished' && status !== 'isNotFinished') {
                    throw new Error('Status equal isLoading | isFinished | isNotFinished but === [' + status + ']');
                }
                this.status = status;
                this.render();
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 485 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/execution/download-archives-buttons.js ***!
  \****************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Download file extension
 *
 * @author    Alban Alnot <alban.alnot@consertotech.pro>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/job-execution/download-archives-buttons */ 279),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! pim/common/property */ 151),
        __webpack_require__(/*! pim/security-context */ 31)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (_,
              __,
              BaseForm,
              template,
              Routing,
              propertyAccessor,
              securityContext
    ) {
        return BaseForm.extend({
            tagName: 'a',
            className: 'AknButtonList',
            template: _.template(template),

            /**
             * {@inheritdoc}
             */
            initialize: function (meta) {
                this.config = meta.config;

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            configure: function () {
                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:post_update', this.render);

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                if (!this.isVisible()) {
                    return this;
                }
                var formData = this.getFormData();
                this.$el.html(this.template({
                    __: __,
                    archives: propertyAccessor.accessProperty(this.getFormData(), this.config.filesPath),
                    executionId: formData.meta.id,
                    generateRoute: this.getUrl.bind(this)
                }));

                return this;
            },

            /**
             * Get the url from parameters
             *
             * @returns {string}
             */
            getUrl: function (parameters) {
                return Routing.generate(
                    this.config.url,
                    parameters
                );
            },

            /**
             * Returns true if the extension should be visible
             *
             * @returns {boolean}
             */
            isVisible: function () {
                var formData = this.getFormData();
                if (formData.jobInstance.type === 'export') {
                    return securityContext.isGranted(this.config.aclIdExport);
                } else if (formData.jobInstance.type === 'import') {
                    return securityContext.isGranted(this.config.aclIdImport);
                } else {
                    return true;
                }
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 486 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/execution/download-log.js ***!
  \***************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Download log button
 *
 * @author    Alban Alnot <alban.alnot@consertotech.pro>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! pim/form/common/download-file */ 331),
        __webpack_require__(/*! pim/security-context */ 31)

    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        DownloadFile,
        SecurityContext
    ) {
        return DownloadFile.extend({
            /**
             * {@inheritdoc}
             */
            isVisible: function () {
                var formData = this.getFormData();
                if (DownloadFile.prototype.isVisible.apply(this)) {
                    if (formData.jobInstance.type === 'export') {
                        return SecurityContext.isGranted(this.config.aclIdExport);
                    } else if (formData.jobInstance.type === 'import') {
                        return SecurityContext.isGranted(this.config.aclIdImport);
                    } else {
                        return true;
                    }
                } else {
                    return false;
                }
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 487 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/execution/show-profile.js ***!
  \***************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Redirect button
 *
 * @author    Alban Alnot <alban.alnot@consertotech.pro>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/common/redirect */ 334),
        __webpack_require__(/*! routing */ 4)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, __, Redirect, Routing) {
        return Redirect.extend({
            /**
             * {@inheritdoc}
             */
            initialize: function (config) {
                this.config = config.config;

                Redirect.prototype.initialize.apply(this, arguments);
            },

            /**
             * Get the route to redirect to
             *
             * @return {string}
             */
            getUrl: function () {
                var code = this.getFormData().jobInstance.code;
                var type = this.getFormData().jobInstance.type;
                var route = 'pim_importexport_%type%_profile_show'.replace('%type%', type);

                return Routing.generate(route, {
                    code: code
                });
            },

            /**
             * Only visible when the type of jobInstance is import or export
             *
             * @returns {*|{then, fail, end}}
             */
            isVisible: function () {
                var type = this.getFormData().jobInstance.type;

                return $.Deferred().resolve(type === 'export' || type === 'import').promise();
            }

        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 488 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/execution/summary-table.js ***!
  \****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Launch button
 *
 * @author    Alban Alnot <alban.alnot@consertotech.pro>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/job-execution/summary-table */ 280)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, __, BaseForm, template) {
        return BaseForm.extend({
            template: _.template(template),
            events: {
                'click .data': 'toggleDisplayWarning'
            },

            /**
             * Display or hide a warning details
             * @param event
             */
            toggleDisplayWarning: function (event) {
                var stepIndex = event.currentTarget.dataset.stepIndex;
                var warningIndex = event.currentTarget.dataset.warningIndex;
                var model = this.getFormData();
                model.stepExecutions[stepIndex].warnings[warningIndex].expanded =
                    !model.stepExecutions[stepIndex].warnings[warningIndex].expanded;

                this.render();
            },

            /**
             * {@inheritdoc}
             */
            initialize: function (config) {
                this.config = config.config;

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            configure: function () {
                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:post_update', this.render);

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                var model = this.getFormData();
                this.$el.html(this.template({
                    transAndUpperCase: function (str) {
                        return __(str).toUpperCase();
                    },
                    __: __,
                    stepExecutions: model.stepExecutions,
                    failures: model.failures,
                    id: model.meta.id
                }));

                return this;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 489 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/export/edit/delete.js ***!
  \***********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Delete extension for job instance
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! pim/form/common/delete */ 154), __webpack_require__(/*! pim/remover/job-instance-export */ 352)], __WEBPACK_AMD_DEFINE_RESULT__ = function (DeleteForm, JobInstanceRemover) {
    return DeleteForm.extend({
        remover: JobInstanceRemover
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 490 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/export/edit/save.js ***!
  \*********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Save extension for job instance
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! pim/job-instance-edit-form/save */ 184),
        __webpack_require__(/*! pim/saver/job-instance-export */ 360)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        BaseSave,
        JobInstanceSaver
    ) {
        return BaseSave.extend({
            /**
             * {@inheritdoc}
             */
            getJobInstanceSaver: function () {
                return JobInstanceSaver;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 491 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/import/edit/delete.js ***!
  \***********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Delete extension for job instance
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! pim/form/common/delete */ 154), __webpack_require__(/*! pim/remover/job-instance-import */ 353)], __WEBPACK_AMD_DEFINE_RESULT__ = function (DeleteForm, JobInstanceRemover) {
    return DeleteForm.extend({
        remover: JobInstanceRemover
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 492 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/import/edit/save.js ***!
  \*********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Save extension for job instance
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! pim/job-instance-edit-form/save */ 184),
        __webpack_require__(/*! pim/saver/job-instance-import */ 361)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        BaseSave,
        JobInstanceSaver
    ) {
        return BaseSave.extend({
            /**
             * {@inheritdoc}
             */
            getJobInstanceSaver: function () {
                return JobInstanceSaver;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 493 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/product/edit/content.js ***!
  \*************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Content form
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! module-config */ 21),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! pim/template/export/product/edit/content */ 213),
        __webpack_require__(/*! pim/form */ 149)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        module,
        _,
        __,
        Backbone,
        template,
        BaseForm
    ) {
        return BaseForm.extend({
            template: _.template(template),

            /**
             * {@inheritdoc}
             */
            initialize: function (config) {
                this.config = config.config;

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            configure: function () {
                this.trigger('tab:register', {
                    code: this.config.tabCode ? this.config.tabCode : this.code,
                    label: __(this.config.tabTitle)
                });
                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:validation_error', this.render.bind(this));

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                if (!this.configured) {
                    return this;
                }

                this.$el.html(
                    this.template({})
                );

                this.renderExtensions();
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 494 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/product/edit/content/data.js ***!
  \******************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * This extension manages the data filter collection and its generation.
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Yohan Blain <yohan.blain@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/template/export/product/edit/content/data */ 214),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/form-builder */ 7),
        __webpack_require__(/*! pim/common/property */ 151)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        __,
        template,
        BaseForm,
        fetcherRegistry,
        formBuilder,
        PropertyAccessor
    ) {
        return BaseForm.extend({
            filterViews: [],
            template: _.template(template),

            /**
             * {@inheritdoc}
             */
            initialize: function (config) {
                this.config = config.config;

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            configure: function () {
                this.onExtensions('add-attribute:add', function (event) {
                    this.addFilters(event.codes).then(function () {
                        this.updateModel();
                        this.render();
                    }.bind(this));
                }.bind(this));

                this.filterViews = [];

                return $.when(
                    BaseForm.prototype.configure.apply(this, arguments),
                    this.addConfigFilters()
                );
            },

            /**
             * Add a collection of filters
             *
             * @param {array} fieldCodes Can be attributes or product field codes
             */
            addFilters: function (fieldCodes) {
                // We pre-fetch the attributes to add to avoid multiple http requests
                return fetcherRegistry.getFetcher('attribute').fetchByIdentifiers(fieldCodes)
                    .then(function () {
                        return $.when.apply($, _.map(fieldCodes, this.addFilter.bind(this)));
                    }.bind(this))
                    .then(function () {
                        if (!_.isEmpty(this.getFormData())) {
                            this.updateFiltersData(_.extend({}, this.getFilters().data));
                        }
                    }.bind(this));
            },

            /**
             * Add a single filter
             *
             * @param {string} fieldCode
             */
            addFilter: function (fieldCode) {
                var deferred = $.Deferred();

                this.getFilterConfig(fieldCode)
                    .then(this.buildFilterView.bind(this))
                    .then(function (filterView) {
                        this.listenTo(filterView, 'pim_enrich:form:entity:post_update', this.updateModel.bind(this));
                        this.listenTo(filterView, 'filter:remove', this.removeFilter.bind(this));
                        this.listenTo(this.getRoot(), 'channel:update:after', function (scope) {
                            filterView.trigger('channel:update:after', scope);
                        }.bind(this));

                        this.filterViews.push(filterView);
                    }.bind(this))
                    .always(function () {
                        deferred.resolve();
                    });

                return deferred.promise();
            },

            /**
             * Build a filter view
             *
             * @param {Object} filterConfig
             *
             * @return {Promise}
             */
            buildFilterView: function (filterConfig) {
                return formBuilder.buildForm(filterConfig.view).then(function (filterView) {
                    filterView.setRemovable(filterConfig.isRemovable);
                    filterView.setType(filterConfig.view);
                    filterView.setParentForm(this);
                    filterView.setCode(filterConfig.field);

                    return filterView.configure().then(function () {
                        var data = {};
                        filterView.trigger('pim_enrich:form:entity:pre_update', data);
                        filterView.setData(data, {silent: true});

                        return filterView;
                    });
                }.bind(this));
            },

            /**
             * Get filter configuration for the giver field
             *
             * @param {string} fieldCode
             *
             * @return {Promise}
             */
            getFilterConfig: function (fieldCode) {
                var filterConfig = _.findWhere(this.config.filters, {field: fieldCode});

                if (undefined !== filterConfig) {
                    filterConfig.isRemovable = false;

                    return $.Deferred().resolve(filterConfig).promise();
                }

                return fetcherRegistry.getFetcher('attribute').fetch(fieldCode)
                    .then(function (attribute) {
                        return {
                            field: attribute.code,
                            view: attribute.filter_types['product-export-builder'],
                            isRemovable: true
                        };
                    });
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                if (!this.configured || _.isEmpty(this.getFormData())) {
                    return this;
                }

                this.$el.html(this.template({__: __}));

                $.when(
                    fetcherRegistry.getFetcher('attribute').getIdentifierAttribute(),
                    this.addExistingFilters()
                ).then(function (identifier) {
                    var filtersContainer = this.$('.filters').empty();

                    var configuredFieldCodes = _.pluck(this.config.filters, 'field');
                    var savedFieldCodes = _.pluck(this.filterViews, 'filterCode').sort();
                    var fieldCodes = _.union(
                        configuredFieldCodes,
                        _.without(savedFieldCodes, identifier.code),
                        [identifier.code]
                    );

                    var filterViews = _.map(fieldCodes, function (code) {
                        var view = _.findWhere(this.filterViews, {filterCode: code});

                        if (undefined === view) {
                            return;
                        }

                        return view.render().$el;
                    }.bind(this));

                    filtersContainer.append(filterViews);

                    this.renderExtensions();
                }.bind(this));

                return this;
            },

            /**
             * Returns the current filters as an array of fields.
             *
             * @return {array}
             */
            getCurrentFilters: function () {
                return _.map(this.filterViews, function (filterView) {
                    return filterView.getCode();
                });
            },

            /**
             * Add filters from the configuration (the field filters and identifier)
             */
            addConfigFilters: function () {
                var promises = [];
                this.getRoot().trigger('pim_enrich:form:filter:set-default', promises);

                return $.when.apply($, promises).then(function () {
                    var defaultFieldCodes = 0 !== arguments.length ?
                        _.union(_.flatten(_.toArray(arguments))) :
                        [];
                    var configFilterCodes = _.pluck(this.config.filters, 'field');

                    return _.union(configFilterCodes, defaultFieldCodes);
                }.bind(this))
                .then(function (defaultFilterCodes) {
                    return this.addFilters(defaultFilterCodes);
                }.bind(this));
            },

            /**
             * Add filter stored in the backend (filters added by the user and saved)
             */
            addExistingFilters: function () {
                var filterCodes = _.map(_.pluck(this.getFilters().data, 'field'), function (field) {
                    return field.replace(/\.code$/, '');
                });

                var existingFilterCodes = _.map(this.filterViews, function (filterView) {
                    return filterView.getCode();
                });

                return this.addFilters(_.difference(filterCodes, existingFilterCodes));
            },

            /**
             * Returns default filter fields. They can be set by config or other extensions.
             *
             * @returns {Promise}
             */
            getDefaultFilterFields: function () {
                var promises = [];
                this.getRoot().trigger('pim_enrich:form:filter:set-default', promises);

                return $.when.apply($, promises).then(function () {
                    var defaultFields = 0 !== arguments.length ?
                        _.union(_.flatten(_.toArray(arguments))) :
                        [];
                    var configFields = _.pluck(this.config.filters, 'field');

                    return _.union(configFields, defaultFields);
                }.bind(this));
            },

            /**
             * Update the model of each filter views
             *
             * @param {Object} data
             */
            updateFiltersData: function (data) {
                _.each(this.filterViews, function (filterView) {
                    var filterData = _.findWhere(data, {field: filterView.getField()});
                    filterData = filterData || {};
                    filterView.trigger('pim_enrich:form:entity:pre_update', filterData);
                    filterView.setData(filterData, {silent: true});
                }.bind(this));

                this.updateModel();
            },

            /**
             * Updates the form model by iterating over filter views
             */
            updateModel: function () {
                var data = this.getFormData();
                if (_.isEmpty(data)) {
                    return;
                }

                var dataFilterCollection = [];

                _.each(this.filterViews, function (filterView) {
                    if (!filterView.isEmpty()) {
                        dataFilterCollection.push(filterView.getFormData());
                    }
                });
                data = PropertyAccessor.updateProperty(data, 'configuration.filters.data', dataFilterCollection);

                this.setData(data);
            },

            /**
             * Removes the filter for the given field then renders the whole view.
             *
             * @param {string} fieldCode
             */
            removeFilter: function (fieldCode) {
                var cleanedFieldCode = fieldCode.replace(/\.code$/, '');
                this.filterViews = _.filter(this.filterViews, function (filterView) {
                    return filterView.getCode() !== cleanedFieldCode;
                });

                this.updateModel();
                this.render();
            },

            /**
             * Get filters
             *
             * @return {object}
             */
            getFilters: function () {
                return this.getFormData().configuration.filters;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 495 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/product/edit/content/data/add-select/attribute/select.js ***!
  \**********************************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Product export profile edit form attribute add select extension view
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/product/add-select/attribute */ 169)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        AddAttributeSelect
    ) {
        return AddAttributeSelect.extend({
            /**
             * {@inheritdoc}
             */
            getItemsToExclude: function () {
                return $.Deferred().resolve(this.getParent().getCurrentFilters());
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 496 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/product/edit/content/data/default-attribute-filters.js ***!
  \********************************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Extension to add a "remove" button on an optional filter.
 *
 * @author    Yohan Blain <yohan.blain@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)
 */


!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(/*! underscore */ 0),
    __webpack_require__(/*! oro/translator */ 3),
    __webpack_require__(/*! pim/form */ 149),
    __webpack_require__(/*! pim/fetcher-registry */ 10)

], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, __, BaseForm, fetcherRegistry) {
    return BaseForm.extend({
        /**
         * {@inherit}
         */
        initialize: function (config) {
            this.config = config.config;

            BaseForm.prototype.initialize.apply(this, arguments);
        },

        /**
         * {@inherit}
         */
        configure: function () {
            this.listenTo(this.getRoot(), 'pim_enrich:form:filter:set-default', this.addFilter.bind(this));

            return BaseForm.prototype.configure.apply(this, arguments);
        },

        /**
         * Adds filters to the collection.
         *
         * @param {Object} event
         */
        addFilter: function (event) {
            event.push(
                fetcherRegistry
                    .getFetcher('attribute')
                    .fetchByTypes(this.config.types)
                    .then(function (attributes) {
                        return _.pluck(attributes, 'code');
                    })
            );
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 497 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/product/edit/content/readonly.js ***!
  \**********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Extension to set all filters in readonly mode.
 *
 * @author    Yohan Blain <yohan.blain@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)
 */


!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(/*! module-config */ 21),
    __webpack_require__(/*! jquery */ 1),
    __webpack_require__(/*! underscore */ 0),
    __webpack_require__(/*! backbone */ 2),
    __webpack_require__(/*! pim/form */ 149)
], __WEBPACK_AMD_DEFINE_RESULT__ = function (
    module,
    $,
    _,
    Backbone,
    BaseForm
) {
    return BaseForm.extend({
        /**
         * {@inheritdoc}
         */
        configure: function () {
            this.listenTo(this.getRoot(), 'pim_enrich:form:filter:extension:add', this.addFilterExtension.bind(this));

            return BaseForm.prototype.configure.apply(this, arguments);
        },

        /**
         * Sets filters in readonly mode.
         *
         * @param {Object} event
         */
        addFilterExtension: function (event) {
            event.filter.setEditable(false);
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 498 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/product/edit/content/structure.js ***!
  \***********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Structure section
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/template/export/product/edit/content/structure */ 216),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/common/property */ 151)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        __,
        template,
        BaseForm,
        propertyAccessor
    ) {
        return BaseForm.extend({
            className: 'structure-filters',
            errors: {},
            template: _.template(template),

            /**
             * {@inheritdoc}
             */
            configure: function () {
                this.listenTo(
                    this.getRoot(),
                    'pim_enrich:form:entity:bad_request',
                    this.setValidationErrors.bind(this)
                );
                this.listenTo(
                    this.getRoot(),
                    'pim_enrich:form:entity:post_fetch',
                    this.resetValidationErrors.bind(this)
                );
                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:post_fetch', this.render.bind(this));

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * Set the validation errors after validation fail
             *
             * @param {event} event
             */
            setValidationErrors: function (event) {
                this.errors = event.response;
            },

            /**
             * Rest validation error after fetch
             */
            resetValidationErrors: function () {
                this.errors = {};
            },

            /**
             * Get the validtion errors for the given field
             *
             * @param {string} field
             *
             * @return {mixed}
             */
            getValidationErrorsForField: function (field) {
                return propertyAccessor.accessProperty(this.errors, 'configuration.filters.structure.' + field, []);
            },

            /**
             * Renders this view.
             *
             * @return {Object}
             */
            render: function () {
                if (!this.configured) {
                    return this;
                }
                this.$el.html(this.template({__: __}));

                this.renderExtensions();

                return this;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 499 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/product/edit/content/structure/attributes.js ***!
  \**********************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Attributes structure filter
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! pim/template/export/product/edit/content/structure/attributes */ 219),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! oro/loading-mask */ 18),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! pim/job/product/edit/content/structure/attributes-selector */ 337)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        __,
        Backbone,
        template,
        BaseForm,
        LoadingMask,
        fetcherRegistry,
        UserContext,
        AttributeSelector
    ) {
        return BaseForm.extend({
            className: 'AknFieldContainer attributes',
            template: _.template(template),
            events: {
                'click button': 'openSelector'
            },

            /**
             * Initializes configuration.
             *
             * @param {Object} config
             */
            initialize: function (config) {
                this.config = config.config;

                return BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                if (!this.configured) {
                    return this;
                }

                var attributes = this.getFilters().structure.attributes || [];

                this.$el.html(
                    this.template({
                        __: __,
                        isEditable: this.isEditable(),
                        titleEdit: __('pim_enrich.export.product.filter.attributes.title'),
                        labelEdit: __('pim_enrich.export.product.filter.attributes.edit'),
                        labelInfo: __(
                            'pim_enrich.export.product.filter.attributes.label',
                            {count: attributes.length},
                            attributes.length
                        ),
                        errors: this.getParent().getValidationErrorsForField('attributes')
                    })
                );

                this.delegateEvents();

                this.$('[data-toggle="tooltip"]').tooltip();
                this.renderExtensions();
            },

            /**
             * Returns whether this filter is editable.
             *
             * @returns {boolean}
             */
            isEditable: function () {
                return undefined !== this.config.readOnly ?
                    !this.config.readOnly :
                    true;
            },

            openSelector: function (e) {
                e.preventDefault();
                var loadingMask = new LoadingMask();
                loadingMask.render().$el.appendTo($('#container'));
                loadingMask.show();
                var selectedAttributes = this.getFilters().structure.attributes || [];
                var attributeSelector = new AttributeSelector();
                attributeSelector.setSelected(selectedAttributes);

                var modal = new Backbone.BootstrapModal({
                    className: 'modal modal-large column-configurator-modal',
                    modalOptions: {
                        backdrop: 'static',
                        keyboard: false
                    },
                    allowCancel: true,
                    okCloses: false,
                    cancelText: _.__('pim_enrich.export.product.filter.attributes.modal.cancel'),
                    title: _.__('pim_enrich.export.product.filter.attributes.modal.title'),
                    content: '<div class="AknColumnConfigurator attribute-selector"></div>',
                    okText: _.__('pim_enrich.export.product.filter.attributes.modal.apply')
                });

                loadingMask.hide();
                loadingMask.$el.remove();

                modal.open();
                attributeSelector.setElement('.attribute-selector').render();

                modal.on('ok', function () {
                    var values = attributeSelector.getSelected();
                    var data = this.getFilters();

                    data.structure.attributes = values;

                    this.setData(data);
                    modal.close();
                    this.render();
                }.bind(this));
            },

            /**
             * Get filters
             *
             * @return {object}
             */
            getFilters: function () {
                return this.getFormData().configuration.filters;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 500 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/product/edit/content/structure/locales.js ***!
  \*******************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Locale structure filter
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/template/export/product/edit/content/structure/locales */ 220),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! jquery.select2 */ 29)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        __,
        template,
        BaseForm,
        fetcherRegistry
    ) {
        return BaseForm.extend({
            className: 'AknFieldContainer',
            template: _.template(template),

            /**
             * Initializes configuration.
             *
             * @param {Object} config
             */
            initialize: function (config) {
                this.config = config.config;

                return BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * Configures this extension.
             *
             * @return {Promise}
             */
            configure: function () {
                this.listenTo(this.getRoot(), 'channel:update:after', this.channelUpdated.bind(this));

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * Renders locales dropdown.
             *
             * @returns {Object}
             */
            render: function () {
                if (!this.configured) {
                    return this;
                }

                fetcherRegistry.getFetcher('channel')
                    .fetch(this.getFilters().structure.scope)
                    .always(function (scope) {
                        this.$el.html(
                            this.template({
                                isEditable: this.isEditable(),
                                __: __,
                                locales: this.getLocales(),
                                availableLocales: !scope ? [] : scope.locales,
                                errors: this.getParent().getValidationErrorsForField('locales')
                            })
                        );

                        this.$('.select2').select2().on('change', this.updateState.bind(this));
                        this.$('[data-toggle="tooltip"]').tooltip();

                        this.renderExtensions();
                    }.bind(this));

                return this;
            },

            /**
             * Returns whether this filter is editable.
             *
             * @returns {boolean}
             */
            isEditable: function () {
                return undefined !== this.config.readOnly ?
                    !this.config.readOnly :
                    true;
            },

            /**
             * Sets new locales on field change.
             *
             * @param {Object} event
             */
            updateState: function (event) {
                this.setLocales(event.val);
            },

            /**
             * Sets specified locales into root model.
             *
             * @param {Array} codes
             */
            setLocales: function (codes) {
                var data = this.getFilters();
                var before = data.structure.locales;

                data.structure.locales = codes;
                this.setData(data);

                if (before !== codes) {
                    this.getRoot().trigger('locales:update:after', codes);
                }
            },

            /**
             * Gets locales from root model.
             *
             * @returns {Array}
             */
            getLocales: function () {
                var structure = this.getFilters().structure;

                if (_.isUndefined(structure)) {
                    return [];
                }

                return _.isUndefined(structure.locales) ? [] : structure.locales;
            },

            /**
             * Resets locales after channel has been modified then re-renders the view.
             */
            channelUpdated: function () {
                this.initializeDefaultLocales()
                    .then(function () {
                        this.render();
                    }.bind(this));
            },

            /**
             * Sets locales corresponding to the current scope (default state).
             *
             * @return {Promise}
             */
            initializeDefaultLocales: function () {
                return fetcherRegistry.getFetcher('channel')
                    .fetch(this.getCurrentScope())
                    .then(function (scope) {
                        this.setLocales(_.pluck(scope.locales, 'code'));
                    }.bind(this));
            },

            /**
             * Gets current scope from root model.
             *
             * @return {String}
             */
            getCurrentScope: function () {
                return this.getFilters().structure.scope;
            },

            /**
             * Get filters
             *
             * @return {object}
             */
            getFilters: function () {
                return this.getFormData().configuration.filters;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 501 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/product/edit/content/structure/scope.js ***!
  \*****************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Scope structure filter
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/template/export/product/edit/content/structure/scope */ 221),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! jquery.select2 */ 29)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        __,
        template,
        BaseForm,
        fetcherRegistry,
        UserContext
    ) {
        return BaseForm.extend({
            config: {},
            className: 'AknFieldContainer',
            template: _.template(template),

            /**
             * Initializes configuration.
             *
             * @param {Object} config
             */
            initialize: function (config) {
                this.config = config.config;

                return BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * Renders scopes dropdown.
             *
             * @return {Object}
             */
            render: function () {
                if (!this.configured) {
                    return this;
                }

                fetcherRegistry.getFetcher('channel').fetchAll().then(function (channels) {
                    if (!this.getScope()) {
                        this.setScope(_.first(channels).code);
                    }

                    this.$el.html(
                        this.template({
                            isEditable: this.isEditable(),
                            __: __,
                            locale: UserContext.get('uiLocale'),
                            channels: channels,
                            scope: this.getScope(),
                            errors: this.getParent().getValidationErrorsForField('scope')
                        })
                    );

                    this.$('.select2')
                        .select2({minimumResultsForSearch: -1})
                        .on('change', this.updateState.bind(this));

                    this.$('[data-toggle="tooltip"]').tooltip();

                    this.renderExtensions();
                }.bind(this));

                return this;
            },

            /**
             * Returns whether this filter is editable.
             *
             * @returns {boolean}
             */
            isEditable: function () {
                return undefined !== this.config.readOnly ?
                    !this.config.readOnly :
                    true;
            },

            /**
             * Sets new scope on field change.
             *
             * @param {Object} event
             */
            updateState: function (event) {
                this.setScope(event.target.value);
            },

            /**
             * Sets specified scope into root model.
             *
             * @param {String} code
             */
            setScope: function (code) {
                var data = this.getFilters();
                var before = data.structure.scope;

                data.structure.scope = code;
                this.setData(data);

                if (before !== code) {
                    this.getRoot().trigger('channel:update:after', data.structure.scope);
                }
            },

            /**
             * Gets scope from root model.
             *
             * @returns {String}
             */
            getScope: function () {
                var structure = this.getFilters().structure;

                if (_.isUndefined(structure)) {
                    return null;
                }

                return _.isUndefined(structure.scope) ? null : structure.scope;
            },

            /**
             * Get filters
             *
             * @return {object}
             */
            getFilters: function () {
                return this.getFormData().configuration.filters;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 502 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/job/product/edit/field/date-format.js ***!
  \***********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Date format fetcher
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(/*! jquery */ 1),
    __webpack_require__(/*! underscore */ 0),
    __webpack_require__(/*! oro/translator */ 3),
    __webpack_require__(/*! pim/fetcher-registry */ 10),
    __webpack_require__(/*! pim/job/common/edit/field/select */ 183)
], __WEBPACK_AMD_DEFINE_RESULT__ = function (
    $,
    _,
    __,
    FetcherRegistry,
    SelectField
) {
    return SelectField.extend({
        /**
         * {@inherit}
         */
        configure: function () {
            return $.when(
                FetcherRegistry.getFetcher('formats').fetchAll(),
                SelectField.prototype.configure.apply(this, arguments)
            ).then(function (formats) {
                this.config.options = formats.date_formats;
            }.bind(this));
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 503 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/jquery.wizard.js ***!
  \**************************************************************************/
/***/ (function(module, exports) {

/* global jQuery */
(function ($) {
    'use strict';

    $.fn.wizard = function (options) {
        var opts = $.extend({}, $.fn.wizard.defaults, options);
        var $steps = $(this).find('li');
        var currentStep = opts.currentStep;

        if (!$(this).hasClass('wizard')) {
            $(this).addClass('wizard');
        }

        $steps.each(function () {
            $('div', this)
                .remove('.progress-start')
                .remove('.progress-end')
                .remove('.dot');
            $(this)
                .append('<div class="progress-start"></div>')
                .append('<div class="progress-end"></div>');
        });

        $steps.first().find('.progress-start').hide();
        $steps.last().find('.progress-end').hide();

        for (var i = 0; i < currentStep; i++) {
            if (i !== 0) {
                $steps.eq(i).find('.progress-start').addClass('active');
            }
            if (i !== currentStep - 1) {
                $steps.eq(i).find('.progress-end').addClass('active');
            }
            if (i === currentStep - 1) {
                $steps.eq(i).append('<div class="dot"><i class="icon-circle"></i></div>');
            }
        }
    };

    $.fn.wizard.defaults = {
        currentStep: 1
    };
})(jQuery);


/***/ }),
/* 504 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/manager/history-item-manager.js ***!
  \*****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * @author    Damien Carcel <damien.carcel@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1), __webpack_require__(/*! routing */ 4)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, Routing) {
        return {
            /**
             * Saves a history item.
             *
             * @param {string} url
             * @param {Object} title
             */
            save: function (url, title) {
                return $.post(
                    Routing.generate('pim_enrich_navigation_history_rest_post'),
                    JSON.stringify({url: url, title: title}),
                    null,
                    'json'
                );
            }
        };
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 505 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/pim-attributeoptionview.js ***!
  \************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! oro/loading-mask */ 18),
        __webpack_require__(/*! pim/dialog */ 14),
        __webpack_require__(/*! pim/template/attribute-option/index */ 197),
        __webpack_require__(/*! pim/template/attribute-option/edit */ 195),
        __webpack_require__(/*! pim/template/attribute-option/show */ 198),
        __webpack_require__(/*! jquery-ui */ 48)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        Backbone,
        __,
        Routing,
        mediator,
        LoadingMask,
        Dialog,
        indexTemplate,
        editTemplate,
        showTemplate
    ) {
        'use strict';

        var AttributeOptionItem = Backbone.Model.extend({
            defaults: {
                code: '',
                optionValues: {}
            }
        });

        var ItemCollection = Backbone.Collection.extend({
            model: AttributeOptionItem,
            initialize: function (options) {
                this.url = options.url;
            }
        });

        var EditableItemView = Backbone.View.extend({
            tagName: 'tr',
            className: 'AknGrid-bodyRow editable-item-row',
            showTemplate: _.template(showTemplate),
            editTemplate: _.template(editTemplate),
            events: {
                'click .show-row':   'stopEditItem',
                'click .edit-row':   'startEditItem',
                'click .delete-row': 'deleteItem',
                'click .update-row': 'updateItem',
                'keyup input':       'soil',
                'keydown':           'cancelSubmit'
            },
            editable: false,
            parent: null,
            loading: false,
            locales: [],
            initialize: function (options) {
                this.locales       = options.locales;
                this.parent        = options.parent;
                this.model.urlRoot = this.parent.updateUrl;

                this.render();
            },
            render: function () {
                var template = null;

                if (this.editable) {
                    this.clean();
                    this.$el.addClass('in-edition');
                    template = this.editTemplate;
                } else {
                    this.$el.removeClass('in-edition');
                    template = this.showTemplate;
                }

                this.$el.html(template({
                    item: this.model.toJSON(),
                    locales: this.locales
                }));

                this.$el.attr('data-item-id', this.model.id);

                return this;
            },
            showReadableItem: function () {
                this.editable = false;
                this.parent.showReadableItem(this);
                this.clean();
                this.render();
            },
            showEditableItem: function () {
                this.editable = true;
                this.render();
                this.model.set(this.loadModelFromView().attributes);
            },
            startEditItem: function () {
                var rowIsEditable = this.parent.requestRowEdition(this);

                if (rowIsEditable) {
                    this.showEditableItem();
                }
            },
            stopEditItem: function () {
                if (!this.model.id || this.dirty) {
                    if (this.dirty) {
                        Dialog.confirm(
                            __('confirm.attribute_option.cancel_edition_on_new_option_text'),
                            __('confirm.attribute_option.cancel_edition_on_new_option_title'),
                            function () {
                                this.showReadableItem(this);
                                if (!this.model.id) {
                                    this.deleteItem();
                                }
                            }.bind(this));
                    } else {
                        if (!this.model.id) {
                            this.deleteItem();
                        } else {
                            this.showReadableItem();
                        }
                    }
                } else {
                    this.showReadableItem();
                }
            },
            deleteItem: function () {
                var itemCode = this.el.firstChild.innerText;

                Dialog.confirm(
                    __('pim_enrich.item.delete.confirm.content', {'itemName': itemCode}),
                    __('pim_enrich.item.delete.confirm.title', {'itemName': itemCode}),
                    function () {
                        this.parent.deleteItem(this);
                    }.bind(this)
                );
            },
            updateItem: function () {
                this.inLoading(true);

                var editedModel = this.loadModelFromView();

                editedModel.save(
                    {},
                    {
                        url: this.model.url(),
                        success: function () {
                            this.inLoading(false);
                            this.model.set(editedModel.attributes);
                            this.clean();
                            this.stopEditItem();
                        }.bind(this),
                        error: this.showValidationErrors.bind(this)
                    }
                );
            },
            showValidationErrors: function (data, xhr) {
                this.inLoading(false);

                var response = xhr.responseJSON;

                if (response.code) {
                    this.$el.find('.validation-tooltip')
                        .attr('data-original-title', response.code)
                        .removeClass('AknIconButton--hide')
                        .tooltip('destroy')
                        .tooltip('show');
                } else {
                    Dialog.alert(
                        __('alert.attribute_option.error_occured_during_submission'),
                        __('error.saving.attribute_option')
                    );
                }
            },
            cancelSubmit: function (e) {
                if (e.keyCode === 13) {
                    this.updateItem();

                    return false;
                }
            },
            loadModelFromView: function () {
                var attributeOptions = {};
                var editedModel = this.model.clone();

                editedModel.urlRoot = this.model.urlRoot;

                _.each(this.$el.find('.attribute-option-value'), function (input) {
                    var locale = input.dataset.locale;

                    attributeOptions[locale] = {
                        locale: locale,
                        value:  input.value,
                        id:     this.model.get('optionValues')[locale] ?
                            this.model.get('optionValues')[locale].id :
                            null
                    };
                }.bind(this));

                editedModel.set('code', this.$el.find('.attribute_option_code').val());
                editedModel.set('optionValues', attributeOptions);

                return editedModel;
            },
            inLoading: function (loading) {
                this.parent.inLoading(loading);
            },
            soil: function () {
                if (JSON.stringify(this.model.attributes) !== JSON.stringify(this.loadModelFromView().attributes)) {
                    this.dirty = true;
                } else {
                    this.dirty = false;
                }
            },
            clean: function () {
                this.dirty = false;
            }
        });

        var ItemCollectionView = Backbone.View.extend({
            tagName: 'table',
            className: 'AknGrid table attribute-option-view',
            template: _.template(
                '<!-- Pim/Bundle/EnrichBundle/Resources/public/js/pim-attributeoptionview.js -->' +
                '<colgroup>' +
                    '<col class="code" span="1"></col>' +
                    '<col class="fields" span="<%= locales.length %>"></col>' +
                    '<col class="action" span="1"></col>' +
                '</colgroup>' +
                '<thead>' +
                    '<tr>' +
                        '<th class="AknGrid-headerCell"><%= code_label %></th>' +
                        '<% _.each(locales, function (locale) { %>' +
                        '<th class="AknGrid-headerCell">' +
                            '<%= locale %>' +
                        '</th>' +
                        '<% }); %>' +
                        '<th class="AknGrid-headerCell AknGrid-headerCell--right">Action</th>' +
                    '</tr>' +
                '</thead>' +
                '<tbody></tbody>' +
                '<tfoot>' +
                    '<tr class="AknGrid-bodyRow">' +
                        '<td class="AknGrid-bodyCell AknGrid-bodyCell--right" colspan="<%= 2 + locales.length %>">' +
                            '<span class="AknButton AknButton--grey AknButton--small option-add">' +
                                '<%= add_option_label %>' +
                            '</span>' +
                        '</td>' +
                    '</tr>' +
                '</tfoot>'
            ),
            events: {
                'click .option-add': 'addItem'
            },
            $target: null,
            locales: [],
            sortable: true,
            sortingUrl: '',
            updateUrl: '',
            currentlyEditedItemView: null,
            itemViews: [],
            rendered: false,
            initialize: function (options) {
                this.$target    = options.$target;
                this.collection = new ItemCollection({url: options.updateUrl});
                this.locales    = options.locales;
                this.updateUrl  = options.updateUrl;
                this.sortingUrl = options.sortingUrl;
                this.sortable   = options.sortable;

                this.render();
                this.load();
            },
            render: function () {
                this.$el.empty();

                this.currentlyEditedItemView = null;
                this.updateEditionStatus();

                this.$el.html(this.template({
                    locales: this.locales,
                    add_option_label: __('label.attribute_option.add_option'),
                    code_label: __('Code')
                }));

                _.each(this.collection.models, function (attributeOptionItem) {
                    this.addItem({item: attributeOptionItem});
                }.bind(this));

                if (0 === this.collection.length) {
                    this.addItem();
                }

                if (!this.rendered) {
                    this.$target.html(this.$el);

                    this.rendered = true;
                }

                this.$el.sortable({
                    items: 'tbody tr',
                    axis: 'y',
                    connectWith: this.$el,
                    containment: this.$el,
                    distance: 5,
                    cursor: 'move',
                    helper: function (e, ui) {
                        ui.children().each(function () {
                            $(this).width($(this).width());
                        });

                        return ui;
                    },
                    stop: function () {
                        this.updateSorting();
                    }.bind(this)
                });

                this.updateSortableStatus(this.sortable);

                return this;
            },
            load: function () {
                this.itemViews = [];
                this.inLoading(true);
                this.collection
                    .fetch({
                        success: function () {
                            this.inLoading(false);
                            this.render();
                        }.bind(this)
                    });
            },
            addItem: function (opts) {
                var options = opts || {};

                //If no item model provided we create one
                var itemToAdd;
                if (!options.item) {
                    itemToAdd = new AttributeOptionItem();
                } else {
                    itemToAdd = options.item;
                }

                var newItemView = this.createItemView(itemToAdd);

                if (newItemView) {
                    this.$el.children('tbody').append(newItemView.$el);
                }
            },
            createItemView: function (item) {
                var itemView = new EditableItemView({
                    model:    item,
                    url:      this.updateUrl,
                    locales:  this.locales,
                    parent:   this
                });

                //If the item is new the view is changed to edit mode
                if (!item.id) {
                    if (!this.requestRowEdition(itemView)) {
                        return;
                    } else {
                        itemView.showEditableItem();
                    }
                }

                this.collection.add(item);
                this.itemViews.push(itemView);

                return itemView;
            },
            requestRowEdition: function (attributeOptionRow) {
                if (this.currentlyEditedItemView) {
                    if (this.currentlyEditedItemView.dirty) {
                        Dialog.alert(__('alert.attribute_option.save_before_edit_other'));

                        return false;
                    } else {
                        this.currentlyEditedItemView.stopEditItem();
                        this.currentlyEditedItemView = null;
                        this.updateEditionStatus();
                    }
                }

                if (attributeOptionRow.model.id) {
                    this.currentlyEditedItemView = attributeOptionRow;
                }

                this.updateEditionStatus();

                return true;
            },
            showReadableItem: function (item) {
                if (item === this.currentlyEditedItemView) {
                    this.currentlyEditedItemView = null;
                    this.updateEditionStatus();
                }
            },
            deleteItem: function (item) {
                this.inLoading(true);

                item.model.destroy({
                    success: function () {
                        this.inLoading(false);

                        this.collection.remove(item);
                        this.currentlyEditedItemView = null;
                        this.updateEditionStatus();

                        if (0 === this.collection.length) {
                            this.addItem();
                            item.$el.hide(0);
                        } else if (!item.model.id) {
                            item.$el.hide(0);
                        } else {
                            item.$el.hide(500);
                        }
                    }.bind(this),
                    error: function (data, response) {
                        this.inLoading(false);
                        var message;

                        if (response.responseJSON) {
                            message = response.responseJSON.message;
                        } else {
                            message = response.responseText;
                        }

                        Dialog.alert(message, __('error.removing.attribute_option'));
                    }.bind(this)
                });
            },
            updateEditionStatus: function () {
                if (this.currentlyEditedItemView) {
                    this.$el.addClass('in-edition');
                } else {
                    this.$el.removeClass('in-edition');
                }
            },
            updateSortableStatus: function (sortable) {
                this.sortable = sortable;

                if (sortable) {
                    this.$el.sortable('enable');
                } else {
                    this.$el.sortable('disable');
                }
            },
            updateSorting: function () {
                this.inLoading(true);
                var sorting = [];

                var rows = this.$el.find('tbody tr');
                for (var i = rows.length - 1; i >= 0; i--) {
                    sorting[i] = rows[i].dataset.itemId;
                }

                $.ajax({
                    url: this.sortingUrl,
                    type: 'PUT',
                    data: JSON.stringify(sorting)
                }).done(function () {
                    this.inLoading(false);
                }.bind(this));
            },
            inLoading: function (loading) {
                if (loading) {
                    var loadingMask = new LoadingMask();
                    loadingMask.render().$el.appendTo(this.$el);
                    loadingMask.show();
                } else {
                    this.$el.find('.loading-mask').remove();
                }
            }
        });

        return function ($element) {
            var itemCollectionView = new ItemCollectionView(
            {
                $target: $element,
                updateUrl: Routing.generate(
                    'pim_enrich_attributeoption_index',
                    {attributeId: $element.data('attribute-id')}
                ),
                sortingUrl: Routing.generate(
                    'pim_enrich_attributeoption_update_sorting',
                    {attributeId: $element.data('attribute-id')}
                ),
                locales: $element.data('locales'),
                sortable: $element.data('sortable')
            });

            mediator.on('attribute:auto_option_sorting:changed', function (autoSorting) {
                itemCollectionView.updateSortableStatus(!autoSorting);
            }.bind(this));
        };
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 506 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/pim-currencyfield.js ***!
  \******************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1), __webpack_require__(/*! backbone */ 2), __webpack_require__(/*! underscore */ 0), __webpack_require__(/*! oro/mediator */ 6), __webpack_require__(/*! bootstrap */ 23)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, Backbone, _, mediator) {
        'use strict';
        /**
         * Allow expanding/collapsing currency fields
         *
         * @author    Filips Alpe <filips@akeneo.com>
         * @copyright 2013 Akeneo SAS (http://www.akeneo.com)
         * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
         */

        return Backbone.View.extend({
            fieldSelector:   '.currency-field[data-metadata]',
            expandIcon:      'icon-caret-right',
            collapseIcon:    'icon-caret-down',
            first:           true,
            expanded:        true,
            currencies:      null,
            scopable:        false,
            inputClass:      'input-small',
            smallInputClass: 'input-mini',
            inputThreshold:  3,

            currencyTemplate: _.template(
                '<span class="currency-header<%= small ? " small" : "" %>">' +
                    '<% _.each(currencies, function (currency) { %>' +
                        '<span class="currency-label"><%= currency %></span>' +
                    '<% }); %>' +
                '</span>'
            ),

            template: _.template(
                '<% _.each(data, function (item) { %>' +
                    '<% _.each(currencies, function (currency, index) { %>' +
                        '<% if (item.label === currency) { %>' +
                            '<% if (scopable && index === 0) { %>' +
                                '<label class="control-label add-on" title="<%= item.scope %>">' +
                                    '<%= item.scope[0].toUpperCase() %>' +
                                '</label>' +
                                '<div class="scopable-input">' +
                            '<% } %>' +
                            '<input type="hidden" id="<%= item.currency.fieldId %>" ' +
                                'name="<%= item.currency.fieldName %>" value="<%= item.currency.data %>"' +
                                '<%= item.currency.disabled ? " disabled" : "" %> >' +
                            '<input type="text" class="<%= inputClass %>" id="<%= item.value.fieldId %>"' +
                                'name="<%= item.value.fieldName %>" value="<%= item.value.data %>"' +
                                '<% if (!scopable && index === 0) { %>' +
                                    ' style="border-top-left-radius:3px;border-bottom-left-radius:3px;"' +
                                '<% } %>' +
                                '<%= item.value.disabled ? " disabled" : "" %> >' +
                            '<% if (scopable && index + 1 === currencies.length) { %>' +
                                '</div>' +
                            '<% } %>' +
                        '<% } %>' +
                    '<% }); %>' +
                '<% }); %>'
            ),

            events: {
                'click label i.field-toggle': '_toggle'
            },

            initialize: function () {
                this._extractMetadata();
                this.render();

                if (this.scopable) {
                    mediator.on('scopablefield:changescope', function (scope) {
                        this._changeDefault(scope);
                    }.bind(this));

                    mediator.on('scopablefield:collapse', function (id) {
                        if (!id || this.$el.find('#' + id).length) {
                            this._collapse();
                        }
                    }.bind(this));

                    mediator.on('scopablefield:expand', function (id) {
                        if (!id || this.$el.find('#' + id).length) {
                            this._expand();
                        }
                    }.bind(this));
                }
            },

            _extractMetadata: function () {
                this.scopable = this.$el.hasClass('scopable');
                var currencies = [];

                this.$el.find(this.fieldSelector).each(function () {
                    var metadata = $(this).data('metadata');
                    currencies.push(metadata.label);
                });

                this.currencies = _.uniq(currencies);
            },

            _renderTarget: function (index, target) {
                var $target = $(target);
                var data = [];

                var extractScope = this.scopable;

                $target.find(this.fieldSelector).each(function () {
                    var metadata = $(this).data('metadata');
                    if (extractScope) {
                        metadata.scope = $(this).parent().parent().parent().data('scope');
                    }
                    data.push(metadata);
                });

                $target.empty();
                $target.prepend(
                    this.template({
                        currencies:   this.currencies,
                        data:         data,
                        scopable:     this.scopable,
                        first:        this.first,
                        collapseIcon: this.collapseIcon,
                        inputClass:   this.currencies.length > this.inputThreshold ?
                                        this.smallInputClass : this.inputClass
                    })
                );

                if (this.first) {
                    $target.parent().parent().addClass('first');
                    this.first = false;
                }
            },

            render: function () {
                this.$el.addClass('control-group').find('.control-group.hide').removeClass('hide');

                var $label = this.$el.find('label.control-label:first').prependTo(this.$el);
                this.$el.find('label.control-label:not(:first)').remove();

                var $fields = this.$el.find('div[data-scope]');

                if (this.scopable && $fields.length > 1) {
                    var $toggleIcon = $('<i>', { 'class': 'field-toggle ' + this.collapseIcon });
                    $label.prepend($toggleIcon);
                }

                $fields.each(function () {
                    var $parent = $(this).parent();
                    $(this).insertBefore($parent);
                    $parent.remove();
                });

                if (this.scopable) {
                    this.$el.find('div.controls').addClass('input-prepend');
                }

                var $header = $(this.currencyTemplate({
                    currencies: this.currencies,
                    scopable:   this.scopable,
                    small:      this.currencies.length > this.inputThreshold
                }));
                $header.insertAfter($label);
                var $iconsContainer = this.$el.find('.icons-container:first');
                $iconsContainer.insertAfter($header);

                _.each(this.$el.find('.validation-tooltip'), function (tooltip) {
                    $(tooltip).appendTo($iconsContainer);
                });

                var $targets = this.$el.find('div.controls');

                $targets.each(this._renderTarget.bind(this));

                if (this.scopable) {
                    $iconsContainer.appendTo(this.$el.find('div.first .scopable-input'));
                    this._collapse();
                    mediator.trigger('scopablefield:rendered', this.$el);
                } else {
                    $iconsContainer.appendTo(this.$el.find('.controls'));
                }

                return this;
            },

            _expand: function () {
                if (!this.expanded) {
                    this.expanded = true;

                    this.$el.find('div[data-scope]').removeClass('hide');
                    this.$el.find('i.field-toggle').removeClass(this.expandIcon).addClass(this.collapseIcon);
                    this.$el.removeClass('collapsed').addClass('expanded').trigger('expand');
                }

                return this;
            },

            _collapse: function () {
                if (this.expanded) {
                    this.expanded = false;

                    this.$el.find('div[data-scope]:not(:first)').addClass('hide');
                    this.$el.find('i.field-toggle').removeClass(this.collapseIcon).addClass(this.expandIcon);
                    this.$el.removeClass('expanded').addClass('collapsed').trigger('collapse');
                }

                return this;
            },

            _toggle: function (e) {
                if (e) {
                    e.preventDefault();
                }

                return this.expanded ? this._collapse() : this._expand();
            },

            _changeDefault: function (scope) {
                var $fields = this.$el.find('>div[data-scope]');
                this.$el.find('.first').removeClass('first');
                var $firstField = $fields.filter('[data-scope="' + scope + '"]');

                $firstField.addClass('first').insertBefore($fields.eq(0));

                if (this.scopable) {
                    var $iconsContainer = this.$el.find('.icons-container:first');
                    $iconsContainer.appendTo(this.$el.find('div.first .scopable-input'));
                }

                this._toggle();
                this._toggle();

                return this;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 507 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/pim-item-tableview.js ***!
  \*******************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1), __webpack_require__(/*! underscore */ 0), __webpack_require__(/*! backbone */ 2), __webpack_require__(/*! oro/translator */ 3), __webpack_require__(/*! routing */ 4), __webpack_require__(/*! oro/mediator */ 6), __webpack_require__(/*! oro/loading-mask */ 18), __webpack_require__(/*! pim/dialog */ 14)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, Backbone, __, Routing, mediator, LoadingMask, Dialog) {
        'use strict';

        return Backbone.View.extend({
            tagName: 'table',
            template: '',
            events: {},
            $target: null,
            itemViews: [],
            url: '',
            collectionClass: null,
            itemClass: null,
            itemViewClass: null,
            rendered: false,
            initialize: function (options) {
                this.$target         = options.$target;
                this.collectionClass = options.collectionClass;
                this.itemClass       = options.itemClass;
                this.itemViewClass   = options.itemViewClass;
                this.url             = options.url;
                this.collection      = new this.collectionClass({url: options.url});
                this.render();

                this.load();
            },
            render: function () {
                this.$el.empty();
                this.$el.html(this.renderTemplate());

                _.each(this.collection.models, function (ruleItem) {
                    this.addItem({item: ruleItem});
                }.bind(this));

                if (!this.rendered) {
                    this.$target.html(this.$el);

                    this.rendered = true;
                }

                return this;
            },
            renderTemplate: function () {
                return this.template({});
            },
            load: function () {
                this.itemViews = [];
                this.inLoading(true);
                this.collection
                    .fetch({
                        success: function () {
                            this.inLoading(false);
                            this.render();
                        }.bind(this)
                    });
            },
            addItem: function (opts) {
                var options = opts || {};

                var newItemView = this.createItemView(options.item);

                if (newItemView) {
                    this.$el.children('tbody').append(newItemView.$el);
                }
            },
            createItemView: function (item) {
                var itemView = new this.itemViewClass({
                    model:    item,
                    parent:   this
                });

                itemView.showReadableItem();

                this.collection.add(item);
                this.itemViews.push(itemView);

                return itemView;
            },
            deleteItem: function (item) {
                this.inLoading(true);

                item.model.destroy({
                    success: function () {
                        this.inLoading(false);

                        this.collection.remove(item);

                        if (0 === this.collection.length) {
                            this.render();
                            item.$el.hide(0);
                        } else if (!item.model.id) {
                            item.$el.hide(0);
                        } else {
                            item.$el.hide(500);
                        }
                    }.bind(this),
                    error: function (data, response) {
                        this.inLoading(false);
                        var message;

                        if (response.responseJSON) {
                            message = response.responseJSON;
                        } else {
                            message = response.responseText;
                        }

                        Dialog.alert(message, __('pim_enrich.item.list.delete.error'));
                    }.bind(this)
                });
            },
            inLoading: function (loading) {
                if (loading) {
                    var loadingMask = new LoadingMask();
                    loadingMask.render().$el.appendTo(this.$el);
                    loadingMask.show();
                } else {
                    this.$el.find('.loading-mask').remove();
                }
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));



/***/ }),
/* 508 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/pim-item-view.js ***!
  \**************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! backbone */ 2), __webpack_require__(/*! underscore */ 0), __webpack_require__(/*! oro/translator */ 3), __webpack_require__(/*! pim/dialog */ 14)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Backbone, _, __, Dialog) {
        'use strict';

        return Backbone.View.extend({
            tagName: 'tr',
            template: '',
            itemName: 'item',
            events: {
                'click .delete-row': 'deleteItem'
            },
            parent: null,
            loading: false,
            initialize: function (options) {
                this.parent    = options.parent;
                this.model.rootUrl = this.parent.url;

                this.render();
            },
            render: function () {
                this.$el.html(this.renderTemplate());

                this.$el.attr('data-item-id', this.model.id);

                return this;
            },
            renderTemplate: function () {
                return this.template({});
            },
            showReadableItem: function () {
                this.render();
            },
            deleteItem: function () {
                Dialog.confirm(
                    __('pim_enrich.item.delete.confirm.content', {'itemName': this.itemName}),
                    __('pim_enrich.item.delete.confirm.title', {'itemName': this.itemName}),
                    function () {
                        this.parent.deleteItem(this);
                    }.bind(this)
                );
            },
            inLoading: function (loading) {
                this.parent.inLoading(loading);
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 509 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/pim-popinform.js ***!
  \**************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1), __webpack_require__(/*! underscore */ 0), __webpack_require__(/*! backbone */ 2), __webpack_require__(/*! jquery.multiselect */ 177), __webpack_require__(/*! jquery.multiselect.filter */ 176)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, Backbone) {
        'use strict';

        return function (elementId) {
            var $el = $('#' + elementId);
            if (!$el || !$el.length || !_.isObject($el)) {
                throw new Error('Unable to instantiate available attributes form on this element');
            }

            var classes = 'pimmultiselect pimmultiselect_' + elementId;
            if (!_.isUndefined($el.attr('data-classes'))) {
                classes = classes + ' ' + $el.attr('data-classes');
            }

            var opts = {
                title: $el.attr('data-title'),
                placeholder: $el.attr('data-placeholder'),
                emptyText: $el.attr('data-empty-text'),
                header: '',
                height: 175,
                minWidth: 225,
                classes: classes,
                position: {
                    my: 'right top',
                    at: 'right bottom',
                    collision: 'none'
                }
            };
            opts.selectedText = opts.title;
            opts.noneSelectedText = opts.title;

            var $select = $el.find('select');

            $select.multiselect(opts).multiselectfilter({
                label: false,
                placeholder: opts.placeholder
            });

            var $menu = $('.ui-multiselect-menu.pimmultiselect_' + elementId).appendTo($('#container'));
            var saveButton = $el.attr('data-save-button');
            var target = $el.attr('data-target');

            var footerContainer = $('<div>').addClass('ui-multiselect-footer').appendTo($menu);
            var $saveButton = $('<a>').addClass('btn btn-small').html(saveButton).on('click', function () {
                $select.multiselect('close');
                if ($select.val() !== null) {
                    Backbone.Router.prototype.trigger('route');
                    $el.submit();
                }
            }).appendTo(footerContainer);

            var $openButton = $el.find('button.pimmultiselect').addClass('btn btn-group');
            $openButton.append($('<span>', { 'class': 'caret' })).removeAttr('style');
            if (target) {
                $openButton.prependTo($(target));
            }

            $menu.find('input[type="search"]').width(207);

            var $content = $menu.find('.ui-multiselect-checkboxes');
            if (!$content.html()) {
                $content.html(
                    $('<span>', { html: opts.emptyText, css: {
                        'position': 'absolute',
                        'color': '#999',
                        'padding': '15px',
                        'font-size': '13px'
                    }})
                );
                $saveButton.addClass('disabled');
            }
        };
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 510 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/pim-scopable.js ***!
  \*************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! wysiwyg */ 57),
        __webpack_require__(/*! pim/optionform */ 340),
        __webpack_require__(/*! pim/fileinput */ 371),
        __webpack_require__(/*! bootstrap */ 23),
        __webpack_require__(/*! bootstrap.bootstrapswitch */ 45),
        __webpack_require__(/*! jquery.select2 */ 29)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, Backbone, _, mediator, wysiwyg, optionform, fileinput) {
        'use strict';
        /**
         * Allow expanding/collapsing scopable fields
         *
         * @author    Filips Alpe <filips@akeneo.com>
         * @copyright 2013 Akeneo SAS (http://www.akeneo.com)
         * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
         */
        var ScopableField = Backbone.View.extend({
            field:    null,
            rendered: false,
            isMetric: false,

            template: _.template(
                '<%= field.hiddenInput %>' +
                '<div class="control-group">' +
                    '<div class="controls input-prepend<%= isMetric ? " metric input-append" : "" %>">' +
                        '<label class="control-label add-on" for="<%= field.id %>" title="<%= field.scope %>">' +
                            '<%= field.scope[0].toUpperCase() %>' +
                        '</label>' +
                        '<div class="scopable-input">' +
                            '<%= field.input %>' +
                            '<div class="icons-container">' +
                                '<%= field.icons %>' +
                            '</div>' +
                        '</div>' +
                    '</div>' +
                '</div>'
            ),

            initialize: function () {
                var field = {};

                if (this.$el.find('.upload-zone').length) {
                    field.id = null;
                    field.input = this.$el.find('.upload-zone').get(0).outerHTML;
                } else if (this.$el.find('.switch').length) {
                    var $original = this.$el.find('.switch');
                    var $wrap = $original.clone().empty().removeClass('has-switch');
                    var $input = $original.find('input');

                    field.id = $input.attr('id');
                    $input.appendTo($wrap);

                    field.input = $wrap.get(0).outerHTML;
                } else if (this.$el.find('.control-label')) {
                    field.id = this.$el.find('.control-label').attr('for');

                    var $field = $('#' + field.id);

                    if ($field.hasClass('select2-input') || $field.hasClass('select2-focusser')) {
                        var id = $field.closest('.select2-container').attr('id');
                        if (/^s2id_.+/.test(id)) {
                            id = id.slice(5);
                            field.id = id;
                            $field = $('#' + id);
                        }
                        $field.select2('destroy');
                    }

                    field.input = $field.get(0).outerHTML;

                    _.each($field.siblings('input, select'), function (el) {
                        field.input += el.outerHTML;
                    });

                    if (this.$el.find('.controls.metric').length) {
                        this.isMetric = true;
                    }

                    if ($field.siblings('a.add-attribute-option').length) {
                        field.input += $field.siblings('a.add-attribute-option').get(0).outerHTML;
                    }

                    _.each($field.siblings('.validation-tooltip'), function (icon) {
                        $(icon).appendTo(this.$el.find('.icons-container'));
                    }.bind(this));
                }

                field.scope       = this.$el.data('scope');
                field.hiddenInput = this.$el.find('input[type="hidden"]').get(0).outerHTML;
                field.icons       = this.$el.find('.icons-container').html();

                this.field = field;
            },

            render: function () {
                if (!this.rendered) {
                    this.rendered = true;
                    this.$el.empty();
                    this.$el.append(
                        this.template({
                            field:    this.field,
                            isMetric: this.isMetric
                        })
                    );

                    this.$el.find('[data-toggle="tooltip"]').tooltip();
                    this.$el.find('.switch').bootstrapSwitch();
                    this.$el.find('select').select2();
                }

                return this;
            }
        });

        return Backbone.View.extend({
            label:        null,
            fieldViews:   [],
            fields:       [],
            expanded:     true,
            rendered:     false,
            expandIcon:   'icon-caret-right',
            collapseIcon: 'icon-caret-down',

            skipUIInit: false,

            template: _.template(
                '<%= label %>'
            ),

            initialize: function (opts) {
                var options = opts || {};
                this.fieldViews = [];
                this.fields     = [];
                this.expanded   = true;
                this.rendered   = false;

                this._reindexFields();

                _.each(this.fields, function ($field) {
                    this._addField($field);
                }.bind(this));

                this.label = this.$el.find('.control-label').first().get(0).outerHTML;

                this.render();

                if (_.has(options, 'initialScope')) {
                    this._changeDefault(options.initialScope);
                }

                mediator.on('scopablefield:changescope', function (scope) {
                    this._changeDefault(scope);
                }.bind(this));

                mediator.on('scopablefield:collapse', function (id) {
                    if (!id || this.$el.find('#' + id).length) {
                        this._collapse();
                    }
                }.bind(this));

                mediator.on('scopablefield:expand', function (id) {
                    if (!id || this.$el.find('#' + id).length) {
                        this._expand();
                    }
                }.bind(this));

                var self = this;
                this.$el.closest('form').on('validate', function () {
                    if (self.$el.find('.validation-tooltip:hidden').length) {
                        self._expand();
                    }
                });
            },

            render: function () {
                if (!this.rendered) {
                    this.rendered = true;
                    this.$el.empty().addClass('control-group');
                    this.$el.append(
                        this.template({
                            label: this.label
                        })
                    );

                    if (this.fieldViews.length > 1) {
                        var $toggleIcon = $('<i>', { 'class': 'field-toggle ' + this.collapseIcon });
                        this.$el.find('label').removeAttr('for').prepend($toggleIcon);
                    }

                    _.each(this.fieldViews, function (fieldView) {
                        fieldView.render().$el.appendTo(this.$el);
                    }.bind(this));

                    this._collapse();

                    var $optionLink = this.$el.find('a.add-attribute-option');
                    if ($optionLink.length) {
                        optionform.init('#' + $optionLink.attr('id'));
                    }

                    mediator.trigger('scopablefield:rendered', this.$el);
                }

                return this;
            },

            _addField: function ($field) {
                this.fieldViews.push(new ScopableField({ el: $field }));

                return this;
            },

            _expand: function () {
                if (!this.expanded) {
                    this.expanded = true;

                    this._reindexFields();

                    var first = true;
                    _.each(this.fields, function (field) {
                        this._showField(field, first);
                        first = false;
                    }.bind(this));

                    this._initUI();
                    this.$el.find('i.field-toggle').removeClass(this.expandIcon).addClass(this.collapseIcon);
                    this.$el.removeClass('collapsed').addClass('expanded').trigger('expand');
                }

                return this;
            },

            _collapse: function () {
                if (this.expanded) {
                    this.expanded = false;

                    this._reindexFields();

                    var first = true;
                    _.each(this.fields, function (field) {
                        if (first) {
                            this._showField(field, first);
                            first = false;
                        } else {
                            this._hideField(field);
                        }
                    }.bind(this));

                    this._initUI();
                    this.$el.find('i.field-toggle').removeClass(this.collapseIcon).addClass(this.expandIcon);
                    this.$el.removeClass('expanded').addClass('collapsed').trigger('collapse');
                }

                return this;
            },

            _refreshFieldsDisplay: function () {
                _.each(this.fields, function ($field) {
                    if (this.expanded || $field.hasClass('first')) {
                        this._showField($field);
                    } else {
                        this._hideField($field);
                    }
                }.bind(this));
            },

            _toggle: function (e) {
                if (e) {
                    e.preventDefault();
                }

                return this.expanded ? this._collapse() : this._expand();
            },

            _changeDefault: function (scope) {
                this.skipUIInit = true;
                this._toggle();
                this._setFieldFirst(this.$el.find('[data-scope="' + scope + '"]:first'));
                this._refreshFieldsDisplay();
                this._initUI();

                return this;
            },

            _reindexFields: function () {
                this.fields = _.map(this.$el.find('[data-scope]'), function (field) {
                    return $(field);
                });

                if (this.$el.find('[data-scope]').length) {
                    _.first(this.fields).addClass('first');
                }
            },

            _setFieldFirst: function ($field) {
                this.$el.find('[data-scope]').removeClass('first');
                $field.addClass('first');

                var $target = this.$el.find('>label');
                if ($target.length) {
                    $field.insertAfter($target);
                } else {
                    $field.prependTo(this.$el);
                }
            },

            _showField: function (field, first) {
                var $icons = $(field).find('.icons-container i:not(".validation-tooltip")');

                if (first) {
                    $(field).addClass('first');
                    $icons.attr('style', 'display: inline !important');
                    this._setFieldFirst(field);
                } else {
                    $(field).removeClass('first');
                    $icons.attr('style', 'display: none !important');
                }

                $(field).show();
            },

            _hideField: function (field) {
                $(field).hide();
            },

            _initUI: function () {
                if (!this.skipUIInit) {
                    _.each(this.fields, function ($field) {
                        var $textarea = $field.find('textarea.wysiwyg');
                        if ($textarea.length) {
                            wysiwyg.init($textarea);
                        }

                        var $fileInput = $field.find('input[type=file][id]');
                        if ($fileInput.length) {
                            fileinput.init($fileInput.attr('id'));
                        }
                    });
                }

                return this;
            },

            events: {
                'click label i.field-toggle': '_toggle'
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 511 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/create/form.js ***!
  \********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! pim/i18n */ 17),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! oro/loading-mask */ 18),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/initselect2 */ 30),
        __webpack_require__(/*! pim/template/product-create-popin */ 282),
        __webpack_require__(/*! pim/template/product-create-error */ 281),
        __webpack_require__(/*! jquery.select2 */ 29)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        Backbone,
        Routing,
        BaseForm,
        UserContext,
        i18n,
        __,
        LoadingMask,
        FetcherRegistry,
        initSelect2,
        template,
        errorTemplate
    ) {
        return BaseForm.extend({
            template: _.template(template),
            errorTemplate: _.template(errorTemplate),
            events: {
                'change input': 'updateModel'
            },
            validationErrors: {},

            /**
             * Configure the form
             *
             * @return {Promise}
             */
            configure: function () {
                return $.when(
                    FetcherRegistry.initialize(),
                    BaseForm.prototype.configure.apply(this, arguments)
                );
            },

            /**
             * Model update callback
             */
            updateModel: function () {
                this.getFormModel().set('identifier', this.$('[data-code="identifier"] input').val());
                this.getFormModel().set('family', this.$('[data-code="family"] input').select2('val'));
            },

            /**
             * Save the form content by posting it to backend
             *
             * @return {Promise}
             */
            save: function () {
                this.validationErrors = {};

                var loadingMask = new LoadingMask();
                this.$el.empty().append(loadingMask.render().$el.show());

                return $.post(Routing.generate('pim_enrich_product_rest_create'), this.getFormData())
                    .fail(function (response) {
                        this.validationErrors = response.responseJSON.values;
                        this.render();
                    }.bind(this))
                    .always(function () {
                        loadingMask.remove();
                    });
            },

            /**
             * Renders the form
             *
             * @return {Promise}
             */
            render: function () {
                if (!this.configured) {
                    return this;
                }

                return FetcherRegistry.getFetcher('attribute').getIdentifierAttribute()
                    .then(function (identifier) {
                        this.$el.html(
                            this.template({
                                identifier: identifier,
                                labels: {
                                    identifier: i18n.getLabel(
                                        identifier.labels,
                                        UserContext.get('catalogLocale'),
                                        identifier.code
                                    ),
                                    family: __('pim_enrich.entity.product.create_popin.labels.family')
                                },
                                errors: this.validationErrors,
                                __: __
                            })
                        );
                        this.initSelect2();

                        return this.renderExtensions();
                    }.bind(this), function () {
                        this.$el.html(
                            this.errorTemplate({
                                message: __('error.creating.product')
                            })
                        );
                    }.bind(this));
            },

            /**
             * Init select2 family field
             */
            initSelect2: function () {
                var options = {
                    allowClear: true,
                    ajax: {
                        url: Routing.generate('pim_enrich_family_rest_index'),
                        quietMillis: 250,
                        cache: true,
                        data: function (term, page) {
                            return {
                                search: term,
                                options: {
                                    limit: 20,
                                    page: page,
                                    locale: UserContext.get('catalogLocale')
                                }
                            };
                        },
                        results: function (families) {
                            var data = {
                                more: 20 === _.keys(families).length,
                                results: []
                            };
                            _.each(families, function (value, key) {
                                data.results.push({
                                    id: key,
                                    text: i18n.getLabel(value.labels, UserContext.get('catalogLocale'), value.code)
                                });
                            });

                            return data;
                        }
                    }
                };

                initSelect2.init(this.$('[data-code="family"] input'), options);
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 512 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/field/boolean-field.js ***!
  \****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Boolean field
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! pim/field */ 152), __webpack_require__(/*! underscore */ 0), __webpack_require__(/*! pim/template/product/field/boolean */ 284), __webpack_require__(/*! bootstrap.bootstrapswitch */ 45)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Field, _, fieldTemplate) {
    return Field.extend({
        fieldTemplate: _.template(fieldTemplate),
        events: {
            'change .field-input input[type="checkbox"]': 'updateModel'
        },
        renderInput: function (context) {
            return this.fieldTemplate(context);
        },
        postRender: function () {
            this.$('.switch').bootstrapSwitch();
        },
        updateModel: function () {
            var data = this.$('.field-input:first input[type="checkbox"]').prop('checked');

            this.setCurrentValue(data);
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 513 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/field/date-field.js ***!
  \*************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Date field
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! pim/field */ 152),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/template/product/field/date */ 285),
        __webpack_require__(/*! datepicker */ 161),
        __webpack_require__(/*! pim/date-context */ 160)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        Field,
        _,
        fieldTemplate,
        Datepicker,
        DateContext
    ) {
        return Field.extend({
            fieldTemplate: _.template(fieldTemplate),
            events: {
                'change .field-input:first input[type="text"]': 'updateModel',
                'click .field-input:first input[type="text"]': 'click'
            },
            datetimepickerOptions: {
                format: DateContext.get('date').format,
                defaultFormat: DateContext.get('date').defaultFormat,
                language: DateContext.get('language')
            },
            renderInput: function (context) {
                return this.fieldTemplate(context);
            },
            click: function () {
                Datepicker.init(this.$('.datetimepicker'), this.datetimepickerOptions).datetimepicker('show');

                this.$('.datetimepicker').on('changeDate', function (e) {
                    this.setCurrentValue(this.$(e.target).find('input[type="text"]').val());
                }.bind(this));
            },
            updateModel: function () {
                var data = this.$('.field-input:first input[type="text"]').val();
                data = '' === data ? this.attribute.empty_value : data;

                this.setCurrentValue(data);
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 514 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/field/media-field.js ***!
  \**************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Media field
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! pim/field */ 152),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! pim/attribute-manager */ 153),
        __webpack_require__(/*! pim/template/product/field/media */ 287),
        __webpack_require__(/*! pim/dialog */ 14),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! oro/messenger */ 16),
        __webpack_require__(/*! pim/media-url-generator */ 335),
        __webpack_require__(/*! jquery.slimbox */ 191)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, Field, _, Routing, AttributeManager, fieldTemplate, Dialog, mediator, messenger, MediaUrlGenerator) {
        return Field.extend({
            fieldTemplate: _.template(fieldTemplate),
            events: {
                'change .edit .field-input:first input[type="file"]': 'updateModel',
                'click  .clear-field': 'clearField',
                'click  .open-media': 'previewImage'
            },
            uploadContext: {},
            renderInput: function (context) {
                return this.fieldTemplate(context);
            },
            getTemplateContext: function () {
                return Field.prototype.getTemplateContext.apply(this, arguments)
                    .then(function (templateContext) {
                        templateContext.inUpload          = !this.isReady();
                        templateContext.mediaUrlGenerator = MediaUrlGenerator;

                        return templateContext;
                    }.bind(this));
            },

            renderCopyInput: function (value) {
                return this.getTemplateContext()
                    .then(function (context) {
                        var copyContext = $.extend(true, {}, context);
                        copyContext.value = value;
                        copyContext.context.locale    = value.locale;
                        copyContext.context.scope     = value.scope;
                        copyContext.editMode          = 'view';
                        copyContext.mediaUrlGenerator = MediaUrlGenerator;

                        return this.renderInput(copyContext);
                    }.bind(this));
            },
            updateModel: function () {
                if (!this.isReady()) {
                    Dialog.alert(_.__(
                        'pim_enrich.entity.product.info.already_in_upload',
                        {'locale': this.context.locale, 'scope': this.context.scope}
                    ));
                }

                var input = this.$('.edit .field-input:first input[type="file"]').get(0);
                if (!input || 0 === input.files.length) {
                    return;
                }

                var formData = new FormData();
                formData.append('file', input.files[0]);

                this.setReady(false);
                this.uploadContext = {
                    'locale': this.context.locale,
                    'scope':  this.context.scope
                };


                $.ajax({
                    url: Routing.generate('pim_enrich_media_rest_post'),
                    type: 'POST',
                    data: formData,
                    contentType: false,
                    cache: false,
                    processData: false,
                    xhr: function () {
                        var myXhr = $.ajaxSettings.xhr();
                        if (myXhr.upload) {
                            myXhr.upload.addEventListener('progress', this.handleProcess.bind(this), false);
                        }

                        return myXhr;
                    }.bind(this)
                })
                .done(function (data) {
                    this.setUploadContextValue(data);
                    this.render();
                }.bind(this))
                .fail(function (xhr) {
                    var message = xhr.responseJSON && xhr.responseJSON.message ?
                        xhr.responseJSON.message :
                        _.__('pim_enrich.entity.product.error.upload');
                    messenger.addFlashMessage('error', message);
                })
                .always(function () {
                    this.$('> .akeneo-media-uploader-field .progress').css({opacity: 0});
                    this.setReady(true);
                    this.uploadContext = {};
                }.bind(this));
            },
            clearField: function () {
                this.setCurrentValue({
                    filePath: null,
                    originalFilename: null
                });

                this.render();
            },
            handleProcess: function (e) {
                if (this.uploadContext.locale === this.context.locale &&
                    this.uploadContext.scope === this.context.scope
                ) {
                    this.$('> .akeneo-media-uploader-field .progress').css({opacity: 1});
                    this.$('> .akeneo-media-uploader-field .progress .bar').css({
                        width: ((e.loaded / e.total) * 100) + '%'
                    });
                }
            },
            previewImage: function () {
                var mediaUrl = MediaUrlGenerator.getMediaShowUrl(this.getCurrentValue().data.filePath, 'preview');
                if (mediaUrl) {
                    $.slimbox(mediaUrl, '', {overlayOpacity: 0.3});
                }
            },
            setUploadContextValue: function (value) {
                var productValue = AttributeManager.getValue(
                    this.model.get('values'),
                    this.attribute,
                    this.uploadContext.locale,
                    this.uploadContext.scope
                );

                productValue.data = value;
                mediator.trigger('pim_enrich:form:entity:update_state');
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 515 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/field/metric-field.js ***!
  \***************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Metric field
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(/*! jquery */ 1),
    __webpack_require__(/*! pim/field */ 152),
    __webpack_require__(/*! underscore */ 0),
    __webpack_require__(/*! pim/fetcher-registry */ 10),
    __webpack_require__(/*! pim/template/product/field/metric */ 288),
    __webpack_require__(/*! pim/initselect2 */ 30)
], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, Field, _, FetcherRegistry, fieldTemplate, initSelect2) {
    return Field.extend({
        fieldTemplate: _.template(fieldTemplate),
        events: {
            'change .field-input:first .data, .field-input:first .unit': 'updateModel'
        },
        renderInput: function (context) {
            var $element = $(this.fieldTemplate(context));
            initSelect2.init($element.find('.unit'));

            return $element;
        },
        getTemplateContext: function () {
            return $.when(
                Field.prototype.getTemplateContext.apply(this, arguments),
                FetcherRegistry.getFetcher('measure').fetchAll()
            ).then(function (templateContext, measures) {
                templateContext.measures = measures;

                return templateContext;
            });
        },
        setFocus: function () {
            this.$('.data:first').focus();
        },
        updateModel: function () {
            var amount = this.$('.field-input:first .data').val();
            var unit = this.$('.field-input:first .unit').select2('val');

            this.setCurrentValue({
                unit: '' !== unit ? unit : this.attribute.default_metric_unit,
                amount: '' !== amount ? amount : null
            });
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 516 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/field/number-field.js ***!
  \***************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Number field
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! pim/field */ 152),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/template/product/field/number */ 290)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        Field,
        _,
        fieldTemplate
    ) {
        return Field.extend({
            fieldTemplate: _.template(fieldTemplate),
            events: {
                'change .field-input:first input[type="text"]': 'updateModel'
            },
            renderInput: function (context) {
                return this.fieldTemplate(context);
            },
            updateModel: function () {
                var data = this.$('.field-input:first input[type="text"]').val();

                if ('' === data) {
                    data = this.attribute.empty_value;
                }

                this.setCurrentValue(data);
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 517 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/field/price-collection-field.js ***!
  \*************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Price collection field
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! pim/field */ 152),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/template/product/field/price-collection */ 291)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, Field, _, FetcherRegistry, fieldTemplate) {
    return Field.extend({
        fieldTemplate: _.template(fieldTemplate),
        events: {
            'change .field-input:first input[type="text"]': 'updateModel'
        },
        renderInput: function (context) {
            context.value.data = _.sortBy(context.value.data, 'currency');

            return this.fieldTemplate(context);
        },
        updateModel: function () {
            var prices = [];
            var inputs = this.$('.field-input:first .price-input input');
            _.each(inputs, function (input) {
                var $input = $(input);
                var inputData = $input.val();
                prices.push({
                    amount: '' === inputData ? null : inputData,
                    currency: $input.data('currency')
                });
            }.bind(this));

            this.setCurrentValue(_.sortBy(prices, 'currency'));
        },
        getTemplateContext: function () {
            return $.when(
                Field.prototype.getTemplateContext.apply(this, arguments),
                FetcherRegistry.getFetcher('currency').fetchAll()
            ).then(function (templateContext, currencies) {
                templateContext.currencies = currencies;

                return templateContext;
            });
        },
        setFocus: function () {
            this.$('input[type="text"]:first').focus();
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 518 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/field/text-field.js ***!
  \*************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Text field
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! pim/field */ 152),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/template/product/field/text */ 293)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        Field,
        _,
        fieldTemplate
    ) {
        return Field.extend({
            fieldTemplate: _.template(fieldTemplate),
            events: {
                'change .field-input:first input[type="text"]': 'updateModel'
            },
            renderInput: function (context) {
                return this.fieldTemplate(context);
            },
            updateModel: function () {
                var data = this.$('.field-input:first input[type="text"]').val();
                data = '' === data ? this.attribute.empty_value : data;

                this.setCurrentValue(data);
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 519 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/field/textarea-field.js ***!
  \*****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Textarea field
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! pim/field */ 152),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/template/product/field/textarea */ 173)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        Field,
        _,
        fieldTemplate
    ) {
        return Field.extend({
            fieldTemplate: _.template(fieldTemplate),
            events: {
                'change .field-input:first textarea': 'updateModel'
            },

            /**
             * @inheritDoc
             */
            renderInput: function (context) {
                return this.fieldTemplate(context);
            },

            /**
             * @inheritDoc
             */
            updateModel: function () {
                var data = this.$('.field-input:first textarea:first').val();
                data = '' === data ? this.attribute.empty_value : data;

                this.setCurrentValue(data);
            },

            /**
             * @inheritDoc
             */
            setFocus: function () {
                this.$('.field-input:first textarea').focus();
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 520 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/field/wysiwyg-field.js ***!
  \****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Wysiwyg field
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! pim/field */ 152),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/template/product/field/textarea */ 173),
        __webpack_require__(/*! summernote */ 131)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        Field,
        _,
        fieldTemplate
    ) {
        return Field.extend({
            fieldTemplate: _.template(fieldTemplate),
            events: {
                'change .field-input:first textarea:first': 'updateModel'
            },

            /**
             * @inheritDoc
             */
            renderInput: function (context) {
                return this.fieldTemplate(context);
            },

            /**
             * @inheritDoc
             */
            postRender: function () {
                this.$('textarea').summernote({
                    disableResizeEditor: true,
                    height: 200,
                    iconPrefix: 'icon-',
                    toolbar: [
                        ['font', ['bold', 'italic', 'underline', 'clear']],
                        ['para', ['ul', 'ol']],
                        ['insert', ['link']],
                        ['view', ['codeview']]
                    ]
                }).on('summernote.blur', this.updateModel.bind(this));
            },

            /**
             * @inheritDoc
             */
            updateModel: function () {
                var data = this.$('.field-input:first textarea:first').code();
                data = '' === data ? this.attribute.empty_value : data;

                this.setCurrentValue(data);
            },

            /**
             * @inheritDoc
             */
            setFocus: function () {
                this.$('.field-input:first .note-editable').trigger('focus');
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 521 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/form/associations.js ***!
  \**************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Association tab extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/product/tab/associations */ 309),
        __webpack_require__(/*! pim/template/product/tab/association-panes */ 308),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/attribute-manager */ 153),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! oro/datagrid-builder */ 53),
        __webpack_require__(/*! oro/pageable-collection */ 24),
        __webpack_require__(/*! pim/datagrid/state */ 44)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        Backbone,
        BaseForm,
        formTemplate,
        panesTemplate,
        FetcherRegistry,
        AttributeManager,
        UserContext,
        Routing,
        mediator,
        datagridBuilder,
        PageableCollection,
        DatagridState
    ) {
        var state = {};

        return BaseForm.extend({
            template: _.template(formTemplate),
            panesTemplate: _.template(panesTemplate),
            className: 'tab-pane active product-associations',
            events: {
                'click .associations-list li': 'changeAssociationType',
                'click .AknTabHeader .target-button': 'changeAssociationTargets'
            },
            initialize: function () {
                state = {
                    associationTarget: 'products'
                };

                this.datagrids = {
                    products: {
                        name: 'association-product-grid',
                        getInitialParams: function (associationType) {
                            var params = {
                                product: this.getFormData().meta.id
                            };
                            var paramValue = this.datagrids.products.getParamValue(associationType);
                            params[this.datagrids.products.paramName] = paramValue;
                            params.dataLocale = UserContext.get('catalogLocale');

                            return params;
                        }.bind(this),
                        paramName: 'associationType',
                        getParamValue: function (associationType) {
                            return _.findWhere(state.associationTypes, {code: associationType}).id;
                        }.bind(this),
                        getModelIdentifier: function (model, identifierAttribute) {
                            return model.get(identifierAttribute.code);
                        }
                    },
                    groups: {
                        name: 'association-group-grid',
                        getInitialParams: function (associationType) {
                            var params = {};
                            params[this.paramName] = this.getParamValue(associationType);

                            return params;
                        },
                        paramName: 'associatedIds',
                        getParamValue: function (associationType) {
                            var associations = this.getFormData().meta.associations;

                            return associations[associationType] ? associations[associationType].groupIds : [];
                        }.bind(this),
                        getModelIdentifier: function (model) {
                            return model.get('code');
                        }
                    }
                };

                BaseForm.prototype.initialize.apply(this, arguments);
            },
            configure: function () {
                this.trigger('tab:register', {
                    code: this.code,
                    isVisible: this.isVisible.bind(this),
                    label: _.__('pim_enrich.form.product.tab.associations.title')
                });

                _.each(this.datagrids, function (datagrid) {
                    mediator.clear('datagrid:selectModel:' + datagrid.name);
                    mediator.on('datagrid:selectModel:' + datagrid.name, function (model) {
                        this.selectModel(model, datagrid);
                    }.bind(this));

                    mediator.clear('datagrid:unselectModel:' + datagrid.name);
                    mediator.on('datagrid:unselectModel:' + datagrid.name, function (model) {
                        this.unselectModel(model, datagrid);
                    }.bind(this));
                }.bind(this));

                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:post_update', this.postUpdate.bind(this));

                return BaseForm.prototype.configure.apply(this, arguments);
            },
            render: function () {
                if (!this.configured || this.code !== this.getParent().getCurrentTab()) {
                    return;
                }

                $.when(
                    this.loadAssociationTypes(),
                    FetcherRegistry.getFetcher('attribute').getIdentifierAttribute()
                ).then(function (associationTypes, identifierAttribute) {
                    var currentAssociationType = associationTypes.length ? _.first(associationTypes).code : null;

                    if (null === this.getCurrentAssociationType()) {
                        this.setCurrentAssociationType(currentAssociationType);
                    }

                    state.currentAssociationType = currentAssociationType;
                    state.associationTypes       = associationTypes;
                    this.identifierAttribute     = identifierAttribute;

                    this.$el.html(
                        this.template({
                            product: this.getFormData(),
                            locale: UserContext.get('catalogLocale'),
                            associationTypes: associationTypes,
                            currentAssociationTarget: this.getCurrentAssociationTarget(),
                            currentAssociationType: this.getCurrentAssociationType()
                        })
                    );
                    this.renderPanes();

                    if (associationTypes.length) {
                        var currentGrid = this.datagrids[this.getCurrentAssociationTarget()];
                        this.renderGrid(
                            currentGrid.name,
                            currentGrid.getInitialParams(this.getCurrentAssociationType())
                        );
                        this.setListenerSelectors();
                    }

                    this.delegateEvents();
                }.bind(this));

                return this;
            },
            renderPanes: function () {
                this.loadAssociationTypes().then(function (associationTypes) {
                    this.setAssociationCount(associationTypes);
                    this.$('.tab-content > .association-type').remove();
                    this.$('.tab-content').prepend(
                        this.panesTemplate({
                            locale: UserContext.get('catalogLocale'),
                            associationTypes: associationTypes,
                            currentAssociationType: this.getCurrentAssociationType(),
                            currentAssociationTarget: this.getCurrentAssociationTarget()
                        })
                    );
                }.bind(this));
            },
            postUpdate: function () {
                if (this.isVisible()) {
                    this.$('.selection-inputs input').val('');
                    state.selectedAssociations = {};
                    this.render();
                }
            },

            /**
             * @param {string} associationType
             */
            setCurrentAssociationType: function (associationType) {
                sessionStorage.setItem('current_association_type', associationType);
            },

            /**
             * @returns {string}
             */
            getCurrentAssociationType: function () {
                return sessionStorage.getItem('current_association_type');
            },

            /**
             * @param {string} associationTarget
             */
            setCurrentAssociationTarget: function (associationTarget) {
                sessionStorage.setItem('current_association_target', associationTarget);
            },

            /**
             * @returns {string}
             */
            getCurrentAssociationTarget: function () {
                return sessionStorage.getItem('current_association_target') || 'products';
            },

            loadAssociationTypes: function () {
                return FetcherRegistry.getFetcher('association-type').fetchAll();
            },
            setAssociationCount: function (associationTypes) {
                var associations = this.getFormData().associations;

                _.each(associationTypes, function (assocType) {
                    var association = associations[assocType.code];

                    assocType.productCount = association && association.products ? association.products.length : 0;
                    assocType.groupCount = association && association.groups ? association.groups.length : 0;
                });
            },
            changeAssociationType: function (event) {
                event.preventDefault();
                var associationType = event.currentTarget.dataset.associationType;
                this.setCurrentAssociationType(associationType);

                $(event.currentTarget)
                    .addClass('active AknVerticalNavtab-item--active')
                    .siblings('.active.AknVerticalNavtab-item--active')
                    .removeClass('active AknVerticalNavtab-item--active');

                this.$('.AknTitleContainer.association-type[data-association-type="' + associationType + '"]')
                    .removeClass('AknTitleContainer--hidden')
                    .siblings('.AknTitleContainer.association-type:not(.AknTitleContainer--hidden)')
                    .addClass('AknTitleContainer--hidden');

                this.renderPanes();
                this.updateListenerSelectors();

                var currentGrid = this.datagrids[this.getCurrentAssociationTarget()];
                mediator
                    .trigger(
                        'datagrid:setParam:' + currentGrid.name,
                        currentGrid.paramName,
                        currentGrid.getParamValue(associationType)
                    )
                    .trigger('datagrid:doRefresh:' + currentGrid.name);
            },
            changeAssociationTargets: function (event) {
                var associationTarget = event.currentTarget.dataset.associationTarget;
                this.setCurrentAssociationTarget(associationTarget);

                _.each(this.datagrids, function (datagrid, gridType) {
                    var method = gridType === associationTarget ? 'removeClass' : 'addClass';
                    this.$('.' + datagrid.name)[method]('hide');
                }.bind(this));

                $(event.currentTarget)
                    .addClass('AknButton--hidden')
                    .siblings('.target-button')
                    .removeClass('AknButton--hidden');

                this.updateListenerSelectors();

                var currentGrid = this.datagrids[this.getCurrentAssociationTarget()];
                if (!this.isGridRendered(currentGrid)) {
                    this.renderGrid(
                        currentGrid.name,
                        currentGrid.getInitialParams(this.getCurrentAssociationType())
                    );
                    this.setListenerSelectors();
                }
            },
            renderGrid: function (gridName, params) {
                var urlParams    = params;
                urlParams.alias  = gridName;
                urlParams.params = _.clone(params);

                var datagridState = DatagridState.get(gridName, ['filters']);
                if (null !== datagridState.filters) {
                    var collection = new PageableCollection();
                    var filters    = collection.decodeStateData(datagridState.filters);

                    collection.processFiltersParams(urlParams, filters, gridName + '[_filter]');
                }

                $.get(Routing.generate('pim_datagrid_load', urlParams)).then(function (response) {
                    var metadata = response.metadata;
                    /* Next lines are related to PIM-6113 and need some comments.
                     *
                     * When you just saved a datagrid from the Product Edit Form, you will have an URL like
                     * '/association-group-grid?...&associatedIds[]=1&associatedIds[]=2', in reference of the last
                     * checked groups in the datagrid.
                     *
                     * The fact is that there is 2 places where these parameters are set: in the URL, and in the
                     * datagrid state (state.parameters.associatedIds).
                     *
                     * If you do not drop the params of the URL (containing associatedIds array), you will have
                     * a mix of 2 times the same variable, defined at 2 different places. This leads to a refreshed
                     * datagrid with wrong checkboxes.
                     *
                     * To prevent this behavior, we removed the parameters passed in the URL before rendering the
                     * grid, to only allow datagrid state parameters.
                     */
                    var queryParts = metadata.options.url.split('?');
                    var url = queryParts[0];
                    var queryString = decodeURIComponent(queryParts[1])
                        .replace(/&?association-group-grid\[associatedIds\]\[\d+\]=\d+/g, '')
                        .replace(/^&/, '');
                    metadata.options.url = url + '?' + queryString;

                    this.$('#grid-' + gridName).data({ metadata: metadata, data: JSON.parse(response.data) });

                    var gridModules = metadata.requireJSModules;
                    gridModules.push('pim/datagrid/state-listener');
                    !(function webpackMissingModule() { var e = new Error("Cannot find module \"unsupported\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())
                }.bind(this));
            },
            setListenerSelectors: function () {
                var gridNames = _.pluck(this.datagrids, 'name');

                mediator.on('column_form_listener:initialized', function onColumnListenerReady(gridName) {
                    gridNames = _.without(gridNames, gridName);
                    if (!gridNames.length) {
                        mediator.off('column_form_listener:initialized', onColumnListenerReady);

                        this.updateListenerSelectors();
                    }
                }.bind(this));
            },
            updateListenerSelectors: function () {
                var associationType      = this.getCurrentAssociationType();
                var selectedAssociations = state.selectedAssociations;

                _.each(this.datagrids, function (datagrid, gridType) {
                    var appendFieldId = ['#', associationType, '-', gridType, '-appendfield'].join('');
                    var removeFieldId = ['#', associationType, '-', gridType, '-removefield'].join('');

                    if (selectedAssociations &&
                        selectedAssociations[associationType] &&
                        selectedAssociations[associationType][gridType]
                    ) {
                        $(appendFieldId).val(selectedAssociations[associationType][gridType].select.join(','));
                        $(removeFieldId).val(selectedAssociations[associationType][gridType].unselect.join(','));
                    }

                    mediator.trigger(
                        'column_form_listener:set_selectors:' + datagrid.name,
                        { included: appendFieldId, excluded: removeFieldId }
                    );
                });
            },
            selectModel: function (model, datagrid) {
                var assocType           = this.getCurrentAssociationType();
                var assocTarget         = this.getDatagridTarget(datagrid);
                var currentAssociations = this.getCurrentAssociations(datagrid);

                currentAssociations.push(datagrid.getModelIdentifier(model, this.identifierAttribute));
                currentAssociations = _.uniq(currentAssociations);

                this.updateFormDataAssociations(currentAssociations, assocType, assocTarget);
                this.updateSelectedAssociations('select', datagrid, model.id);
            },
            unselectModel: function (model, datagrid) {
                var assocType           = this.getCurrentAssociationType();
                var assocTarget         = this.getDatagridTarget(datagrid);
                var currentAssociations = _.uniq(this.getCurrentAssociations(datagrid));

                var index = currentAssociations.indexOf(datagrid.getModelIdentifier(model, this.identifierAttribute));
                if (-1 !== index) {
                    currentAssociations.splice(index, 1);
                }

                this.updateFormDataAssociations(currentAssociations, assocType, assocTarget);
                this.updateSelectedAssociations('unselect', datagrid, model.id);
            },
            getCurrentAssociations: function (datagrid) {
                var assocType = this.getCurrentAssociationType();
                var assocTarget = this.getDatagridTarget(datagrid);
                var associations = this.getFormData().associations;

                return associations[assocType][assocTarget];
            },

            /**
             * Update the user session selection to be able to restore it if he switches tabs
             *
             * @param {string} action
             * @param {Object} datagrid
             * @param {string|int} id
             */
            updateSelectedAssociations: function (action, datagrid, id) {
                var assocType     = this.getCurrentAssociationType();
                var assocTarget   = this.getDatagridTarget(datagrid);
                var selectedAssoc = state.selectedAssociations || {};
                selectedAssoc[assocType] = selectedAssoc[assocType] || {};
                if (!selectedAssoc[assocType][assocTarget]) {
                    selectedAssoc[assocType][assocTarget] = {'select': [], 'unselect': []};
                }

                var revertAction = 'select' === action ? 'unselect' : 'select';
                var index = selectedAssoc[assocType][assocTarget][revertAction].indexOf(id);

                if (-1 < index) {
                    selectedAssoc[assocType][assocTarget][revertAction].splice(index, 1);
                } else {
                    selectedAssoc[assocType][assocTarget][action].push(id);
                    selectedAssoc[assocType][assocTarget][action] = _.uniq(
                        selectedAssoc[assocType][assocTarget][action]
                    );
                }

                state.selectedAssociations = selectedAssoc;

                this.getRoot().trigger('pim_enrich:form:entity:update_state');
            },

            /**
             * Update the form data (product) associations
             *
             * @param {Array} currentAssociations
             * @param {string} assocType
             * @param {string} assocTarget
             */
            updateFormDataAssociations: function (currentAssociations, assocType, assocTarget) {
                var modelAssociations = this.getFormData().associations;
                modelAssociations[assocType][assocTarget] = currentAssociations;
                modelAssociations[assocType][assocTarget].sort();

                this.setData({'associations': modelAssociations}, {silent: true});
            },

            /**
             * Return if the specified grid is already rendered
             *
             * @param {Object} grid
             *
             * @returns {boolean}
             */
            isGridRendered: function (grid) {
                return 0 < this.$('.grid-' + grid.name)
                    .find('[data-type="datagrid"][data-rendered="true"]')
                    .length;
            },

            /**
             * Get the given datagrid target (products or groups)
             *
             * @param {Object} datagrid
             *
             * @returns {string}
             */
            getDatagridTarget: function (datagrid) {
                var assocTarget = null;

                _.each(this.datagrids, function (grid, gridType) {
                    if (grid.name === datagrid.name) {
                        assocTarget = gridType;
                    }
                });

                return assocTarget;
            },

            /**
             * Check if this extension is visible
             *
             * @returns {boolean}
             */
            isVisible: function () {
                return true;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 522 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/form/attributes.js ***!
  \************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__; 
/**
 * Attribute tab extension for products
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! pim/form/common/attributes */ 182)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        Routing,
        Attributes
    ) {
        return Attributes.extend({

            /**
             * {@inheritdoc}
             */
            generateRemoveAttributeUrl: function (attribute) {
                return Routing.generate(
                    this.config.removeAttributeRoute,
                    {
                        id: this.getFormData().meta.id,
                        attributeId: attribute.id
                    }
                );
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 523 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/form/attributes/completeness.js ***!
  \*************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * completeness filter extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! pim/provider/to-fill-field-provider */ 186)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, BaseForm, fetcherRegistry, UserContext, toFillFieldProvider) {
        return BaseForm.extend({
            configure: function () {
                this.listenTo(this.getRoot(), 'pim_enrich:form:field:extension:add', this.addFieldExtension);
                this.listenTo(this.getRoot(), 'pim_enrich:form:field:to-fill-filter', this.addFieldFilter);

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * Add filter on field if the user doesn't have the right to edit it.
             *
             * @param {object} event
             */
            addFieldFilter: function (event) {
                event.filters.push($.Deferred().resolve({
                    completenesses: this.getFormData().meta.completenesses,
                    family: this.getFormData().family
                }).then(function (completenesses) {
                    if (null === completenesses.family) {
                        return $.Deferred().resolve([]);
                    }

                    var localeCompleteness = _.findWhere(
                        completenesses.completenesses,
                        {locale: UserContext.get('catalogLocale')}
                    );

                    if (undefined === localeCompleteness ||
                        undefined === localeCompleteness.channels[UserContext.get('catalogScope')]
                    ) {
                        return $.Deferred().resolve([]);
                    }

                    var missingAttributeCodes = _.pluck(
                        localeCompleteness.channels[UserContext.get('catalogScope')].missing,
                        'code'
                    );

                    return fetcherRegistry.getFetcher('attribute').fetchByIdentifiers(missingAttributeCodes);
                })
                .then(function (missingAttributes) {
                    return function (attributes) {
                        return _.filter(missingAttributes, function (missingAttribute) {
                            return _.contains(_.pluck(attributes, 'code'), missingAttribute.code);
                        });
                    };
                }));
            },

            /**
             * {@inheritDoc}
             */
            addFieldExtension: function (event) {
                event.promises.push(
                    toFillFieldProvider.getFields(this.getRoot(), this.getFormData()).then(function (fields) {
                        var field = event.field;

                        if (_.contains(fields, field.attribute.code)) {
                            field.addElement(
                                'badge',
                                'completeness',
                                '<span class="AknBadge AknBadge--round AknBadge--highlight"></span>'
                            );
                        }

                        return event;
                    }.bind(this))
                );

                return this;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 524 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/form/attributes/locale-specific.js ***!
  \****************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Locale specific field extension
 *
 * @author    Adrien Pétremann <adrien.petremann@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/form */ 149)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, BaseForm) {
        return BaseForm.extend({
            configure: function () {
                this.listenTo(this.getRoot(), 'pim_enrich:form:field:extension:add', this.addFieldExtension);

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * Add this field extension to the given field event
             *
             * @param {Object} event
             *
             * @returns {Promise}
             */
            addFieldExtension: function (event) {
                var field = event.field;

                if (!field.attribute.is_locale_specific) {
                    return;
                }

                if (!_.contains(field.attribute.available_locales, field.context.locale)) {
                    this.updateFieldElements(field);
                }

                return this;
            },

            /**
             * Update the given field by adding element to it
             *
             * @param {Object} field
             */
            updateFieldElements: function (field) {
                var message = _.__('pim_enrich.entity.product.locale_specific_attribute.unavailable');
                var element = '<span class="AknFieldContainer-unavailable">' + message + '</span>';

                field.addElement(
                    'field-input',
                    'input_placeholder',
                    element
                );
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 525 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/form/attributes/localizable.js ***!
  \************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Localizable field extension
 *
 * @author    Adrien Pétremann <adrien.petremann@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/fetcher-registry */ 10)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, BaseForm, FetcherRegistry) {
        return BaseForm.extend({
            configure: function () {
                this.listenTo(this.getRoot(), 'pim_enrich:form:field:extension:add', this.addFieldExtension);

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * Add this field extension to the given field event
             *
             * @param {Object} event
             *
             * @returns {Promise}
             */
            addFieldExtension: function (event) {
                var field = event.field;

                if (!field.attribute.localizable) {
                    return;
                }

                var retrieveChannel = FetcherRegistry.getFetcher('channel')
                    .fetch(field.context.scope)
                    .then(function (channel) {
                        if (!this.channelHasLocale(channel, field.context.locale)) {
                            this.updateFieldElements(field.context, field);
                        }
                    }.bind(this));

                event.promises.push(retrieveChannel);

                return this;
            },

            /**
             * Return whether the given channel has the given locale
             *
             * @param {string} channel
             *
             * @returns {boolean}
             */
            channelHasLocale: function (channel, locale) {
                return _.contains(_.pluck(channel.locales, 'code'), locale);
            },

            /**
             * Update the given field by adding element to it
             *
             * @param {Object} field
             */
            updateFieldElements: function (context, field) {
                var message = _.__('pim_enrich.entity.product.localizable.channel_locale_unavailable', {
                    channel: context.scope,
                    locale: context.locale
                });
                var element = '<span class="AknFieldContainer-unavailable">' + message + '</span>';

                field.addElement(
                    'field-input',
                    'input_placeholder',
                    element
                );
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 526 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/form/attributes/validation.js ***!
  \***********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Validation extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @author    Yohan Blain <yohan.blain@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! oro/messenger */ 16),
        __webpack_require__(/*! pim/field-manager */ 150),
        __webpack_require__(/*! pim/product-edit-form/attributes/validation-error */ 344),
        __webpack_require__(/*! pim/user-context */ 5)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, Backbone, BaseForm, mediator, messenger, FieldManager, ValidationError, UserContext) {
        return BaseForm.extend({
            validationErrors: {},

            /**
             * {@inheritdoc}
             */
            configure: function () {
                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:pre_save', this.onPreSave);
                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:bad_request', this.onValidationError);
                this.listenTo(this.getRoot(), 'pim_enrich:form:field:extension:add', this.addFieldExtension);

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * Pre save callback
             */
            onPreSave: function () {
                this.validationErrors = {};
            },

            /**
             * On validation callback
             *
             * @param {Event} event
             */
            onValidationError: function (event) {
                this.validationErrors = event.response;
                var globalErrors = _.where(this.validationErrors.values, {global: true});

                // Global errors with an empty property path
                _.each(globalErrors, function (error) {
                    messenger.notificationFlashMessage('error', error.message);
                });

                this.getRoot().trigger('pim_enrich:form:entity:validation_error', event);
            },

            /**
             * On field extension
             *
             * @param {Event} event
             */
            addFieldExtension: function (event) {
                var field = event.field;
                var valuesErrors = _.uniq(this.validationErrors.values, function (error) {
                    return JSON.stringify(error);
                });

                var errorsForAttribute = _.where(valuesErrors, {attribute: field.attribute.code});

                if (!_.isEmpty(errorsForAttribute)) {
                    this.addErrorsToField(field, errorsForAttribute);
                }
            },

            /**
             * Add an error to a field
             *
             * @param {Object} field
             * @param {Array}  fieldError
             */
            addErrorsToField: function (field, fieldErrors) {
                field.addElement(
                    'footer',
                    'validation',
                    new ValidationError(fieldErrors, this)
                );

                field.setValid(false);
            },

            /**
             * Change the current context
             *
             * @param {[type]} locale
             * @param {[type]} scope
             */
            changeContext: function (locale, scope) {
                if (locale) {
                    UserContext.set('catalogLocale', locale);
                }

                if (scope) {
                    UserContext.set('catalogScope', scope);
                }
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 527 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/form/attributes/variant-group.js ***!
  \**************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Variant group extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/field-manager */ 150),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! pim/template/product/tab/attribute/variant-group */ 311)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, BaseForm, FieldManager, FetcherRegistry, mediator, variantGroupTemplate) {
        return BaseForm.extend({
            template: _.template(variantGroupTemplate),
            configure: function () {
                this.listenTo(this.getRoot(), 'pim_enrich:form:field:extension:add', this.addFieldExtension);

                return BaseForm.prototype.configure.apply(this, arguments);
            },
            addFieldExtension: function (event) {
                var product = this.getFormData();
                if (!product.variant_group) {
                    return;
                }

                event.promises.push(
                    FetcherRegistry.getFetcher('variant-group').fetch(product.variant_group, {cached: true})
                        .then(function (variantGroup) {
                            var field = event.field;
                            if (variantGroup.values && _.contains(_.keys(variantGroup.values), field.attribute.code)) {
                                var $element = this.template({
                                    variantGroup: variantGroup
                                });

                                field.setEditable(false);
                                field.addElement('footer', 'updated_by', $element);
                            }
                        }.bind(this))
                );

                return this;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 528 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/form/categories.js ***!
  \************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Category tab extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/product/tab/categories */ 312),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! pim/tree/associate */ 364),
        __webpack_require__(/*! oro/mediator */ 6)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, Backbone, BaseForm, formTemplate, UserContext, Routing, TreeAssociate, mediator) {
        return BaseForm.extend({
            template: _.template(formTemplate),
            className: 'tab-pane active',
            id: 'product-categories',
            treeLinkSelector: 'tree-link-',
            treeHasItemClass: 'tree-has-item',
            events: {
                'click .nav-tabs li': 'changeTree',
                'change #hidden-tree-input': 'updateModel'
            },
            treeAssociate: null,
            cache: {},

            initialize: function () {
                this.state = new Backbone.Model();

                this.state.set('selectedCategories', []);

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            configure: function () {
                this.trigger('tab:register', {
                    code: this.code,
                    isVisible: this.isVisible.bind(this),
                    label: _.__('pim_enrich.form.product.tab.categories.title')
                });

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            render: function () {
                this.loadTrees().done(function (trees) {
                    var categoriesCount = {};
                    _.each(_.pluck(trees, 'id'), function (id) {
                        categoriesCount[id] = 0;
                    });

                    this.$el.html(
                        this.template({
                            product: this.getFormData(),
                            locale: UserContext.get('catalogLocale'),
                            state: this.state.toJSON(),
                            trees: trees,
                            categoriesCount: categoriesCount,
                            treeLinkSelector: this.treeLinkSelector
                        })
                    );

                    this.treeAssociate = new TreeAssociate('#trees', '#hidden-tree-input', {
                        list_categories: 'pim_enrich_product_listcategories',
                        children:        'pim_enrich_categorytree_children'
                    });
                    this.delegateEvents();
                    this.state.set('currentTree', _.first(trees).code);
                    this.state.set('currentTreeId', _.first(trees).id);
                    this.initCategoryCount(trees);
                }.bind(this));

                return this;
            },

            /**
             * Load category trees
             *
             * @returns {promise}
             */
            loadTrees: function () {
                return $.getJSON(
                    Routing.generate('pim_enrich_product_category_rest_list', {id: this.getFormData().meta.id })
                ).then(function (data) {
                    _.each(data.categories, function (category) {
                        this.cache[category.id] = category;
                    }.bind(this));

                    if (_.isEmpty(this.state.get('selectedCategories'))) {
                        this.state.set('selectedCategories', _.pluck(data.categories, 'id'));
                    }

                    return data.trees;
                }.bind(this));
            },

            changeTree: function (event) {
                this.state.set('currentTree', event.currentTarget.dataset.tree);
                this.state.set('currentTreeId', event.currentTarget.dataset.treeId);
                this.treeAssociate.switchTree(event.currentTarget.dataset.treeId);
                $(event.currentTarget)
                    .addClass('AknVerticalNavtab-item--active')
                    .siblings('.AknVerticalNavtab-item')
                    .removeClass('AknVerticalNavtab-item--active');
            },

            updateModel: function (event) {
                var selectedIds = _.filter(event.currentTarget.value.split(','), _.identity);
                this.state.set('selectedCategories', selectedIds);

                this.updateCategoryCount(this.state.get('currentTree'), this.state.get('currentTreeId'));

                var categoryCodes = _.map(selectedIds, this.getCategoryCode.bind(this));
                this.getFormModel().set('categories', categoryCodes);
                mediator.trigger('pim_enrich:form:entity:update_state');
            },

            /**
             * Initialize category count with hidden values
             *
             * @param {Array} trees
             */
            initCategoryCount: function (trees) {
                _.each(trees, function (tree) {
                    var selectedCategories = [];
                    var hiddenSelection = this.$('#hidden-tree-input').val();
                    hiddenSelection = hiddenSelection.length > 0 ? hiddenSelection.split(',') : [];
                    _.each(hiddenSelection, function (categoryId) {
                        selectedCategories.push(this.cache[categoryId]);
                    }.bind(this));
                    var categoryCount = _.where(selectedCategories, {rootId: tree.id}).length;
                    if (categoryCount > 0) {
                        $('#' + this.treeLinkSelector + tree.id).addClass(this.treeHasItemClass);
                    }
                    this.updateCategoryBadge(tree.code, categoryCount);
                }.bind(this));
            },

            /**
             * count selected leaves in the category jstree
             *
             * @param {String} rootTreeCode
             */
            updateCategoryCount: function (rootTreeCode, treeId) {
                var $rootTreeContainer = this.$('li[data-code=' + rootTreeCode +  ']');
                var selected = $rootTreeContainer.find('.jstree-checked');

                if (selected.length > 0) {
                    $('#' + this.treeLinkSelector + treeId).addClass(this.treeHasItemClass);
                } else {
                    $('#' + this.treeLinkSelector + treeId).removeClass(this.treeHasItemClass);
                }

                this.updateCategoryBadge(rootTreeCode, selected.length);
            },

            /**
             * Update the category count badge
             *
             * @param {string} rootTreeCode
             * @param {integer} categoryCount
             */
            updateCategoryBadge: function (rootTreeCode, categoryCount) {
                this.$('li[data-tree=' + rootTreeCode +  ']').find('.AknBadge').html(categoryCount);
            },

            /**
             * Fetch category code from cache
             *
             * @param {integer} id
             *
             * @returns {string}
             */
            getCategoryCode: function (id) {
                if (!this.cache[id]) {
                    var $categoryElement = this.$('#node_' + id);
                    var $rootElement     = $categoryElement.closest('.root-unselectable');
                    this.cache[id] = {
                        code: String($categoryElement.data('code')),
                        rootId: $rootElement.data('tree-id')
                    };
                }

                return this.cache[id].code;
            },

            /**
             * Check if this extension is visible
             *
             * @returns {boolean}
             */
            isVisible: function () {
                return true;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 529 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/form/delete.js ***!
  \********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Delete product extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! pim/form/common/delete */ 154), __webpack_require__(/*! pim/remover/product */ 354)], __WEBPACK_AMD_DEFINE_RESULT__ = function (DeleteForm, ProductRemover) {
    return DeleteForm.extend({
        remover: ProductRemover,

        /**
         * {@inheritdoc}
         */
        getIdentifier: function () {
            return this.getFormData().meta.id;
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 530 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/form/download-pdf.js ***!
  \**************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Download pdf extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/product/download-pdf */ 283),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! pim/user-context */ 5)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        BaseForm,
        template,
        Routing,
        UserContext
    ) {
        return BaseForm.extend({
            tagName: 'a',
            className: 'AknButton AknButton--grey AknButton--withIcon AknTitleContainer-rightButton btn-download',
            template: _.template(template),

            configure: function () {
                UserContext.off('change:catalogLocale change:catalogScope', this.render);
                this.listenTo(UserContext, 'change:catalogLocale change:catalogScope', this.render);

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            render: function () {
                if (!this.getFormData().meta) {
                    return;
                }

                this.$el.html(this.template());
                this.$el.attr('href', Routing.generate(
                    'pim_pdf_generator_download_product_pdf',
                    {
                        id:         this.getFormData().meta.id,
                        dataLocale: UserContext.get('catalogLocale'),
                        dataScope:  UserContext.get('catalogScope')
                    }
                ));

                return this;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 531 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/form/mass-edit/attributes.js ***!
  \**********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Override of the attributes module.
 *
 * Purpose of this override is to avoid XHR call when removing an attribute
 * from the Product Edit Form (as we simply want to remove it from the DOM).
 *
 * @author    Adrien Pétremann <adrien.petremann@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! pim/field-manager */ 150),
        __webpack_require__(/*! pim/security-context */ 31),
        __webpack_require__(/*! pim/form/common/attributes */ 182)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        FieldManager,
        SecurityContext,
        BaseAttributes
    ) {
        return BaseAttributes.extend({
            /**
             * {@inheritdoc}
             */
            removeAttribute: function (event) {
                if (!SecurityContext.isGranted('pim_enrich_product_remove_attribute')) {
                    return;
                }
                var attributeCode = event.currentTarget.dataset.attribute;
                var product = this.getFormData();
                var fields = FieldManager.getFields();

                this.triggerExtensions('add-attribute:update:available-attributes');

                delete product.values[attributeCode];
                delete fields[attributeCode];

                this.setData(product);
                this.getRoot().trigger('pim_enrich:form:remove-attribute:after');

                this.render();
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 532 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/form/mass-edit/hidden-field-updater.js ***!
  \********************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Mass Edit Common Attributes exclusive module.
 *
 * It listens to any change on the Product Edit Form and update accordingly an
 * hidden field that contains the JSON value of the whole form.
 *
 * @author    Adrien Pétremann <adrien.petremann@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/user-context */ 5)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, $, BaseForm, UserContext) {
        return BaseForm.extend({
            /**
             * {@inheritdoc}
             */
            configure: function () {
                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:update_state', this.render);
                this.listenTo(this.getRoot(), 'pim_enrich:form:remove-attribute:after', this.render);
                this.listenTo(this.getRoot(), 'pim_enrich:form:add-attribute:after', this.render);

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             *
             * We need to set values to null if they don't match the current selected locale or scope.
             * We can't directly delete them as the structure (scope/channel) is used for validation.
             * These unused values will be removed later in the back office.
             */
            render: function () {
                var selectedLocale = UserContext.get('catalogLocale');
                var selectedChannel = UserContext.get('catalogScope');
                var data = this.getFormData().values;

                data = _.mapObject(data, function (attributeValues) {
                    return _.map(attributeValues, function (value) {
                        if (null !== value.locale && selectedLocale !== value.locale) {
                            value.data = null;
                        }
                        if (null !== value.scope && selectedChannel !== value.scope) {
                            value.data = null;
                        }

                        return value;
                    });
                });

                this.setData({values: data}, {silent: true});

                var stringData = JSON.stringify(data, null, 0);
                $('#pim_enrich_mass_edit_choose_action_operation_values').val(stringData);
                $('#pim_enrich_mass_edit_choose_action_operation_attribute_locale').val(selectedLocale);
                $('#pim_enrich_mass_edit_choose_action_operation_attribute_channel').val(selectedChannel);

                return this;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 533 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/form/meta/change-family.js ***!
  \********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Change family extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/product-manager */ 163),
        __webpack_require__(/*! pim/template/product/meta/change-family-modal */ 296),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! pim/i18n */ 17),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! pim/initselect2 */ 30),
        __webpack_require__(/*! bootstrap-modal */ 33),
        __webpack_require__(/*! jquery.select2 */ 29)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        Backbone,
        BaseForm,
        FetcherRegistry,
        ProductManager,
        modalTemplate,
        UserContext,
        i18n,
        Routing,
        initSelect2
    ) {
        return BaseForm.extend({
            tagName: 'i',
            className: 'icon-pencil change-family AknTitleContainer-metaLink',
            modalTemplate: _.template(modalTemplate),
            events: {
                'click': 'showModal'
            },
            render: function () {
                this.delegateEvents();

                return BaseForm.prototype.render.apply(this, arguments);
            },
            showModal: function () {
                var familyModal = new Backbone.BootstrapModal({
                    allowCancel: true,
                    cancelText: _.__('pim_enrich.entity.product.meta.groups.modal.close'),
                    title: _.__('pim_enrich.form.product.change_family.modal.title'),
                    content: this.modalTemplate({
                        product: this.getFormData()
                    })
                });

                familyModal.on('ok', function () {
                    var selectedFamily = familyModal.$('.family-select2').select2('val') || null;

                    this.getFormModel().set('family', selectedFamily);
                    ProductManager.generateMissing(this.getFormData()).then(function (product) {
                        this.getRoot().trigger('pim_enrich:form:change-family:before');

                        this.setData(product);

                        this.getRoot().trigger('pim_enrich:form:change-family:after');
                        familyModal.close();
                    }.bind(this));
                }.bind(this));

                familyModal.open();
                var self = this;

                var options = {
                    allowClear: true,
                    ajax: {
                        url: Routing.generate('pim_enrich_family_rest_index'),
                        quietMillis: 250,
                        cache: true,
                        data: function (term, page) {
                            return {
                                search: term,
                                options: {
                                    limit: 20,
                                    page: page,
                                    locale: UserContext.get('catalogLocale')
                                }
                            };
                        },
                        results: function (families) {
                            var data = {
                                more: 20 === _.keys(families).length,
                                results: []
                            };
                            _.each(families, function (value, key) {
                                data.results.push({
                                    id: key,
                                    text: i18n.getLabel(value.labels, UserContext.get('catalogLocale'), value.code)
                                });
                            });

                            return data;
                        }
                    },
                    initSelection: function (element, callback) {
                        var productFamily = self.getFormData().family;
                        if (null !== productFamily) {
                            FetcherRegistry.getFetcher('family')
                                .fetch(self.getFormData().family)
                                .then(function (family) {
                                    callback({
                                        id: family.code,
                                        text: i18n.getLabel(
                                            family.labels,
                                            UserContext.get('catalogLocale'),
                                            family.code
                                        )
                                    });
                                });
                        }

                    }
                };

                initSelect2.init(familyModal.$('.family-select2'), options).select2('val', []);
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 534 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/form/meta/family.js ***!
  \*************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__; 
/**
 * Family extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/product/meta/family */ 297),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! pim/i18n */ 17)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, mediator, BaseForm, template, FetcherRegistry, UserContext, i18n) {
        return BaseForm.extend({
            tagName: 'span',
            className: 'AknTitleContainer-metaItem',
            template: _.template(template),
            configure: function () {
                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:post_update', this.render);
                UserContext.off('change:catalogLocale change:catalogScope', this.render);
                this.listenTo(UserContext, 'change:catalogLocale change:catalogScope', this.render);

                return BaseForm.prototype.configure.apply(this, arguments);
            },
            render: function () {
                if (!this.configured) {
                    return this;
                }

                var familyPromise = _.isNull(this.getFormData().family) ?
                    $.Deferred().resolve(null) :
                    FetcherRegistry.getFetcher('family').fetch(this.getFormData().family);

                familyPromise.then(function (family) {
                    var product = this.getFormData();

                    this.$el.html(
                        this.template({
                            familyLabel: family ?
                                i18n.getLabel(family.labels, UserContext.get('catalogLocale'), product.family) :
                                _.__('pim_enrich.entity.product.meta.family.none')
                        })
                    );

                    BaseForm.prototype.render.apply(this, arguments);
                }.bind(this));
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 535 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/form/meta/groups.js ***!
  \*************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__; 
/**
 * Product groups extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! pim/template/product/meta/groups */ 299),
        __webpack_require__(/*! pim/template/product/meta/group-modal */ 298),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/group-manager */ 338),
        __webpack_require__(/*! pim/router */ 11),
        __webpack_require__(/*! pim/i18n */ 17),
        __webpack_require__(/*! oro/loading-mask */ 18),
        __webpack_require__(/*! bootstrap-modal */ 33)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        mediator,
        Backbone,
        BaseForm,
        Routing,
        formTemplate,
        modalTemplate,
        UserContext,
        FetcherRegistry,
        GroupManager,
        router,
        i18n,
        LoadingMask
    ) {
        var FormView = BaseForm.extend({
            tagName: 'span',
            className: 'AknTitleContainer-metaItem product-groups',
            template: _.template(formTemplate),
            modalTemplate: _.template(modalTemplate),
            events: {
                'click a[data-group]': 'displayModal'
            },
            configure: function () {
                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:post_update', this.render);

                return BaseForm.prototype.configure.apply(this, arguments);
            },
            render: function () {
                if (!this.configured) {
                    return this;
                }

                GroupManager.getProductGroups(this.getFormData()).done(function (groups) {
                    groups = this.prepareGroupsForTemplate(groups);

                    if (groups.length) {
                        this.$el.html(
                            this.template({
                                label: _.__('pim_enrich.entity.product.meta.groups.title'),
                                groups: groups
                            })
                        );
                    } else {
                        this.$el.html('');
                    }
                }.bind(this));

                return this;
            },

            /**
             * Prepare groups for being displayed in the template
             *
             * @param {Array} groups
             *
             * @returns {Array}
             */
            prepareGroupsForTemplate: function (groups) {
                var locale = UserContext.get('catalogLocale');

                return _.map(groups, function (group) {
                    return {
                        label: group.labels[locale] || '[' + group.code + ']',
                        code: group.code,
                        isVariant: 'VARIANT' === group.type
                    };
                });
            },

            /**
             * Get the product list for the given group
             *
             * @param {integer} groupCode
             *
             * @returns {Array}
             */
            getProductList: function (groupCode) {
                return $.getJSON(
                    Routing.generate('pim_enrich_group_rest_list_products', { identifier: groupCode })
                ).then(_.identity);
            },

            /**
             * Show the modal which displays infos about produt groups
             *
             * @param {Object} event
             */
            displayModal: function (event) {
                var loadingMask = new LoadingMask();
                loadingMask.render().$el.appendTo($('#container')).show();

                GroupManager.getProductGroups(this.getFormData()).done(function (groups) {
                    var group = _.findWhere(groups, { code: event.currentTarget.dataset.group });

                    $.when(
                        this.getProductList(group.code),
                        FetcherRegistry.getFetcher('attribute').getIdentifierAttribute()
                    ).done(function (productList, identifierAttribute) {
                        loadingMask.remove();
                        this.groupModal = new Backbone.BootstrapModal({
                            allowCancel: true,
                            okText: _.__('pim_enrich.entity.product.meta.groups.modal.view_group'),
                            cancelText: _.__('pim_enrich.entity.product.meta.groups.modal.close'),
                            title: _.__(
                                'pim_enrich.entity.product.meta.groups.modal.title',
                                { group: i18n.getLabel(group.labels, UserContext.get('catalogLocale'), group.code) }
                            ),
                            content: this.modalTemplate({
                                products:     productList.products,
                                productCount: productList.productCount,
                                identifier:   identifierAttribute,
                                locale:       UserContext.get('catalogLocale')
                            })
                        });

                        this.groupModal.on('ok', function visitGroup() {
                            this.groupModal.close();
                            var route = 'VARIANT' === group.type ?
                                'pim_enrich_variant_group_edit' :
                                'pim_enrich_group_edit';
                            var parameters = { code: group.code };

                            router.redirectToRoute(route, parameters);
                        }.bind(this));
                        this.groupModal.open();

                        this.groupModal.$el.on('click', 'a[data-product-id]', function visitProduct(event) {
                            this.groupModal.close();
                            router.redirectToRoute(
                                'pim_enrich_product_edit',
                                { id: event.currentTarget.dataset.productId }
                            );
                        }.bind(this));
                    }.bind(this));
                }.bind(this));
            }
        });

        return FormView;
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 536 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/form/panel/comments.js ***!
  \****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Comment panel extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! pim/template/product/panel/comments */ 300),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! oro/messenger */ 16),
        __webpack_require__(/*! pim/dialog */ 14)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, Backbone, BaseForm, UserContext, template, Routing, messenger, Dialog) {
        return BaseForm.extend({
            template: _.template(template),
            className: 'panel-pane',
            comments: [],
            events: {
                'keyup .comment-create textarea, .reply-to-comment textarea': 'toggleButtons',
                'click .comment-create .send-comment': 'saveComment',
                'click .remove-comment': 'removeComment',
                'click .comment-thread .send-comment': 'saveReply',
                'click .comment-thread .cancel-comment, .comment-create .cancel-comment': 'cancelComment'
            },
            initialize: function () {
                this.comment = new Backbone.Model();

                BaseForm.prototype.initialize.apply(this, arguments);
            },
            configure: function () {
                this.trigger('panel:register', {
                    code: this.code,
                    label: _.__('pim_comment.product.panel.comment.title')
                });

                return BaseForm.prototype.configure.apply(this, arguments);
            },
            render: function () {
                if (!this.configured || this.code !== this.getParent().getCurrentPanelCode()) {
                    return this;
                }

                this.loadData().done(function (data) {
                    this.comments = data;

                    this.$el.html(
                        this.template({
                            comments: this.comments,
                            currentUser: UserContext.toJSON()
                        })
                    );
                    this.delegateEvents();
                }.bind(this));

                return this;
            },
            loadData: function () {
                return $.get(
                    Routing.generate(
                        'pim_enrich_product_comments_rest_get',
                        {
                            id: this.getFormData().meta.id
                        }
                    )
                );
            },
            toggleButtons: function (event) {
                var $element = $(event.currentTarget).parents('.comment-thread, .comment-create');
                if ($element.find('textarea').val()) {
                    $element.addClass('active');
                    $element.find('.AknButtonList').removeClass('AknButtonList--hide');
                } else {
                    $element.removeClass('active');
                    $element.find('.AknButtonList').addClass('AknButtonList--hide');
                }
            },
            cancelComment: function (event) {
                var $element = $(event.currentTarget).parents('.comment-thread, .comment-create');
                $element.find('textarea').val('');
                $element.removeClass('active');
                $element.find('.AknButtonList').addClass('AknButtonList--hide');
            },
            saveComment: function () {
                $.ajax({
                    type: 'POST',
                    url: Routing.generate('pim_enrich_product_comments_rest_post', { id: this.getFormData().meta.id }),
                    contentType: 'application/json',
                    data: JSON.stringify({ 'body': this.$('.comment-create textarea').val() })
                }).done(function () {
                    this.render();
                    messenger.notificationFlashMessage('success', _.__('flash.comment.create.success'));
                }.bind(this)).fail(function () {
                    messenger.notificationFlashMessage('error', _.__('flash.comment.create.error'));
                });
            },
            removeComment: function (event) {
                Dialog.confirm(
                    _.__('confirmation.remove.comment'),
                    _.__('pim_enrich.confirmation.delete_item'),
                    this.doRemove.bind(this, event)
                );
            },
            doRemove: function (event) {
                $.ajax({
                    url: Routing.generate('pim_comment_comment_delete', { id: event.currentTarget.dataset.commentId }),
                    type: 'POST',
                    headers: { accept: 'application/json' },
                    data: { _method: 'DELETE' }
                }).done(function () {
                    this.render();
                    messenger.notificationFlashMessage('success', _.__('flash.comment.delete.success'));
                }.bind(this)).fail(function () {
                    messenger.notificationFlashMessage('error', _.__('flash.comment.delete.error'));
                });
            },
            saveReply: function (event) {
                var $thread = $(event.currentTarget).parents('.comment-thread');

                $.ajax({
                    type: 'POST',
                    url: Routing.generate(
                        'pim_enrich_product_comment_reply_rest_post',
                        {
                            id: this.getFormData().meta.id,
                            commentId: $thread.data('comment-id')
                        }
                    ),
                    contentType: 'application/json',
                    data: JSON.stringify({ 'body': $thread.find('textarea').val()})
                }).done(function () {
                    $thread.find('textarea').val('');
                    this.render();
                    messenger.notificationFlashMessage('success', _.__('flash.comment.reply.success'));
                }.bind(this)).fail(function () {
                    messenger.notificationFlashMessage('error', _.__('flash.comment.reply.error'));
                });
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 537 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/form/panel/completeness.js ***!
  \********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Completeness panel extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/product/panel/completeness */ 301),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/i18n */ 17),
        __webpack_require__(/*! pim/user-context */ 5)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, BaseForm, template, FetcherRegistry, i18n, UserContext) {
        return BaseForm.extend({
            template: _.template(template),
            className: 'panel-pane completeness-panel',
            events: {
                'click header': 'switchLocale',
                'click .missing-attributes a': 'showAttribute'
            },

            /**
             * {@inheritdoc}
             */
            configure: function () {
                this.trigger('panel:register', {
                    code: this.code,
                    label: _.__('pim_enrich.form.product.panel.completeness.title')
                });

                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:post_fetch', this.render);
                this.listenTo(this.getRoot(), 'pim_enrich:form:change-family:after', this.onChangeFamily);
                this.listenTo(UserContext, 'change:catalogLocale', this.render);

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                if (!this.configured || this.code !== this.getParent().getCurrentPanelCode()) {
                    return this;
                }

                if (this.getFormData().meta) {
                    $.when(
                        FetcherRegistry.getFetcher('locale').fetchActivated()
                    ).then(function (locales) {
                        this.$el.html(
                            this.template({
                                hasFamily: this.getFormData().family !== null,
                                completenesses: this.sortCompleteness(this.getFormData().meta.completenesses),
                                i18n: i18n,
                                locales: locales,
                                catalogLocale: UserContext.get('catalogLocale')
                            })
                        );
                        this.delegateEvents();
                    }.bind(this));
                }

                return this;
            },

            /**
             * Sort completenesses. Put the user current catalog locale first.
             *
             * @param completenesses
             *
             * @returns {Array}
             */
            sortCompleteness: function (completenesses) {
                if (_.isEmpty(completenesses)) {
                    return [];
                }
                var sortedCompleteness = [_.findWhere(completenesses, {locale: UserContext.get('catalogLocale')})];

                return _.union(sortedCompleteness, completenesses);
            },

            /**
             * Toggle the current locale
             *
             * @param Event event
             */
            switchLocale: function (event) {
                var $completenessBlock = $(event.currentTarget).parents('.completeness-block');
                if ($completenessBlock.attr('data-closed') === 'false') {
                    $completenessBlock.attr('data-closed', 'true');
                } else {
                    $completenessBlock.attr('data-closed', 'false');
                }
            },

            /**
             * Set focus to the attribute given by the event
             *
             * @param Event event
             */
            showAttribute: function (event) {
                this.getRoot().trigger(
                    'pim_enrich:form:show_attribute',
                    {
                        attribute: event.currentTarget.dataset.attribute,
                        locale: event.currentTarget.dataset.locale,
                        scope: event.currentTarget.dataset.channel
                    }
                );
            },

            /**
             * On family change listener
             */
            onChangeFamily: function () {
                var data = this.getFormData();
                data.meta.completenesses = [];
                this.setData(data);

                this.render();
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 538 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/form/panel/history.js ***!
  \***************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * History extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/product/panel/history */ 303),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! pim/i18n */ 17),
        __webpack_require__(/*! bootstrap-modal */ 33)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, Backbone, BaseForm, template, Routing, mediator, FetcherRegistry, UserContext, i18n) {
        return BaseForm.extend({
            template: _.template(template),
            className: 'panel-pane history-panel',
            loading: false,
            versions: [],
            actions: {},
            events: {
                'click .expand-history':   'expandHistory',
                'click .collapse-history': 'collapseHistory',
                'click .expanded .AknGrid-bodyCell': 'toggleVersion'
            },

            /**
             * {@inheritdoc}
             */
            configure: function () {
                this.trigger('panel:register', {
                    code: this.code,
                    label: _.__('pim_enrich.form.product.panel.history.title')
                });

                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:post_fetch', this.update);

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                if (!this.configured || this.code !== this.getParent().getCurrentPanelCode()) {
                    return this;
                }

                if (this.getFormData().meta) {
                    this.getVersions()
                        .then(function (versions) {
                            this.$el.html(
                                this.template({
                                    versions: versions,
                                    expanded: this.getParent().getParent().isFullPanel(),
                                    hasAction: this.actions
                                })
                            );

                            if (this.getParent().getParent().isFullPanel() && this.actions) {
                                _.each(this.$el.find('td.actions'), function (element) {
                                    _.each(this.actions, function (action) {
                                        $(element).append(action.clone(true));
                                    }.bind(this));
                                }.bind(this));
                            }

                            this.delegateEvents();
                            this.renderExtensions();

                            this.delegateEvents();
                        }.bind(this));

                }

                return this;
            },

            /**
             * Update the history by fetching it from the backend
             */
            update: function () {
                if (this.getFormData().meta) {
                    FetcherRegistry.getFetcher('product-history').clear(this.getFormData().meta.id);
                }

                this.render();
            },

            /**
             * Get history versions from the backend
             *
             * @return {Promise}
             */
            getVersions: function () {
                return FetcherRegistry.getFetcher('product-history').fetch(
                    this.getFormData().meta.id,
                    { entityId: this.getFormData().meta.id }
                ).then(this.addAttributesLabelToVersions.bind(this));
            },

            /**
             * Add attributes label to all versions
             *
             * @param {Array} versions
             */
            addAttributesLabelToVersions: function (versions) {
                var codes = this.getAttributeCodesInVersions(versions);

                return FetcherRegistry.getFetcher('attribute').fetchByIdentifiers(codes)
                    .then(function (attributes) {
                        _.each(versions, function (version) {
                            _.each(version.changeset, function (data, index) {
                                var code      = index.split('-')[0];
                                var attribute = _.findWhere(attributes, { code: code });
                                data.label    = attribute ? this.getAttributeLabel(attribute, index) : index;
                            }.bind(this));
                        }.bind(this));

                        return versions;
                    }.bind(this));
            },

            /**
             * Return the list of unique attribute codes found in all versions
             *
             * @param {Array} versions
             *
             * @returns {Array}
             */
            getAttributeCodesInVersions: function (versions) {
                var codes = [];
                _.each(versions, function (version) {
                    _.each(version.changeset, function (data, index) {
                        codes.push(index.split('-')[0]);
                    });
                });

                return _.uniq(codes);
            },

            /**
             * Get attribute label
             *
             * @param {object} attribute
             * @param {string} key
             *
             * @return {string}
             */
            getAttributeLabel: function (attribute, key) {
                var uiLocale = UserContext.get('catalogLocale');
                var label    = i18n.getLabel(attribute.labels, uiLocale, attribute.code);

                key = key.split('-');
                key.shift();

                var info = '';
                if (attribute.localizable) {
                    info += i18n.getFlag(key.shift());
                }
                if (attribute.scopable) {
                    info = '<span>' + key.shift() + '</span>' + info;
                }
                if (0 < key.length) {
                    info = key.join(' ') + info;
                }
                if (info) {
                    info = ' <span class="attribute-info">' + info + '</span>';
                }

                return label + info;
            },

            /**
             * Add action to the history
             *
             * @param {action code} code
             * @param {DOMElement}  element
             */
            addAction: function (code, element) {
                this.actions[code] = element;
            },

            /**
             * Expand the history
             */
            expandHistory: function () {
                this.getParent().openFullPanel();
            },

            /**
             * Collapse history
             */
            collapseHistory: function () {
                this.getParent().closeFullPanel();
            },

            /**
             * Toggle history version line
             *
             * @param {Event} event
             */
            toggleVersion: function (event) {
                var $row = $(event.currentTarget).closest('.AknGrid-bodyRow');
                var $body = $row.closest('.AknGrid');

                $body.find('tr.changeset').addClass('hide');
                $body.find('i.icon-chevron-down').toggleClass('icon-chevron-right icon-chevron-down');

                if (!$row.hasClass('expanded')) {
                    $row.next('tr.changeset').removeClass('hide');
                    $row.find('i').toggleClass('icon-chevron-right icon-chevron-down');
                }
                $row.siblings().removeClass('expanded');
                $row.toggleClass('expanded');
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 539 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/form/panel/panels.js ***!
  \**************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Panel manager extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! pim/template/product/panel/container */ 302)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, Backbone, BaseForm, mediator, template) {
        return BaseForm.extend({
            template: _.template(template),
            className: 'AknPanelContainer panel-container',
            events: {
                'click > header > .close': 'closePanel'
            },

            /**
             * {@inheritdoc}
             */
            initialize: function () {
                this.panels = [];

                BaseForm.prototype.initialize.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            configure: function () {
                this.onExtensions('panel:register', this.registerPanel.bind(this));

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * Register a panel to be displayed
             *
             * @param {Event} event
             */
            registerPanel: function (event) {
                this.panels.push({ code: event.code, label: event.label });

                this.render();
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                if (!this.configured) {
                    return this;
                }

                this.$el.closest('.AknTabContainer-panels')[this.getCurrentPanelCode() ? 'removeClass' : 'addClass'](
                    'AknTabContainer-panels--closed'
                );

                var currentPanel = _.findWhere(this.panels, {code: this.getCurrentPanelCode()});
                this.$el.html(
                    this.template({
                        label: currentPanel ? currentPanel.label : this.getCurrentPanelCode()
                    })
                );
                this.initializeDropZones();

                if (this.getCurrentPanelCode()) {
                    this.renderExtension(this.getExtension(this.getCurrentPanelCode()));
                }

                var selectorExtension = this.getExtension('selector');
                selectorExtension.render();
                $(this.getParent().getZone('side-buttons')).append(selectorExtension.$el);

                this.delegateEvents();

                return this;
            },

            /**
             * Close the panel
             */
            closePanel: function () {
                this.setCurrentPanelCode(null);
                this.closeFullPanel();
            },

            /**
             * Open the full size panel
             */
            openFullPanel: function () {
                this.getParent().setFullPanel(true);
            },

            /**
             * Close the full size panel
             */
            closeFullPanel: function () {
                this.getParent().setFullPanel(false);
            },

            /**
             * Get the curent panel code
             */
            getCurrentPanelCode: function () {
                return sessionStorage.getItem('current_form_panel_' + this.getFormCode());
            },

            /**
             * Set the curent panel code
             */
            setCurrentPanelCode: function (code) {
                if (code) {
                    sessionStorage.setItem('current_form_panel_' + this.getFormCode(), code);
                } else {
                    sessionStorage.removeItem('current_form_panel_' + this.getFormCode());
                }

                this.render();
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 540 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/form/panel/selector.js ***!
  \****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Panel selector extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/product/panel/selector */ 304)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, BaseForm, template) {
        return BaseForm.extend({
            template: _.template(template),
            className: 'AknButtonList panel-selector btn-group',
            events: {
                'click button': 'changePanel'
            },
            render: function () {
                this.$el.html(
                    this.template({
                        panels: this.getParent().panels,
                        currentPanel: this.getParent().getCurrentPanelCode()
                    })
                );

                this.delegateEvents();

                return this;
            },
            changePanel: function (event) {
                if (this.getParent().getCurrentPanelCode() === event.currentTarget.dataset.panel) {
                    this.getParent().setCurrentPanelCode(null);
                } else {
                    this.getParent().setCurrentPanelCode(event.currentTarget.dataset.panel);
                }

                this.getParent().closeFullPanel();
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 541 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/form/product-label.js ***!
  \***************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Product label extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! pim/form/common/label */ 166), __webpack_require__(/*! pim/user-context */ 5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Label, UserContext) {
        return Label.extend({
            /**
             * Provide the object label
             * @return {String}
             */
            getLabel: function () {
                var meta = this.getFormData().meta;

                if (meta && meta.label) {
                    return meta.label[UserContext.get('catalogLocale')];
                }

                return null;
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 542 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/form/save-and-back.js ***!
  \***************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Save and back to the grid extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/router */ 11),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! oro/messenger */ 16)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        mediator,
        BaseForm,
        router,
        Routing,
        messenger
    ) {
        return BaseForm.extend({
            className: 'btn-group',
            configure: function () {
                this.trigger('save-buttons:register-button', {
                    className: 'save-product-and-back',
                    priority: 150,
                    label: _.__('pim_enrich.entity.product.btn.save_and_back'),
                    events: {
                        'click .save-product-and-back': this.saveAndBack.bind(this)
                    }
                });

                return BaseForm.prototype.configure.apply(this, arguments);
            },
            saveAndBack: function () {
                this.parent.getExtension('save')
                    .save({silent: true})
                    .done(function () {
                        messenger.addMessage(
                            'success',
                            _.__('pim_enrich.entity.product.info.update_successful'),
                            {hashNavEnabled: true}
                        );
                        router.redirectToRoute('pim_enrich_product_index');
                    }.bind(this))
                    .fail(function () {
                        messenger.notificationFlashMessage(
                            'error',
                            _.__('pim_enrich.entity.product.info.update_failed')
                        );
                    });
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 543 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/form/save.js ***!
  \******************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Save extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form/common/save */ 159),
        __webpack_require__(/*! oro/messenger */ 16),
        __webpack_require__(/*! pim/product-manager */ 163),
        __webpack_require__(/*! pim/saver/product */ 362),
        __webpack_require__(/*! pim/field-manager */ 150),
        __webpack_require__(/*! pim/i18n */ 17),
        __webpack_require__(/*! pim/user-context */ 5)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        __,
        BaseSave,
        messenger,
        ProductManager,
        ProductSaver,
        FieldManager,
        i18n,
        UserContext
    ) {
        return BaseSave.extend({
            updateSuccessMessage: __('pim_enrich.entity.product.info.update_successful'),
            updateFailureMessage: __('pim_enrich.entity.product.info.update_failed'),

            /**
             * {@inheritdoc}
             */
            save: function (options) {
                var product = $.extend(true, {}, this.getFormData());
                var productId = product.meta.id;

                delete product.variant_group;
                delete product.meta;

                var notReadyFields = FieldManager.getNotReadyFields();

                if (0 < notReadyFields.length) {
                    var fieldLabels = _.map(notReadyFields, function (field) {
                        return i18n.getLabel(
                            field.attribute.label,
                            UserContext.get('catalogLocale'),
                            field.attribute.code
                        );
                    });

                    messenger.notificationFlashMessage(
                        'error',
                        __('pim_enrich.entity.product.info.field_not_ready', {'fields': fieldLabels.join(', ')})
                    );

                    return;
                }

                this.showLoadingMask();
                this.getRoot().trigger('pim_enrich:form:entity:pre_save');

                return ProductSaver
                    .save(productId, product)
                    .then(ProductManager.generateMissing.bind(ProductManager))
                    .then(function (data) {
                        this.postSave();

                        this.setData(data, options);

                        this.getRoot().trigger('pim_enrich:form:entity:post_fetch', data);
                    }.bind(this))
                    .fail(this.fail.bind(this))
                    .always(this.hideLoadingMask.bind(this));
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 544 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/form/sequential-edit.js ***!
  \*****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Sequential edit extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/product/sequential-edit */ 306),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! pim/router */ 11),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/user-context */ 5),
        __webpack_require__(/*! bootstrap */ 23)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        Backbone,
        mediator,
        BaseForm,
        template,
        Routing,
        router,
        FetcherRegistry,
        UserContext
    ) {
        return BaseForm.extend({
            id: 'sequentialEdit',
            className: 'AknSequentialEdit',
            template: _.template(template),
            events: {
                'click .next, .previous': 'followLink'
            },
            initialize: function () {
                this.model = new Backbone.Model();

                BaseForm.prototype.initialize.apply(this, arguments);
            },
            configure: function () {
                FetcherRegistry.clear('sequential-edit');

                return $.when(
                    FetcherRegistry.getFetcher('sequential-edit')
                        .fetchAll()
                        .then(
                            function (sequentialEdit) {
                                this.model.set(sequentialEdit);
                            }.bind(this)
                        ),
                    BaseForm.prototype.configure.apply(this, arguments)
                );
            },
            addSaveButton: function () {
                var objectSet    = this.model.get('objectSet');
                var currentIndex = objectSet.indexOf(this.getFormData().meta.id);
                var nextObject   = objectSet[currentIndex + 1];

                this.trigger('save-buttons:register-button', {
                    className: 'save-and-continue',
                    priority: 250,
                    label: _.__(
                        'pim_enrich.form.product.sequential_edit.btn.save_and_' + (nextObject ? 'next' : 'finish')
                    ),
                    events: {
                        'click .save-and-continue': this.saveAndContinue.bind(this)
                    }
                });
            },
            render: function () {
                if (!this.configured || !this.model.get('objectSet')) {
                    return this;
                }

                this.addSaveButton();

                this.getTemplateParameters().done(function (templateParameters) {
                    this.$el.html(this.template(templateParameters));
                    this.$('[data-toggle="tooltip"]').tooltip();
                    this.delegateEvents();
                    this.preloadNext();
                }.bind(this));

                return this;
            },
            getTemplateParameters: function () {
                var objectSet     = this.model.get('objectSet');
                var currentObject = this.getFormData().meta.id;
                var index         = objectSet.indexOf(currentObject);
                var previous      = objectSet[index - 1];
                var next          = objectSet[index + 1];

                var previousObject = null;
                var nextObject = null;

                var promises = [];
                if (previous) {
                    promises.push(FetcherRegistry.getFetcher('product').fetch(previous).then(function (product) {
                        var label = product.meta.label[UserContext.get('catalogLocale')];
                        previousObject = {
                            id:         product.meta.id,
                            label:      label,
                            shortLabel: label.length > 25 ? label.slice(0, 22) + '...' : label
                        };
                    }));
                }
                if (next) {
                    promises.push(FetcherRegistry.getFetcher('product').fetch(next).then(function (product) {
                        var label = product.meta.label[UserContext.get('catalogLocale')];
                        nextObject = {
                            id:         product.meta.id,
                            label:      label,
                            shortLabel: label.length > 25 ? label.slice(0, 22) + '...' : label
                        };
                    }));
                }

                return $.when.apply($, promises).then(function () {
                    return {
                        objectCount:    objectSet.length,
                        currentIndex:   index + 1,
                        previousObject: previousObject,
                        nextObject:     nextObject,
                        ratio:          (index + 1) / objectSet.length * 100
                    };
                });
            },
            preloadNext: function () {
                var objectSet = this.model.get('objectSet');
                var currentIndex = objectSet.indexOf(this.getFormData().meta.id);
                var pending = objectSet[currentIndex + 2];
                if (pending) {
                    setTimeout(function () {
                        FetcherRegistry.getFetcher('product').fetch(pending);
                    }, 2000);
                }
            },
            saveAndContinue: function () {
                this.parent.getExtension('save').save({ silent: true }).done(function () {
                    var objectSet = this.model.get('objectSet');
                    var currentIndex = objectSet.indexOf(this.getFormData().meta.id);
                    var nextObject = objectSet[currentIndex + 1];
                    if (nextObject) {
                        this.goToProduct(nextObject);
                    } else {
                        this.finish();
                    }
                }.bind(this));
            },
            followLink: function (event) {
                this.getRoot().trigger('pim_enrich:form:state:confirm', {
                    action: function () {
                        this.goToProduct(event.currentTarget.dataset.id);
                    }.bind(this)
                });
            },
            goToProduct: function (id) {
                router.redirectToRoute(
                    'pim_enrich_product_edit',
                    { id: id }
                );
            },
            finish: function () {
                router.redirectToRoute('pim_enrich_product_index');
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 545 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/product/form/status-switcher.js ***!
  \*****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * Status switcher extension
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @author    Filips Alpe <filips@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/mediator */ 6),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/product/status-switcher */ 307)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        mediator,
        BaseForm,
        template
    ) {
        return BaseForm.extend({
            className: 'AknDropdownButton AknDropdown status-switcher',
            template: _.template(template),
            events: {
                'click .AknDropdown-menuLink': 'updateStatus'
            },

            /**
             * {@inheritdoc}
             */
            configure: function () {
                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:post_update', this.render);

                return BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                var status = this.getRoot().getFormData().enabled;

                this.$el.html(this.template({
                    status: status
                }));
                this.$el
                    .addClass(status ? 'AknDropdownButton--apply' : 'AknDropdownButton--important')
                    .removeClass(status ? 'AknDropdownButton--important' : 'AknDropdownButton--apply')
                    .find('.AknCaret')
                    .addClass(status ? 'AknCaret--apply' : 'AknCaret--important')
                    .removeClass(status ? 'AknCaret--important' : 'AknCaret--apply');
                this.delegateEvents();

                return this;
            },

            /**
             * Update the current status of the product
             *
             * @param {Event} event
             */
            updateStatus: function (event) {
                var newStatus = event.currentTarget.dataset.status === 'enable';
                this.getFormModel().set('enabled', newStatus);
                this.getRoot().trigger('pim_enrich:form:entity:update_state');
                this.render();
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 546 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/tree-manage.jstree.js ***!
  \*******************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! oro/loading-mask */ 18),
        __webpack_require__(/*! oro/error */ 47),
        __webpack_require__(/*! pim/ui */ 56),
        __webpack_require__(/*! jquery.jstree */ 49),
        __webpack_require__(/*! jstree/jquery.jstree.tree_selector */ 55)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, Backbone, Routing, LoadingMask, OroError, UI) {
        'use strict';

        return function (elementId, prefixRoute) {
            var $el = $(elementId);
            if (!$el || !$el.length || !_.isObject($el)) {
                throw new Error('Unable to instantiate tree on this element');
            }
            var selectedNode       = $el.attr('data-node-id') || -1;
            var selectedTree       = $el.attr('data-tree-id') || -1;
            var selectedNodeOrTree = selectedNode in [0, -1] ? selectedTree : selectedNode;
            var preventFirst       = selectedNode > 0;
            var loadingMask        = new LoadingMask();

            loadingMask.render().$el.appendTo($('#container'));

            this.config = {
                core: {
                    animation: 200
                },
                plugins: [
                    'tree_selector',
                    'themes',
                    'json_data',
                    'ui',
                    'crrm',
                    'types'
                ],
                contextmenu: {
                    items: {
                        create: {
                            label: _.__('jstree.create')
                        },
                        ccp: false,
                        rename: false,
                        remove: false
                    }
                },
                tree_selector: {
                    ajax: {
                        url: Routing.generate(
                            prefixRoute + '_categorytree_listtree',
                            {
                                _format: 'json',
                                select_node_id: selectedNodeOrTree,
                                context: 'manage',
                                with_items_count: 0
                            }
                        )
                    },
                    auto_open_root: true,
                    node_label_field: 'label',
                    no_tree_message: _.__('jstree.no_tree'),
                    preselect_node_id: selectedNode
                },
                themes: {
                    dots: true,
                    icons: true
                },
                json_data: {
                    ajax: {
                        url: Routing.generate(
                            prefixRoute + '_categorytree_children',
                            {
                                _format: 'json',
                                context: 'manage'
                            }
                        ),
                        data: function (node) {
                            // the result is fed to the AJAX request `data` option
                            var id = null;

                            if (node && node !== -1 && node.attr) {
                                id = node.attr('id').replace('node_', '');
                            } else {
                                id = -1;
                            }

                            return {
                                id: id,
                                select_node_id: selectedNode,
                                with_items_count: 0
                            };
                        }
                    }
                },
                types: {
                    max_depth: -2,
                    max_children: -2,
                    valid_children: ['folder'],
                    types: {
                        'default': {
                            valid_children: 'folder'
                        }
                    }
                },
                ui: {
                    select_limit: 1,
                    select_multiple_modifier: false
                }
            };
            if ($el.attr('data-editable')) {
                this.config.plugins.push('dnd');
            }
            if ($el.attr('data-creatable')) {
                this.config.plugins.push('contextmenu');
            }
            this.init = function () {
                $el.jstree(this.config).bind('move_node.jstree', function (e, data) {
                    var this_jstree = $.jstree._focused();
                    data.rslt.o.each(function (i) {
                        $.ajax({
                            async: false,
                            type: 'POST',
                            url: Routing.generate(prefixRoute + '_categorytree_movenode'),
                            data: {
                                id: $(this).attr('id').replace('node_', ''),
                                parent: data.rslt.cr === -1 ? 1 : data.rslt.np.attr('id').replace('node_', ''),
                                prev_sibling: this_jstree._get_prev(this, true) ?
                                    this_jstree._get_prev(this, true).attr('id').replace('node_', '') : null,
                                position: data.rslt.cp + i,
                                code: data.rslt.name,
                                copy: data.rslt.cy ? 1 : 0
                            },
                            success: function (r) {
                                if (!r.status) {
                                    this_jstree.rollback(data.rlbk);
                                } else {
                                    $(data.rslt.oc).attr('id', r.id);
                                    if (data.rslt.cy && $(data.rslt.oc).children('UL').length) {
                                        data.inst.refresh(data.inst._get_parent(data.rslt.oc));
                                    }
                                }
                            }
                        });
                    });
                }).bind('select_node.jstree', function (e, data) {
                    if (!$el.attr('data-editable')) {
                        return;
                    }
                    var id  = data.rslt.obj.attr('id').replace('node_', '');
                    var url = Routing.generate(prefixRoute + '_categorytree_edit', { id: id });
                    if ('#' + url === Backbone.history.location.hash || preventFirst) {
                        preventFirst = false;

                        return;
                    }
                    loadingMask.show();
                    $.ajax({
                        async: true,
                        type: 'GET',
                        url: url + '?content=form',
                        success: function (data) {
                            if (data) {
                                $('#category-form').html(data);
                                Backbone.history.navigate('#' + url, {trigger: false});
                                UI($('#category-form'));
                                loadingMask.hide();
                            }
                        },
                        error: function (jqXHR) {
                            OroError.dispatch(null, jqXHR);
                            loadingMask.hide();
                        }
                    });
                }).bind('loaded.jstree', function (event, data) {
                    if (event.namespace === 'jstree') {
                        data.inst.get_tree_select().select2({ width: '100%' });
                    }
                }).bind('create.jstree', function (e, data) {
                    $.jstree._focused().lock();
                    var id       = data.rslt.parent.attr('id').replace('node_', '');
                    var url      = Routing.generate(prefixRoute + '_categorytree_create', { parent: id });
                    var position = data.rslt.position;
                    var label    = data.rslt.name;

                    url = url + '?label=' + label + '&position=' + position;
                    loadingMask.show();
                    $.ajax({
                        async: true,
                        type: 'GET',
                        url: url + '&content=form',
                        success: function (data) {
                            if (data) {
                                $('#category-form').html(data);
                                Backbone.history.navigate('#' + url, {trigger: false});
                                loadingMask.hide();
                            }
                        },
                        error: function (jqXHR) {
                            OroError.dispatch(null, jqXHR);
                            loadingMask.hide();
                        }
                    });
                });
            };

            this.init();
        };
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 547 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/variant-group/form/attributes/add-select/attribute/select.js ***!
  \**********************************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Variant group edit form add attribute select extension view
 *
 * @author    Alexandr Jeliuc <alex@jeliuc.com>
 * @copyright 2017 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/product/add-select/attribute */ 169)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        AddAttributeSelect
    ) {
        return AddAttributeSelect.extend({
            /**
             * {@inheritdoc}
             */
            getItemsToExclude: function () {
                return AddAttributeSelect.prototype.getItemsToExclude.apply(this, arguments)
                    .then(function (excludedAttributes) {
                        return _.union(
                            excludedAttributes,
                            this.getFormData().axes
                        );
                    }.bind(this));
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));



/***/ }),
/* 548 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/variant-group/form/delete.js ***!
  \**************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Delete extension for variant groups
 *
 * @author    Clement Gautier <clement.gautier@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! pim/form/common/delete */ 154), __webpack_require__(/*! pim/remover/variant-group */ 355)], __WEBPACK_AMD_DEFINE_RESULT__ = function (DeleteForm, VariantGroupRemover) {
    return DeleteForm.extend({
        remover: VariantGroupRemover
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 549 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/variant-group/form/no-attribute.js ***!
  \********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Module used to display when no attribute are available
 *
 * @author    Clement Gautier <clement.gautier@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/variant-group/form/no-attribute */ 313)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        __,
        BaseForm,
        template
    ) {
        return BaseForm.extend({
            template: _.template(template),
            className: 'AknAttributeActions-help no-attribute',

            /**
             * {@inheritdoc}
             */
            configure: function () {
                this.listenTo(this.getRoot(), 'pim_enrich:form:entity:update_state', this.render);
                this.listenTo(this.getRoot(), 'pim_enrich:form:field:to-fill-filter', this.addFieldFilter);

                BaseForm.prototype.configure.apply(this, arguments);
            },

            /**
             * {@inheritdoc}
             */
            render: function () {
                var variantGroup = this.getFormData();
                this.$el.empty();

                if (_.isEmpty(variantGroup.values)) {
                    this.$el.append(this.template({
                        label: __('pim_enrich.entity.variant_group.info.no_attributes')
                    }));
                }

                return this;
            },

            /**
             * Add filter on field to make it readonly.
             *
             * @param {object} event
             */
            addFieldFilter: function (event) {
                event.filters.push($.Deferred().resolve(function () {
                    return [];
                }));
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 550 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/variant-group/form/properties/general.js ***!
  \**************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Module used to display the generals properties of a variant group
 *
 * @author    Clement Gautier <clement.gautier@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/fetcher-registry */ 10),
        __webpack_require__(/*! pim/template/variant-group/tab/properties/general */ 314),
        __webpack_require__(/*! jquery.select2 */ 29)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        __,
        BaseForm,
        FetcherRegistry,
        template
    ) {
        return BaseForm.extend({
            className: 'tabsection',
            template: _.template(template),

            /**
             * {@inheritdoc}
             */
            render: function () {
                this.$el.html(this.template({
                    model: this.getFormData(),
                    sectionTitle: __('pim_enrich.form.variant_group.tab.properties.general'),
                    codeLabel: __('pim_enrich.form.variant_group.tab.properties.code'),
                    typeLabel: __('pim_enrich.form.variant_group.tab.properties.type'),
                    axisLabel: __('pim_enrich.form.variant_group.tab.properties.axis'),
                    __: __
                }));

                this.$el.find('select.select2').select2({});

                this.renderExtensions();
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 551 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************************!*\
  !*** ./src/Pim/Bundle/EnrichBundle/Resources/public/js/variant-group/form/save.js ***!
  \************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Save extension for Variant Group
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2016 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! oro/translator */ 3),
        __webpack_require__(/*! pim/form/common/save */ 159),
        __webpack_require__(/*! oro/messenger */ 16),
        __webpack_require__(/*! pim/variant-group-manager */ 339),
        __webpack_require__(/*! pim/saver/variant-group */ 363),
        __webpack_require__(/*! pim/field-manager */ 150),
        __webpack_require__(/*! pim/i18n */ 17),
        __webpack_require__(/*! pim/user-context */ 5)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        $,
        _,
        __,
        BaseSave,
        messenger,
        VariantGroupManager,
        VariantGroupSaver,
        FieldManager,
        i18n,
        UserContext
    ) {
        return BaseSave.extend({
            updateSuccessMessage: __('pim_enrich.entity.variant_group.info.update_successful'),
            updateFailureMessage: __('pim_enrich.entity.variant_group.info.update_failed'),

            /**
             * {@inheritdoc}
             */
            save: function () {
                var variantGroup = $.extend(true, {}, this.getFormData());

                delete variantGroup.meta;

                var notReadyFields = FieldManager.getNotReadyFields();

                if (0 < notReadyFields.length) {
                    var fieldLabels = _.map(notReadyFields, function (field) {
                        return i18n.getLabel(
                            field.attribute.label,
                            UserContext.get('catalogLocale'),
                            field.attribute.code
                        );
                    });

                    messenger.notificationFlashMessage(
                        'error',
                        __('pim_enrich.entity.variant_group.info.field_not_ready', {'fields': fieldLabels.join(', ')})
                    );

                    return;
                }

                this.showLoadingMask();
                this.getRoot().trigger('pim_enrich:form:entity:pre_save');

                return VariantGroupSaver
                    .save(variantGroup.code, variantGroup)
                    .then(VariantGroupManager.generateMissing.bind(VariantGroupManager))
                    .then(function (data) {
                        this.postSave();

                        this.setData(data);
                        this.getRoot().trigger('pim_enrich:form:entity:post_fetch', data);
                    }.bind(this))
                    .fail(this.fail.bind(this))
                    .always(this.hideLoadingMask.bind(this));
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 552 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************************************************!*\
  !*** ./src/Pim/Bundle/ImportExportBundle/Resources/public/js/job-execution-view.js ***!
  \*************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1), __webpack_require__(/*! backbone */ 2), __webpack_require__(/*! underscore */ 0), __webpack_require__(/*! oro/translator */ 3)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, Backbone, _, __) {
        'use strict';
        var interval;
        var loading = false;

        var JobExecution = Backbone.Model.extend({
            path: null,
            initialize: function (params) {
                if (!_.has(params, 'path')) {
                    throw new Error('A "path" parameter is required');
                }
                this.path = params.path;
                Backbone.Model.prototype.initialize.apply(this, arguments);
            },
            url: function () {
                return this.path;
            }
        });

        var JobExecutionView = Backbone.View.extend({
            showLabel: __('job_execution.summary.display_item'),
            hideLabel: __('job_execution.summary.hide_item'),

            initialize: function (params) {
                this.showLabel            = params.showLabel || this.showLabel;
                this.hideLabel            = params.hideLabel || this.hideLabel;
                this.loadingImageSelector = params.loadingImageSelector;

                this.listenTo(this.model, 'change', this.render);
                this.model.bind('request', this.ajaxStart, this);
                this.model.bind('sync', this.ajaxComplete, this);
                this.model.bind('error', this.ajaxError, this);
            },

            ajaxStart: function () {
                loading = true;
                $(this.loadingImageSelector).removeClass('transparent');
            },

            ajaxComplete: function (model, resp) {
                $(this.loadingImageSelector).addClass('transparent');
                if (!resp.jobExecution.isRunning) {
                    clearInterval(interval);
                    interval = null;
                }
                loading = false;
            },

            ajaxError: function (model, resp, options) {
                $(this.loadingImageSelector).addClass('transparent');
                clearInterval(interval);
                interval = null;
                this.$el.html(
                    '<tr><td colspan="5"><span class="AknBadge AknBadge--important">' +
                        options.xhr.statusText +
                    '</span></td></tr>'
                );
                loading = false;
            },

            events: {
                'click a.data': 'toggleData'
            },

            toggleData: function (event) {
                event.preventDefault();

                var $link        = $(event.currentTarget);
                var displayLabel = $link.data('display-label');
                var hideLabel    = $link.data('hide-label');

                $link.siblings('table').toggleClass('hide');
                $link.text($link.text().trim() === displayLabel ? hideLabel : displayLabel);
            },

            template: _.template($('#job-execution-summary').html()),

            render: function () {
                this.$el.html(
                    this.template(
                        _.extend(
                            {
                                showLabel: this.showLabel,
                                hideLabel: this.hideLabel
                            },
                            this.model.toJSON()
                        )
                    )
                );

                return this;
            }
        });

        var JobExecutionStatusView = Backbone.View.extend({
            statusLabel: 'Status',
            initialize: function (params) {
                this.statusLabel = params.statusLabel || this.statusLabel;

                this.listenTo(this.model, 'change', this.render);
            },

            template: _.template($('#job-execution-status').html()),

            render: function () {
                this.$el.html(
                    this.template(
                        _.extend(
                            {
                                statusLabel: this.statusLabel
                            },
                            this.model.toJSON()
                        )
                    )
                );

                return this;
            }
        });

        var JobExecutionButtonsView = Backbone.View.extend({
            downloadFileRoute: null,
            executionId: null,

            initialize: function (params) {
                if (!_.has(params, 'downloadFileRoute')) {
                    throw new Error('A "downloadFileRoute" parameter is required');
                }
                if (!_.has(params, 'executionId')) {
                    throw new Error('A "executionId" parameter is required');
                }

                this.downloadFileRoute = params.downloadFileRoute;
                this.executionId       = params.executionId;

                this.listenTo(this.model, 'change', this.render);
            },

            template: _.template($('#job-execution-buttons').html()),

            render: function () {
                this.$el.html(
                    this.template(
                        _.extend(
                            {
                                downloadFileRoute: this.downloadFileRoute,
                                executionId: this.executionId
                            },
                            this.model.toJSON()
                        )
                    )
                );

                return this;
            }
        });

        var JobExecutionLogButtonView = Backbone.View.extend({
            downloadLogRoute: null,
            executionId: null,
            downloadLabel: 'Download log',

            initialize: function (params) {
                if (!_.has(params, 'downloadLogRoute')) {
                    throw new Error('A "downloadLogRoute" parameter is required');
                }
                if (!_.has(params, 'executionId')) {
                    throw new Error('A "executionId" parameter is required');
                }

                this.downloadLogRoute = params.downloadLogRoute;
                this.executionId      = params.executionId;
                this.downloadLabel    = params.downloadLabel || this.downloadLabel;

                this.listenTo(this.model, 'change', this.render);
            },

            template: _.template($('#job-execution-log-button').html()),

            render: function () {
                this.$el.html(
                    this.template(
                        _.extend(
                            {
                                downloadLogRoute: this.downloadLogRoute,
                                executionId: this.executionId,
                                downloadLabel: this.downloadLabel
                            },
                            this.model.toJSON()
                        )
                    )
                );

                return this;
            }
        });

        return {
            init: function (params) {
                if (!_.has(params, 'loadingImageSelector')) {
                    throw new Error('A "loadingImageSelector" parameter is required');
                }
                if (!_.has(params, 'refreshButtonSelector')) {
                    throw new Error('A "refreshButtonSelector" parameter is required');
                }

                var jobExecution = new JobExecution(params);
                loading = true;
                jobExecution.fetch();

                params.model = jobExecution;

                new JobExecutionView(_.extend(params, {el: params.jobExecutionSelector}));
                new JobExecutionStatusView(_.extend(params, {el: params.jobExecutionStatusSelector}));
                new JobExecutionButtonsView(_.extend(params, {el: params.jobExecutionButtonsSelector}));
                new JobExecutionLogButtonView(_.extend(params, {el: params.jobExecutionLogButtonSelector}));

                var displayRefreshLink = function () {
                    $(params.loadingImageSelector).hide();
                    $(params.refreshButtonSelector).removeClass('transparent');
                };

                interval = setInterval(function () {
                    if (!loading) {
                        jobExecution.fetch();
                    }
                }, 1000);

                // Clear interval when changing page to prevent continuing to sync object on other pages
                Backbone.Router.prototype.on('route', function () {
                    clearInterval(interval);
                });

                setTimeout(function () {
                    if (null !== interval) {
                        clearInterval(interval);
                        displayRefreshLink();
                    }
                }, 120000);
            }
        };
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 553 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************************!*\
  !*** ./src/Pim/Bundle/NavigationBundle/Resources/public/js/navigation/favorites/view.js ***!
  \******************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global define */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ 0), __webpack_require__(/*! backbone */ 2), __webpack_require__(/*! oro/app */ 19), __webpack_require__(/*! oro/mediator */ 6), __webpack_require__(/*! oro/error */ 47),
    __webpack_require__(/*! oro/navigation/abstract-view */ 187), __webpack_require__(/*! oro/navigation/model */ 170), __webpack_require__(/*! oro/navigation/collection */ 188)], __WEBPACK_AMD_DEFINE_RESULT__ = function(_, Backbone, app, mediator, error,
     AbstractView, NavigationModel, NavigationCollection) {
    'use strict';

    /**
     * @export  oro/navigation/favorites/view
     * @class   oro.navigation.favorites.View
     * @extends oro.navigation.AbstractView
     */
    return AbstractView.extend({
        options: {
            el: '.favorite-button',
            tabTitle: 'Favorites',
            tabIcon: 'icon-star-empty',
            tabId: 'favorite'
        },

        events: {
            'click': 'toggleItem'
        },

        initialize: function() {
            AbstractView.prototype.initialize.apply(this, arguments);
            if (!this.options.collection) {
                /** @type {oro.navigation.Collection} */
                this.options.collection = new NavigationCollection();
            }

            this.listenTo(this.getCollection(), 'add', this.addItemToTab);
            this.listenTo(this.getCollection(), 'reset', this.addAll);
            this.listenTo(this.getCollection(), 'all', this.render);

            this.$icon = this.$('i');

            this.registerTab();
            this.cleanupTab();
            /**
             * Render links in favorites menu after hash navigation request is completed
             */
            mediator.bind(
                "hash_navigation_request:complete",
                function() {
                    this.render();
                },
                this
            );
        },

        activate: function() {
            this.$icon.closest('.AknIconButton').addClass('AknIconButton--gold');
        },

        inactivate: function() {
            this.$icon.closest('.AknIconButton').removeClass('AknIconButton--gold');
        },

        toggleItem: function(e) {
            var self = this;
            var current = this.getItemForCurrentPage();
            if (current.length) {
                _.each(current, function(item) {
                    item.destroy({
                        wait: false, // This option affects correct disabling of favorites icon
                        error: function(model, xhr, options) {
                            if (xhr.status == 404 && !app.debug) {
                                // Suppress error if it's 404 response and not debug mode
                                self.inactivate();
                            } else {
                                error.dispatch(model, xhr, options);
                            }
                        }
                    });
                });
            } else {
                var itemData = this.getNewItemData(Backbone.$(e.currentTarget));
                itemData.type = 'favorite';
                itemData.position = this.getCollection().length;
                /** @type {oro.navigation.Model} */
                var currentItem = new NavigationModel(itemData);
                this.getCollection().unshift(currentItem);
                currentItem.save();
            }
        },

        addAll: function(items) {
            items.each(function(item) {
                this.addItemToTab(item);
            }, this);
        },

        render: function() {
            this.checkTabContent();
            if (this.getItemForCurrentPage().length) {
                this.activate();
            } else {
                this.inactivate();
            }
            /**
             * Backbone event. Fired when tab is changed
             * @event tab:changed
             */
            mediator.trigger("tab:changed", this.options.tabId);
            return this;
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 554 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************************!*\
  !*** ./src/Pim/Bundle/NavigationBundle/Resources/public/js/navigation/pinbar/view.js ***!
  \***************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1), __webpack_require__(/*! underscore */ 0), __webpack_require__(/*! backbone */ 2), __webpack_require__(/*! oro/mediator */ 6), __webpack_require__(/*! oro/navigation/abstract-view */ 187),
    __webpack_require__(/*! oro/navigation/pinbar/item-view */ 368), __webpack_require__(/*! oro/navigation/pinbar/collection */ 367), __webpack_require__(/*! oro/navigation/pinbar/model */ 189)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, _, Backbone, mediator, AbstractView,
    PinbarItemView, PinbarCollection, PinbarModel) {
    'use strict';

    /**
     * @export  oro/navigation/pinbar/view
     * @class   oro.navigation.pinbar.View
     * @extends oro.navigation.AbstractView
     */
    return AbstractView.extend({
        options: {
            maxItems: 10,
            tabTitle: 'Pinbar',
            tabIcon: 'icon-folder-close',
            el: '.pin-bar',
            listBar: '.list-bar',
            minimizeButton: '.minimize-button',
            defaultUrl: '/',
            tabId: 'pinbar',
            collection: null
        },

        requireCleanup: true,
        massAdd: false,

        templates: {
            noItemsMessage: _.template($("#template-no-pins-message").html())
        },

        initialize: function() {
            AbstractView.prototype.initialize.apply(this, arguments);
            this.$listBar = this.getBackboneElement(this.options.listBar);
            this.$minimizeButton = Backbone.$(this.options.minimizeButton);
            this.$icon = this.$minimizeButton.find('i');

            if (!this.options.collection) {
                this.options.collection = new PinbarCollection();
            }

            this.listenTo(this.options.collection, 'add', function(item) {this.setItemPosition(item)});
            this.listenTo(this.options.collection, 'remove', this.onPageClose);
            this.listenTo(this.options.collection, 'reset', this.addAll);
            this.listenTo(this.options.collection, 'all', this.render);

            this.listenTo(this.options.collection, 'positionChange', this.renderItem);
            this.listenTo(this.options.collection, 'stateChange', this.handleItemStateChange);
            this.listenTo(this.options.collection, 'urlChange', this.renderItem);

            /**
             * Changing pinbar state after grid is loaded
             */
            mediator.bind(
                "grid_load:complete",
                this.updatePinbarState,
                this
            );

            /**
             * Change pinbar icon state after hash navigation request is completed
             */
            mediator.bind(
                "route_complete",
                this.checkPinbarIcon,
                this
            );

            this.$minimizeButton.click(_.bind(this.changePageState, this));

            this.registerTab();
            this.cleanup();
            this.render();
        },

        resetCollection: function() {
            this.options.collection.reset.apply(this.options.collection, arguments);
        },

        /**
         * Get backbone DOM element
         *
         * @param el
         * @return {*}
         */
        getBackboneElement: function(el) {
            return el instanceof Backbone.$ ? el : this.$(el);
        },

        /**
         * Handle item minimize/maximize state change
         *
         * @param item
         */
        handleItemStateChange: function(item) {
            if (!this.massAdd) {
                var url = null,
                    changeLocation = item.get('maximized');
                if (changeLocation) {
                    url = item.get('url');
                }
                if (url != this.getCurrentPageItemData().url) {
                    if (changeLocation) {
                        Backbone.history.navigate('#/' + url);
                    }
                    item.save(
                        null,
                        {
                            wait: true,
                            success: _.bind(function () {
                                this.checkPinbarIcon();
                            }, this)
                        }
                    );
                }
            }
        },

        checkPinbarIcon: function() {
            if (this.getItemForCurrentPage().length) {
                this.activate();
            } else {
                this.inactivate();
            }
        },

        /**
         * Handle page close
         */
        onPageClose: function(item) {
            this.checkPinbarIcon();
            this.reorder();
        },

        /**
         * Handle minimize/maximize page.
         *
         * @param e
         */
        changePageState: function(e) {
            var item = this.getItemForCurrentPage(true);
            if (item.length) {
                this.closePage(item);
            } else {
                this.minimizePage(e);
            }
        },

        /**
         * Handle minimize page.
         *
         * @param e
         */
        minimizePage: function(e) {
            mediator.trigger('pinbar_item_minimized');
            this.updatePinbarState();
            var pinnedItem = this.getItemForCurrentPage(true);
            if (pinnedItem.length) {
                _.each(pinnedItem, function(item) {
                    item.set('maximized', false);
                }, this);
            } else {
                var newItem = this.getNewItemData(Backbone.$(e.currentTarget));
                var currentItem = new PinbarModel(newItem);
                this.options.collection.unshift(currentItem);
                this.handleItemStateChange(currentItem);
            }
        },

        /**
         *  Update current page item state to use new url
         */
        updatePinbarState: function() {
            var pinnedItem = this.getItemForCurrentPage(true);
            if (pinnedItem.length) {
                var hashUrl = Backbone.history.getFragment();
                _.each(pinnedItem, function(item) {
                    if (item.get('url') !== hashUrl) {
                        item.set('url', hashUrl);
                        item.save();
                    }
                }, this);
            }
        },

        /**
         * Handle pinbar close
         *
         * @param item
         */
        closePage: function(item) {
            _.each(item, function(item) {
                item.set('remove', true);
            });
        },

        /**
         * Mass add items
         */
        addAll: function() {
            this.massAdd = true;
            this.markCurrentPageMaximized();
            this.options.collection.each(this.setItemPosition, this);
            this.massAdd = false;
        },

        /**
         * Mark current page as maximized to be able to minimize.
         */
        markCurrentPageMaximized: function()
        {
            var currentPageItems = this.getItemForCurrentPage(true);
            if (currentPageItems.length) {
                _.each(currentPageItems, function(item) {
                    item.set('maximized', new Date().toISOString());
                });
            }
        },

        /**
         * Set item position if given or reorder items.
         *
         * @param {oro.navigation.pinbar.Model} item
         * @param {number} position
         */
        setItemPosition: function(item, position) {
            if (_.isUndefined(position)) {
                this.reorder();
            } else {
                item.set({position: position});
            }
        },

        /**
         * Change position property of model based on current order
         */
        reorder: function() {
            this.options.collection.each(function(item, position) {
                item.set({position: position});
            });
        },

        activate: function() {
            this.$icon.closest('.AknIconButton').addClass('AknIconButton--gold');
        },

        inactivate: function() {
            this.$icon.closest('.AknIconButton').removeClass('AknIconButton--gold');
        },

        /**
         * Choose container and add item to it.
         *
         * @param {oro.navigation.pinbar.Model} item
         */
        renderItem: function(item) {
            var position = item.get('position');
            var type = position >= this.options.maxItems ? 'tab': 'list';

            if (item.get('display_type') != type) {
                this.cleanup();
                item.set('display_type', type);

                var view = new PinbarItemView({
                    type: type,
                    model: item
                });

                if (type == 'tab') {
                    this.addItemToTab(view, !this.massAdd);
                    /**
                     * Backbone event. Fired when tab is changed
                     * @event tab:changed
                     */
                    mediator.trigger("tab:changed", this.options.tabId);
                } else {
                    var rowEl = view.render().el;
                    if (this.massAdd || position > 0) {
                        this.$listBar.append(rowEl);
                    } else {
                        this.$listBar.prepend(rowEl);
                    }
                }
            }
        },

        /**
         * Checks if pinbar tab in 3 dots menu is used
         *
         * @return {Boolean}
         */
        needPinbarTab: function() {
            return (this.options.collection.length > this.options.maxItems);
        },

        /**
         * Clean up all pinbar items from menus
         */
        cleanup: function()
        {
            if (this.requireCleanup) {
                this.$listBar.empty();
                this.cleanupTab();
                this.requireCleanup = false;
            }
        },

        /**
         * Renders pinbar empty message if no items
         * Show/hide tabs section in ... menu on each event
         */
        render: function() {
            if (!this.massAdd) {
                if (this.options.collection.length == 0) {
                    this.requireCleanup = true;
                    this.$listBar.html(this.templates.noItemsMessage());
                    /**
                     * Backbone event. Fired when pinbar help link is shown
                     * @event pinbar_help:shown
                     */
                    mediator.trigger("pinbar_help:shown");
                }

                this.checkTabContent();
                /**
                 * Backbone event. Fired when tab is changed
                 * @event tab:changed
                 */
                mediator.trigger("tab:changed", this.options.tabId);
            }
        }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 555 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************************!*\
  !*** ./src/Pim/Bundle/NavigationBundle/Resources/public/lib/url/url.min.js ***!
  \*****************************************************************************/
/***/ (function(module, exports) {

;var Url=(function(){"use strict";var j={protocol:'protocol',host:'hostname',port:'port',path:'pathname',query:'search',hash:'hash'},parse=function(a,b){var d=document,link=d.createElement('a'),b=b||d.location.href,auth=b.match(/\/\/(.*?)(?::(.*?))?@/)||[];link.href=b;for(var i in j){a[i]=link[j[i]]||''}a.protocol=a.protocol.replace(/:$/,'');a.query=a.query.replace(/^\?/,'');a.hash=a.hash.replace(/^#/,'');a.user=auth[1]||'';a.pass=auth[2]||'';parseQs(a)},decode=function(s){s=s.replace(/\+/g,' ');s=s.replace(/%([EF][0-9A-F])%([89AB][0-9A-F])%([89AB][0-9A-F])/g,function(a,b,c,d){var e=parseInt(b,16)-0xE0,n2=parseInt(c,16)-0x80;if(e==0&&n2<32){return a}var f=parseInt(d,16)-0x80,n=(e<<12)+(n2<<6)+f;if(n>0xFFFF){return a}return String.fromCharCode(n)});s=s.replace(/%([CD][0-9A-F])%([89AB][0-9A-F])/g,function(a,b,c){var d=parseInt(b,16)-0xC0;if(d<2){return a}var e=parseInt(c,16)-0x80;return String.fromCharCode((d<<6)+e)});s=s.replace(/%([0-7][0-9A-F])/g,function(a,b){return String.fromCharCode(parseInt(b,16))});return s},parseQs=function(g){var h=g.query;g.query=new(function(c){var d=/([^=&]+)(=([^&]*))?/g,match;while((match=d.exec(c))){var f=decodeURIComponent(match[1].replace(/\+/g,' ')),value=match[3]?decode(match[3]):'';if(this[f]!==undefined){if(!(this[f]instanceof Array)){this[f]=[this[f]]}this[f].push(value)}else{this[f]=value}}this.toString=function(){var s='',e=encodeURIComponent;for(var i in this){if(this[i]instanceof Function){continue}if(this[i]instanceof Array){var a=this[i].length;if(a){for(var b=0;b<a;b++){s+=s?'&':'';s+=e(i)+'='+e(this[i][b])}}else{s+=(s?'&':'')+e(i)+'='}}else{s+=s?'&':'';s+=e(i)+'='+e(this[i])}}return s}})(h)};return function(a){this.toString=function(){return((this.protocol&&(this.protocol+'://'))+(this.user&&(this.user+(this.pass&&(':'+this.pass))+'@'))+(this.host&&this.host)+(this.port&&(':'+this.port))+(this.path&&this.path)+(this.query.toString()&&('?'+this.query))+(this.hash&&('#'+this.hash)))};parse(this,a)}}());


/***/ }),
/* 556 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************************!*\
  !*** ./src/Pim/Bundle/NotificationBundle/Resources/public/js/notifications.js ***!
  \********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! backbone */ 2),
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! pim/notification-list */ 370),
        __webpack_require__(/*! pim/indicator */ 369),
        __webpack_require__(/*! pim/template/notification/notification */ 317),
        __webpack_require__(/*! pim/template/notification/notification-footer */ 315)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (Backbone, $, _, Routing, NotificationList, Indicator, notificationTpl, notificationFooterTpl) {
        'use strict';

        var Notifications = Backbone.View.extend({
            el: '#header-notification-widget',

            options: {
                imgUrl:                 '',
                loadingText:            null,
                noNotificationsMessage: null,
                markAsReadMessage:      null,
                indicatorBaseClass:     'AknBell-count',
                indicatorEmptyClass:    'AknBell-count--hidden',
                refreshInterval:        30000
            },

            freezeCount: false,

            refreshTimeout: null,

            refreshLocked: false,

            template: _.template(notificationTpl),

            footerTemplate: _.template(notificationFooterTpl),

            events: {
                'click a.dropdown-toggle':   'onOpen',
                'click button.mark-as-read': 'markAllAsRead'
            },

            markAllAsRead: function (e) {
                e.stopPropagation();
                e.preventDefault();

                $.ajax({
                    type: 'POST',
                    url: Routing.generate('pim_notification_notification_mark_viewed'),
                    async: true
                });

                this.collection.trigger('mark_as_read', null);
                _.each(this.collection.models, function (model) {
                    model.set('viewed', true);
                });
            },

            initialize: function (opts) {
                this.options = _.extend({}, this.options, opts);
                this.collection = new NotificationList();
                this.indicator  = new Indicator({
                    el: this.$('.AknBell-countContainer'),
                    value: 0,
                    className: this.options.indicatorBaseClass,
                    emptyClass: this.options.indicatorEmptyClass
                });

                this.collection.on('load:unreadCount', function (count, reset) {
                    this.scheduleRefresh();
                    if (this.freezeCount) {
                        this.freezeCount = false;

                        return;
                    }
                    if (this.indicator.get('value') !== count) {
                        this.indicator.set('value', count);
                        if (reset) {
                            this.collection.hasMore = true;
                            this.collection.reset();
                            this.renderFooter();
                        }
                    }
                }, this);

                this.collection.on('mark_as_read', function (id) {
                    var value = null === id ? 0 : this.indicator.get('value') - 1;
                    this.indicator.set('value', value);
                    if (0 === value) {
                        this.renderFooter();
                    }
                    if (null !== id) {
                        this.freezeCount = true;
                    }
                }, this);

                this.collection.on('loading:start loading:finish remove', this.renderFooter, this);

                this.render();

                this.scheduleRefresh();
            },

            scheduleRefresh: function () {
                if (this.refreshLocked) {
                    return;
                }
                if (null !== this.refreshTimeout) {
                    clearTimeout(this.refreshTimeout);
                }

                this.refreshTimeout = setTimeout(_.bind(function () {
                    this.refreshLocked = true;
                    $.getJSON(Routing.generate('pim_notification_notification_count_unread'))
                        .then(_.bind(function (count) {
                            this.refreshLocked = false;
                            this.collection.trigger('load:unreadCount', count, true);
                        }, this));
                }, this), this.options.refreshInterval);
            },

            onOpen: function () {
                if (!this.collection.length) {
                    this.collection.loadNotifications();
                }
            },

            render: function () {
                this.setElement($('#header-notification-widget'));
                this.$el.html(this.template());
                this.collection.setElement(this.$('ul'));
                this.indicator.setElement(this.$('.AknBell-countContainer'));
                this.renderFooter();
            },

            renderFooter: function () {
                this.$('p').remove();

                this.$('ul').append(
                    this.footerTemplate({
                        options:          this.options,
                        loading:          this.collection.loading,
                        hasNotifications: this.collection.length > 0,
                        hasMore:          this.collection.hasMore,
                        hasUnread:        this.indicator.get('value') > 0
                    })
                );
            }
        });

        var notifications;

        return {
            init: function (options) {
                if (notifications) {
                    notifications.render();
                } else {
                    notifications = new Notifications(options);
                }
                if (_.has(options, 'unreadCount')) {
                    notifications.collection.trigger('load:unreadCount', options.unreadCount, true);
                }
            }
        };
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 557 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************************************************!*\
  !*** ./src/Pim/Bundle/ReferenceDataBundle/Resources/public/js/product/field/reference-multi-select-field.js ***!
  \**************************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/multi-select-field */ 341),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! pim/fetcher-registry */ 10)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, MultiselectField, Routing, FetcherRegistry) {
        return MultiselectField.extend({
            fieldType: 'reference-multi-select',
            getTemplateContext: function () {
                return MultiselectField.prototype.getTemplateContext.apply(this, arguments)
                    .then(function (templateContext) {
                        templateContext.userCanAddOption = false;

                        return templateContext;
                    });
            },
            getChoiceUrl: function () {
                return FetcherRegistry.getFetcher('reference-data-configuration').fetchAll()
                    .then(_.bind(function (config) {
                        return Routing.generate(
                            'pim_ui_ajaxentity_list',
                            {
                                'class': config[this.attribute.reference_data_name].class,
                                'dataLocale': this.context.locale,
                                'collectionId': this.attribute.id,
                                'options': {'type': 'code'}
                            }
                        );
                    }, this));
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 558 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************************************************************!*\
  !*** ./src/Pim/Bundle/ReferenceDataBundle/Resources/public/js/product/field/reference-simple-select-field.js ***!
  \***************************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! pim/simple-select-field */ 342),
        __webpack_require__(/*! routing */ 4),
        __webpack_require__(/*! pim/fetcher-registry */ 10)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, SimpleselectField, Routing, FetcherRegistry) {
        return SimpleselectField.extend({
            fieldType: 'reference-simple-select',
            getTemplateContext: function () {
                return SimpleselectField.prototype.getTemplateContext.apply(this, arguments)
                    .then(function (templateContext) {
                        templateContext.userCanAddOption = false;

                        return templateContext;
                    });
            },
            getChoiceUrl: function () {
                return FetcherRegistry.getFetcher('reference-data-configuration').fetchAll()
                    .then(_.bind(function (config) {
                        return Routing.generate(
                            'pim_ui_ajaxentity_list',
                            {
                                'class': config[this.attribute.reference_data_name].class,
                                'dataLocale': this.context.locale,
                                'collectionId': this.attribute.id,
                                'options': {'type': 'code'}
                            }
                        );
                    }, this));
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 559 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************!*\
  !*** ./src/Pim/Bundle/UIBundle/Resources/public/js/form/state.js ***!
  \*******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global confirm */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ 0), __webpack_require__(/*! backbone */ 2), __webpack_require__(/*! oro/mediator */ 6), __webpack_require__(/*! oro/translator */ 3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, Backbone, mediator, __) {
        'use strict';

        var $ = Backbone.$;

        var formState = function () {
            this.initialize.apply(this, arguments);
        };

        _.extend(formState.prototype, {
            UNLOAD_EVENT: 'beforeunload.configFormState',
            LOAD_EVENT: 'ready.configFormState',
            FORM_SELECTOR: '.system-configuration-container form:first',
            CONFIRMATION_MESSAGE: __('You have unsaved changes, are you sure that you want to leave?'),

            data: null,

            initialize: function () {
                mediator.once('hash_navigation_request:start', this._onDestroyHandler, this);

                $(window).on(this.LOAD_EVENT, _.bind(this._collectHandler, this));
                this._collectHandler();

                $(window).on(this.UNLOAD_EVENT, _.bind(function () {
                    if (this.isChanged()) {
                        return this.CONFIRMATION_MESSAGE;
                    }
                }, this));
                mediator.on('hash_navigation_click', this._confirmHashChange, this);
            },

            /**
             * Check is form changed
             *
             * @returns {boolean}
             */
            isChanged: function () {
                if (!_.isNull(this.data)) {
                    return this.data !== this.getState();
                }

                return false;
            },

            /**
             * Collect form state
             *
             * @returns {*}
             */
            getState: function () {
                var form = $(this.FORM_SELECTOR);

                if (form.length) {
                    return JSON.stringify(
                        _.reject(
                            $(this.FORM_SELECTOR).serializeArray(),
                            function (el) {
                                return el.name === 'input_action';
                            }
                        )
                    );
                }

                return false;
            },

            /**
             * Hash change event handler
             *
             * @param event
             * @private
             */
            _confirmHashChange: function (event) {
                if (this.isChanged()) {
                    event.stoppedProcess = !confirm(this.CONFIRMATION_MESSAGE);
                }
            },

            /**
             * Collecting event handler
             *
             * @private
             */
            _collectHandler: function () {
                this.data = this.getState();
            },

            /**
             * Destroys event handlers
             *
             * @private
             */
            _onDestroyHandler: function () {
                if (_.isNull(this.data)) {
                    // data was not collected disable listener
                    mediator.off('hash_navigation_request:complete', this._collectHandler, this);
                } else {
                    this.data = null;
                }
                mediator.off('hash_navigation_click', this._confirmHashChange, this);
                $(window).off(this.UNLOAD_EVENT);
                $(document).off(this.LOAD_EVENT);
            }
        });

        return formState;
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ 1)))

/***/ }),
/* 560 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************************!*\
  !*** ./src/Pim/Bundle/UIBundle/Resources/public/js/form/system/group/loading-message.js ***!
  \******************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(/*! underscore */ 0),
        __webpack_require__(/*! jquery */ 1),
        __webpack_require__(/*! pim/form */ 149),
        __webpack_require__(/*! pim/template/system/group/loading-message */ 318),
        __webpack_require__(/*! bootstrap.bootstrapswitch */ 45)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        _,
        $,
        BaseForm,
        template
    ) {
        return BaseForm.extend({
            events: {
                'change input[type="checkbox"]': 'updateBoolean',
                'change textarea': 'updateText'
            },
            isGroup: true,
            label: _.__('oro_config.form.config.group.loading_message.title'),
            template: _.template(template),

            /**
             * {@inheritdoc}
             */
            render: function () {
                this.$el.html(this.template({
                    'loading_message_enabled': this.getFormData().pim_ui___loading_message_enabled.value,
                    'loading_messages': this.getFormData().pim_ui___loading_messages.value
                }));

                this.$el.find('.switch').bootstrapSwitch();

                this.delegateEvents();

                return BaseForm.prototype.render.apply(this, arguments);
            },

            /**
             * Update model after value change
             *
             * @param {Event}
             */
            updateBoolean: function (event) {
                var data = this.getFormData();
                data.pim_ui___loading_message_enabled.value = $(event.target).prop('checked') ? '1' : '0';
                this.setData(data);
            },

            /**
             * Update model after value change
             *
             * @param {Event}
             */
            updateText: function (event) {
                var data = this.getFormData();
                data.pim_ui___loading_messages.value = $(event.target).val();
                this.setData(data);
            }
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 561 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************!*\
  !*** ./src/Pim/Bundle/UIBundle/Resources/public/js/jquery-setup.js ***!
  \*********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($) {
    'use strict';
    $.ajaxSetup({
        headers: {
            'X-CSRF-Header': 1
        }
    });
    // $.expr[':'].parents = function (a, i, m) {
    //     return $(a).parents(m[3]).length < 1;
    // };
    // used to indicate app's activity, such as AJAX request or redirection, etc.
    $.isActive = $.proxy(function (flag) {
        if ($.type(flag) !== 'undefined') {
            this.active = flag;
        }

        return $.active || this.active;
    }, {active: false});

    return $;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 562 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************!*\
  !*** ./src/Pim/Bundle/UIBundle/Resources/public/js/pim-formupdatelistener.js ***!
  \*******************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global console */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1), __webpack_require__(/*! backbone */ 2), __webpack_require__(/*! pim/dialog */ 14), __webpack_require__(/*! pim/router */ 11)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, Backbone, Dialog, router) {
        'use strict';

        return function ($form) {
            this.updated = false;
            var message = $form.attr('data-updated-message');
            if (!message) {
                console.warn('FormUpdateListener: message not provided.');

                return;
            }
            var title = $form.attr('data-updated-title');
            var self  = this;

            var formUpdated = function (e) {
                var $target = $(e.target);
                if ($target.parents('div.filter-box').length ||
                    $target.parents('ul.icons-holder').length ||
                    $target.hasClass('exclude')) {

                    return;
                }
                self.updated = true;
                $('#entity-updated').show().css('opacity', 1);

                $form.off('change', formUpdated);
                $(document).off('click', '#' + $form.attr('id') + ' ins.jstree-checkbox', formUpdated);

                $form.find('button[type="submit"]').on('click', function () {
                    self.updated = false;
                });

                $(window).on('beforeunload', function () {
                    if (self.updated) {
                        return message;
                    }
                });
            };

            var linkClicked = function (e) {
                e.stopImmediatePropagation();
                e.preventDefault();
                var url      = $(this).attr('href');
                var doAction = function () {
                    router.redirect(url);
                };
                if (!self.updated) {
                    doAction();
                } else {
                    Dialog.confirm(message, title, doAction);
                }

                return false;
            };

            $form.on('change', formUpdated);
            $(document).on('click', '#' + $form.attr('id') + ' ins.jstree-checkbox', formUpdated);
            $form.on('refresh', function () {
                self.updated = false;
                $('#entity-updated').css('opacity', 0).hide();
            });

            $('a[href^="/"]:not(".no-hash")').off('click').on('click', linkClicked);
            $form.on('click', 'a[href^="/"]:not(".no-hash")', linkClicked);

            Backbone.Router.prototype.on('route', function () {
                $('a[href^="/"]:not(".no-hash")').off('click', linkClicked);
                $(window).off('beforeunload');
            });
        };
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 563 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************************!*\
  !*** ./src/Pim/Bundle/UIBundle/Resources/public/lib/backbone.bootstrap-modal.js ***!
  \**********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(_, Backbone) {var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Bootstrap Modal wrapper for use with Backbone.
 *
 * Takes care of instantiation, manages multiple modals,
 * adds several options and removes the element from the DOM when closed
 *
 * @author Charles Davison <charlie@powmedia.co.uk>
 *
 * Events:
 * shown: Fired when the modal has finished animating in
 * hidden: Fired when the modal has finished animating out
 * cancel: The user dismissed the modal
 * ok: The user clicked OK
 */
(function($, _, Backbone) {

  //Set custom template settings
  var _interpolateBackup = _.templateSettings;
  _.templateSettings = {
    interpolate: /\{\{(.+?)\}\}/g,
    evaluate: /<%([\s\S]+?)%>/g
  }

  var template = _.template('\
    <% if (title) { %>\
      <div class="modal-header">\
        <% if (allowCancel) { %>\
          <a class="close">×</a>\
        <% } %>\
        <h3>{{title}}</h3>\
      </div>\
    <% } %>\
    <div class="modal-body">{{content}}</div>\
    <div class="AknButtonList AknButtonList--right modal-footer">\
      <% if (allowCancel) { %>\
        <% if (cancelText) { %>\
          <a href="#" title="{{cancelText}}" class="AknButtonList-item AknButton AknButton--withIcon AknButton--grey cancel icons-holder-text">\
            <i class="AknButton-icon icon-chevron-left"></i>\
            {{cancelText}}\
          </a>\
        <% } %>\
      <% } %>\
      <a href="#" title="{{okText}}" class="AknButtonList-item AknButton AknButton--withIcon AknButton--apply ok icons-holder-text">\
        <i class="AknButton-icon icon-ok"></i>\
        {{okText}}\
      </a>\
    </div>\
  ');

  //Reset to users' template settings
  _.templateSettings = _interpolateBackup;


  var Modal = Backbone.View.extend({

    className: 'modal',

    events: {
      'click .close': function(event) {
        event.preventDefault();

        this.trigger('cancel');

        if (this.options.content && this.options.content.trigger) {
          this.options.content.trigger('cancel', this);
        }
      },
      'click .cancel': function(event) {
        event.preventDefault();

        this.trigger('cancel');

        if (this.options.content && this.options.content.trigger) {
          this.options.content.trigger('cancel', this);
        }
      },
      'click .ok': function(event) {
        event.preventDefault();

        this.trigger('ok');

        if (this.options.content && this.options.content.trigger) {
          this.options.content.trigger('ok', this);
        }

        if (this.options.okCloses) {
          this.close();
        }
      }
    },

    /**
     * Creates an instance of a Bootstrap Modal
     *
     * @see http://twitter.github.com/bootstrap/javascript.html#modals
     *
     * @param {Object} options
     * @param {String|View} [options.content] Modal content. Default: none
     * @param {String} [options.title]        Title. Default: none
     * @param {String} [options.okText]       Text for the OK button. Default: 'OK'
     * @param {String} [options.cancelText]   Text for the cancel button. Default: 'Cancel'. If passed a falsey value, the button will be removed
     * @param {Boolean} [options.allowCancel  Whether the modal can be closed, other than by pressing OK. Default: true
     * @param {Boolean} [options.escape]      Whether the 'esc' key can dismiss the modal. Default: true, but false if options.cancellable is true
     * @param {Boolean} [options.animate]     Whether to animate in/out. Default: false
     * @param {Function} [options.template]   Compiled underscore template to override the default one
     */
    initialize: function(options) {
      this.options = _.extend({
        title: null,
        okText: 'OK',
        focusOk: true,
        okCloses: true,
        cancelText: 'Cancel',
        allowCancel: true,
        escape: true,
        animate: false,
        template: template
      }, options);
    },

    /**
     * Creates the DOM element
     *
     * @api private
     */
    render: function() {
      var $el = this.$el,
          options = this.options,
          content = options.content;

      //Create the modal container
      $el.html(options.template(options));

      var $content = this.$content = $el.find('.modal-body')

      //Insert the main content if it's a view
      if (content.$el) {
        content.render();
        $el.find('.modal-body').html(content.$el);
      }

      if (options.animate) $el.addClass('fade');

      this.isRendered = true;

      return this;
    },

    /**
     * Renders and shows the modal
     *
     * @param {Function} [cb]     Optional callback that runs only when OK is pressed.
     */
    open: function(cb) {
      if (!this.isRendered) this.render();
      this.delegateEvents();

      var self = this,
          $el = this.$el;

      //Create it
      $el.modal(_.extend({
        keyboard: this.options.allowCancel,
        backdrop: this.options.allowCancel ? true : 'static'
      }, this.options.modalOptions));

      //Focus OK button
      $el.one('shown', function() {
        if (self.options.focusOk) {
          $el.find('.btn.ok').focus();
        }

        if (self.options.content && self.options.content.trigger) {
          self.options.content.trigger('shown', self);
        }

        self.trigger('shown');
      });

      //Adjust the modal and backdrop z-index; for dealing with multiple modals
      var numModals = Modal.count,
          $backdrop = $('.modal-backdrop:eq('+numModals+')'),
          backdropIndex = parseInt($backdrop.css('z-index'), 10),
          elIndex = parseInt($backdrop.css('z-index'), 10) + 1;

      $backdrop.css('z-index', backdropIndex + numModals);
      this.$el.css('z-index', elIndex + numModals);

      if (this.options.allowCancel) {
        $backdrop.one('click', function() {
          if (self.options.content && self.options.content.trigger) {
            self.options.content.trigger('cancel', self);
          }

          self.trigger('cancel');
        });

        $(document).one('keyup.dismiss.modal', function (e) {
          e.which == 27 && self.trigger('cancel');

          if (self.options.content && self.options.content.trigger) {
            e.which == 27 && self.options.content.trigger('shown', self);
          }
        });
      }

      this.once('cancel', function() {
        self.close();
      });

      Modal.count++;

      //Run callback on OK if provided
      if (cb) {
        self.on('ok', cb);
      }

      return this;
    },

    /**
     * Closes the modal
     */
    close: function() {
      var self = this,
          $el = this.$el;

      //Check if the modal should stay open
      if (this._preventClose) {
        this._preventClose = false;
        return;
      }

      $el.one('hidden', function onHidden(e) {
        // Ignore events propagated from interior objects, like bootstrap tooltips
        if(e.target !== e.currentTarget){
          return $el.one('hidden', onHidden);
        }
        self.remove();

        if (self.options.content && self.options.content.trigger) {
          self.options.content.trigger('hidden', self);
        }

        self.trigger('hidden');
      });

      $el.modal('hide');

      Modal.count--;
    },

    /**
     * Stop the modal from closing.
     * Can be called from within a 'close' or 'ok' event listener.
     */
    preventClose: function() {
      this._preventClose = true;
    }
  }, {
    //STATICS

    //The number of modals on display
    count: 0
  });


  //EXPORTS
  //CommonJS
  if ("function" == 'function' && typeof module !== 'undefined' && exports) {
    module.exports = Modal;
  }

  //AMD / RequireJS
  if (true) {
    return !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
      Backbone.BootstrapModal = Modal;
    }.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
  }

  //Regular; add to Backbone.Bootstrap.Modal
  else {
    Backbone.BootstrapModal = Modal;
  }

})(jQuery, _, Backbone);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! underscore */ 0), __webpack_require__(/*! backbone */ 2)))

/***/ }),
/* 564 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************!*\
  !*** ./src/Pim/Bundle/UIBundle/Resources/public/lib/base64/base64.js ***!
  \***********************************************************************/
/***/ (function(module, exports) {

function base64_encode (data) {
    // http://kevin.vanzonneveld.net
    // +   original by: Tyler Akins (http://rumkin.com)
    // +   improved by: Bayron Guevara
    // +   improved by: Thunder.m
    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +   bugfixed by: Pellentesque Malesuada
    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +   improved by: Rafał Kukawski (http://kukawski.pl)
    // *     example 1: base64_encode('Kevin van Zonneveld');
    // *     returns 1: 'S2V2aW4gdmFuIFpvbm5ldmVsZA=='
    // mozilla has this native
    // - but breaks in 2.0.0.12!
    //if (typeof this.window['btoa'] == 'function') {
    //    return btoa(data);
    //}
    var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    var o1, o2, o3, h1, h2, h3, h4, bits, i = 0,
        ac = 0,
        enc = "",
        tmp_arr = [];

    if (!data) {
        return data;
    }

    do { // pack three octets into four hexets
        o1 = data.charCodeAt(i++);
        o2 = data.charCodeAt(i++);
        o3 = data.charCodeAt(i++);

        bits = o1 << 16 | o2 << 8 | o3;

        h1 = bits >> 18 & 0x3f;
        h2 = bits >> 12 & 0x3f;
        h3 = bits >> 6 & 0x3f;
        h4 = bits & 0x3f;

        // use hexets to index into b64, and append result to encoded string
        tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);
    } while (i < data.length);

    enc = tmp_arr.join('');

    var r = data.length % 3;

    return (r ? enc.slice(0, r - 3) : enc) + '==='.slice(r || 3);
}

function base64_decode (data) {
    // http://kevin.vanzonneveld.net
    // +   original by: Tyler Akins (http://rumkin.com)
    // +   improved by: Thunder.m
    // +      input by: Aman Gupta
    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +   bugfixed by: Onno Marsman
    // +   bugfixed by: Pellentesque Malesuada
    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +      input by: Brett Zamir (http://brett-zamir.me)
    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // *     example 1: base64_decode('S2V2aW4gdmFuIFpvbm5ldmVsZA==');
    // *     returns 1: 'Kevin van Zonneveld'
    // mozilla has this native
    // - but breaks in 2.0.0.12!
    //if (typeof this.window['atob'] == 'function') {
    //    return atob(data);
    //}
    var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    var o1, o2, o3, h1, h2, h3, h4, bits, i = 0,
        ac = 0,
        dec = "",
        tmp_arr = [];

    if (!data) {
        return data;
    }

    data += '';

    do { // unpack four hexets into three octets using index points in b64
        h1 = b64.indexOf(data.charAt(i++));
        h2 = b64.indexOf(data.charAt(i++));
        h3 = b64.indexOf(data.charAt(i++));
        h4 = b64.indexOf(data.charAt(i++));

        bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;

        o1 = bits >> 16 & 0xff;
        o2 = bits >> 8 & 0xff;
        o3 = bits & 0xff;

        if (h3 == 64) {
            tmp_arr[ac++] = String.fromCharCode(o1);
        } else if (h4 == 64) {
            tmp_arr[ac++] = String.fromCharCode(o1, o2);
        } else {
            tmp_arr[ac++] = String.fromCharCode(o1, o2, o3);
        }
    } while (i < data.length);

    dec = tmp_arr.join('');

    return dec;
}

/***/ }),
/* 565 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************************************!*\
  !*** ./src/Pim/Bundle/UIBundle/Resources/public/lib/dropzonejs/dist/dropzone-amd-module.js ***!
  \*********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Uses AMD or browser globals to create a jQuery plugin.
(function (factory) {
  if (true) {
      // AMD. Register as an anonymous module.
      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {
      // Browser globals
      factory(jQuery);
  }
} (function (jQuery) {
    var module = { exports: { } }; // Fake component


/*
 *
 * More info at [www.dropzonejs.com](http://www.dropzonejs.com)
 *
 * Copyright (c) 2012, Matias Meno
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

(function() {
  var Dropzone, Emitter, camelize, contentLoaded, detectVerticalSquash, drawImageIOSFix, noop, without,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  noop = function() {};

  Emitter = (function() {
    function Emitter() {}

    Emitter.prototype.addEventListener = Emitter.prototype.on;

    Emitter.prototype.on = function(event, fn) {
      this._callbacks = this._callbacks || {};
      if (!this._callbacks[event]) {
        this._callbacks[event] = [];
      }
      this._callbacks[event].push(fn);
      return this;
    };

    Emitter.prototype.emit = function() {
      var args, callback, callbacks, event, _i, _len;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this._callbacks = this._callbacks || {};
      callbacks = this._callbacks[event];
      if (callbacks) {
        for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
          callback = callbacks[_i];
          callback.apply(this, args);
        }
      }
      return this;
    };

    Emitter.prototype.removeListener = Emitter.prototype.off;

    Emitter.prototype.removeAllListeners = Emitter.prototype.off;

    Emitter.prototype.removeEventListener = Emitter.prototype.off;

    Emitter.prototype.off = function(event, fn) {
      var callback, callbacks, i, _i, _len;
      if (!this._callbacks || arguments.length === 0) {
        this._callbacks = {};
        return this;
      }
      callbacks = this._callbacks[event];
      if (!callbacks) {
        return this;
      }
      if (arguments.length === 1) {
        delete this._callbacks[event];
        return this;
      }
      for (i = _i = 0, _len = callbacks.length; _i < _len; i = ++_i) {
        callback = callbacks[i];
        if (callback === fn) {
          callbacks.splice(i, 1);
          break;
        }
      }
      return this;
    };

    return Emitter;

  })();

  Dropzone = (function(_super) {
    var extend, resolveOption;

    __extends(Dropzone, _super);

    Dropzone.prototype.Emitter = Emitter;


    /*
    This is a list of all available events you can register on a dropzone object.
    
    You can register an event handler like this:
    
        dropzone.on("dragEnter", function() { });
     */

    Dropzone.prototype.events = ["drop", "dragstart", "dragend", "dragenter", "dragover", "dragleave", "addedfile", "removedfile", "thumbnail", "error", "errormultiple", "processing", "processingmultiple", "uploadprogress", "totaluploadprogress", "sending", "sendingmultiple", "success", "successmultiple", "canceled", "canceledmultiple", "complete", "completemultiple", "reset", "maxfilesexceeded", "maxfilesreached", "queuecomplete"];

    Dropzone.prototype.defaultOptions = {
      url: null,
      method: "post",
      withCredentials: false,
      parallelUploads: 2,
      uploadMultiple: false,
      maxFilesize: 256,
      paramName: "file",
      createImageThumbnails: true,
      maxThumbnailFilesize: 10,
      thumbnailWidth: 120,
      thumbnailHeight: 120,
      filesizeBase: 1000,
      maxFiles: null,
      filesizeBase: 1000,
      params: {},
      clickable: true,
      ignoreHiddenFiles: true,
      acceptedFiles: null,
      acceptedMimeTypes: null,
      autoProcessQueue: true,
      autoQueue: true,
      addRemoveLinks: false,
      previewsContainer: null,
      capture: null,
      dictDefaultMessage: "Drop files here to upload",
      dictFallbackMessage: "Your browser does not support drag'n'drop file uploads.",
      dictFallbackText: "Please use the fallback form below to upload your files like in the olden days.",
      dictFileTooBig: "File is too big ({{filesize}}MiB). Max filesize: {{maxFilesize}}MiB.",
      dictInvalidFileType: "You can't upload files of this type.",
      dictResponseError: "Server responded with {{statusCode}} code.",
      dictCancelUpload: "Cancel upload",
      dictCancelUploadConfirmation: "Are you sure you want to cancel this upload?",
      dictRemoveFile: "Remove file",
      dictRemoveFileConfirmation: null,
      dictMaxFilesExceeded: "You can not upload any more files.",
      accept: function(file, done) {
        return done();
      },
      init: function() {
        return noop;
      },
      forceFallback: false,
      fallback: function() {
        var child, messageElement, span, _i, _len, _ref;
        this.element.className = "" + this.element.className + " dz-browser-not-supported";
        _ref = this.element.getElementsByTagName("div");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          if (/(^| )dz-message($| )/.test(child.className)) {
            messageElement = child;
            child.className = "dz-message";
            continue;
          }
        }
        if (!messageElement) {
          messageElement = Dropzone.createElement("<div class=\"dz-message\"><span></span></div>");
          this.element.appendChild(messageElement);
        }
        span = messageElement.getElementsByTagName("span")[0];
        if (span) {
          span.textContent = this.options.dictFallbackMessage;
        }
        return this.element.appendChild(this.getFallbackForm());
      },
      resize: function(file) {
        var info, srcRatio, trgRatio;
        info = {
          srcX: 0,
          srcY: 0,
          srcWidth: file.width,
          srcHeight: file.height
        };
        srcRatio = file.width / file.height;
        info.optWidth = this.options.thumbnailWidth;
        info.optHeight = this.options.thumbnailHeight;
        if ((info.optWidth == null) && (info.optHeight == null)) {
          info.optWidth = info.srcWidth;
          info.optHeight = info.srcHeight;
        } else if (info.optWidth == null) {
          info.optWidth = srcRatio * info.optHeight;
        } else if (info.optHeight == null) {
          info.optHeight = (1 / srcRatio) * info.optWidth;
        }
        trgRatio = info.optWidth / info.optHeight;
        if (file.height < info.optHeight || file.width < info.optWidth) {
          info.trgHeight = info.srcHeight;
          info.trgWidth = info.srcWidth;
        } else {
          if (srcRatio > trgRatio) {
            info.srcHeight = file.height;
            info.srcWidth = info.srcHeight * trgRatio;
          } else {
            info.srcWidth = file.width;
            info.srcHeight = info.srcWidth / trgRatio;
          }
        }
        info.srcX = (file.width - info.srcWidth) / 2;
        info.srcY = (file.height - info.srcHeight) / 2;
        return info;
      },

      /*
      Those functions register themselves to the events on init and handle all
      the user interface specific stuff. Overwriting them won't break the upload
      but can break the way it's displayed.
      You can overwrite them if you don't like the default behavior. If you just
      want to add an additional event handler, register it on the dropzone object
      and don't overwrite those options.
       */
      drop: function(e) {
        return this.element.classList.remove("dz-drag-hover");
      },
      dragstart: noop,
      dragend: function(e) {
        return this.element.classList.remove("dz-drag-hover");
      },
      dragenter: function(e) {
        return this.element.classList.add("dz-drag-hover");
      },
      dragover: function(e) {
        return this.element.classList.add("dz-drag-hover");
      },
      dragleave: function(e) {
        return this.element.classList.remove("dz-drag-hover");
      },
      paste: noop,
      reset: function() {
        return this.element.classList.remove("dz-started");
      },
      addedfile: function(file) {
        var node, removeFileEvent, removeLink, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
        if (this.element === this.previewsContainer) {
          this.element.classList.add("dz-started");
        }
        if (this.previewsContainer) {
          file.previewElement = Dropzone.createElement(this.options.previewTemplate.trim());
          file.previewTemplate = file.previewElement;
          this.previewsContainer.appendChild(file.previewElement);
          _ref = file.previewElement.querySelectorAll("[data-dz-name]");
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            node = _ref[_i];
            node.textContent = file.name;
          }
          _ref1 = file.previewElement.querySelectorAll("[data-dz-size]");
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            node = _ref1[_j];
            node.innerHTML = this.filesize(file.size);
          }
          if (this.options.addRemoveLinks) {
            file._removeLink = Dropzone.createElement("<a class=\"dz-remove\" href=\"javascript:undefined;\" data-dz-remove>" + this.options.dictRemoveFile + "</a>");
            file.previewElement.appendChild(file._removeLink);
          }
          removeFileEvent = (function(_this) {
            return function(e) {
              e.preventDefault();
              e.stopPropagation();
              if (file.status === Dropzone.UPLOADING) {
                return Dropzone.confirm(_this.options.dictCancelUploadConfirmation, function() {
                  return _this.removeFile(file);
                });
              } else {
                if (_this.options.dictRemoveFileConfirmation) {
                  return Dropzone.confirm(_this.options.dictRemoveFileConfirmation, function() {
                    return _this.removeFile(file);
                  });
                } else {
                  return _this.removeFile(file);
                }
              }
            };
          })(this);
          _ref2 = file.previewElement.querySelectorAll("[data-dz-remove]");
          _results = [];
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            removeLink = _ref2[_k];
            _results.push(removeLink.addEventListener("click", removeFileEvent));
          }
          return _results;
        }
      },
      removedfile: function(file) {
        var _ref;
        if (file.previewElement) {
          if ((_ref = file.previewElement) != null) {
            _ref.parentNode.removeChild(file.previewElement);
          }
        }
        return this._updateMaxFilesReachedClass();
      },
      thumbnail: function(file, dataUrl) {
        var thumbnailElement, _i, _len, _ref;
        if (file.previewElement) {
          file.previewElement.classList.remove("dz-file-preview");
          _ref = file.previewElement.querySelectorAll("[data-dz-thumbnail]");
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            thumbnailElement = _ref[_i];
            thumbnailElement.alt = file.name;
            thumbnailElement.src = dataUrl;
          }
          return setTimeout(((function(_this) {
            return function() {
              return file.previewElement.classList.add("dz-image-preview");
            };
          })(this)), 1);
        }
      },
      error: function(file, message) {
        var node, _i, _len, _ref, _results;
        if (file.previewElement) {
          file.previewElement.classList.add("dz-error");
          if (typeof message !== "String" && message.error) {
            message = message.error;
          }
          _ref = file.previewElement.querySelectorAll("[data-dz-errormessage]");
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            node = _ref[_i];
            _results.push(node.textContent = message);
          }
          return _results;
        }
      },
      errormultiple: noop,
      processing: function(file) {
        if (file.previewElement) {
          file.previewElement.classList.add("dz-processing");
          if (file._removeLink) {
            return file._removeLink.textContent = this.options.dictCancelUpload;
          }
        }
      },
      processingmultiple: noop,
      uploadprogress: function(file, progress, bytesSent) {
        var node, _i, _len, _ref, _results;
        if (file.previewElement) {
          _ref = file.previewElement.querySelectorAll("[data-dz-uploadprogress]");
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            node = _ref[_i];
            if (node.nodeName === 'PROGRESS') {
              _results.push(node.value = progress);
            } else {
              _results.push(node.style.width = "" + progress + "%");
            }
          }
          return _results;
        }
      },
      totaluploadprogress: noop,
      sending: noop,
      sendingmultiple: noop,
      success: function(file) {
        if (file.previewElement) {
          return file.previewElement.classList.add("dz-success");
        }
      },
      successmultiple: noop,
      canceled: function(file) {
        return this.emit("error", file, "Upload canceled.");
      },
      canceledmultiple: noop,
      complete: function(file) {
        if (file._removeLink) {
          file._removeLink.textContent = this.options.dictRemoveFile;
        }
        if (file.previewElement) {
          return file.previewElement.classList.add("dz-complete");
        }
      },
      completemultiple: noop,
      maxfilesexceeded: noop,
      maxfilesreached: noop,
      queuecomplete: noop,
      previewTemplate: "<div class=\"dz-preview dz-file-preview\">\n  <div class=\"dz-image\"><img data-dz-thumbnail /></div>\n  <div class=\"dz-details\">\n    <div class=\"dz-size\"><span data-dz-size></span></div>\n    <div class=\"dz-filename\"><span data-dz-name></span></div>\n  </div>\n  <div class=\"dz-progress\"><span class=\"dz-upload\" data-dz-uploadprogress></span></div>\n  <div class=\"dz-error-message\"><span data-dz-errormessage></span></div>\n  <div class=\"dz-success-mark\">\n    <svg width=\"54px\" height=\"54px\" viewBox=\"0 0 54 54\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\">\n      <title>Check</title>\n      <defs></defs>\n      <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n        <path d=\"M23.5,31.8431458 L17.5852419,25.9283877 C16.0248253,24.3679711 13.4910294,24.366835 11.9289322,25.9289322 C10.3700136,27.4878508 10.3665912,30.0234455 11.9283877,31.5852419 L20.4147581,40.0716123 C20.5133999,40.1702541 20.6159315,40.2626649 20.7218615,40.3488435 C22.2835669,41.8725651 24.794234,41.8626202 26.3461564,40.3106978 L43.3106978,23.3461564 C44.8771021,21.7797521 44.8758057,19.2483887 43.3137085,17.6862915 C41.7547899,16.1273729 39.2176035,16.1255422 37.6538436,17.6893022 L23.5,31.8431458 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\" id=\"Oval-2\" stroke-opacity=\"0.198794158\" stroke=\"#747474\" fill-opacity=\"0.816519475\" fill=\"#FFFFFF\" sketch:type=\"MSShapeGroup\"></path>\n      </g>\n    </svg>\n  </div>\n  <div class=\"dz-error-mark\">\n    <svg width=\"54px\" height=\"54px\" viewBox=\"0 0 54 54\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\">\n      <title>Error</title>\n      <defs></defs>\n      <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n        <g id=\"Check-+-Oval-2\" sketch:type=\"MSLayerGroup\" stroke=\"#747474\" stroke-opacity=\"0.198794158\" fill=\"#FFFFFF\" fill-opacity=\"0.816519475\">\n          <path d=\"M32.6568542,29 L38.3106978,23.3461564 C39.8771021,21.7797521 39.8758057,19.2483887 38.3137085,17.6862915 C36.7547899,16.1273729 34.2176035,16.1255422 32.6538436,17.6893022 L27,23.3431458 L21.3461564,17.6893022 C19.7823965,16.1255422 17.2452101,16.1273729 15.6862915,17.6862915 C14.1241943,19.2483887 14.1228979,21.7797521 15.6893022,23.3461564 L21.3431458,29 L15.6893022,34.6538436 C14.1228979,36.2202479 14.1241943,38.7516113 15.6862915,40.3137085 C17.2452101,41.8726271 19.7823965,41.8744578 21.3461564,40.3106978 L27,34.6568542 L32.6538436,40.3106978 C34.2176035,41.8744578 36.7547899,41.8726271 38.3137085,40.3137085 C39.8758057,38.7516113 39.8771021,36.2202479 38.3106978,34.6538436 L32.6568542,29 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\" id=\"Oval-2\" sketch:type=\"MSShapeGroup\"></path>\n        </g>\n      </g>\n    </svg>\n  </div>\n</div>"
    };

    extend = function() {
      var key, object, objects, target, val, _i, _len;
      target = arguments[0], objects = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      for (_i = 0, _len = objects.length; _i < _len; _i++) {
        object = objects[_i];
        for (key in object) {
          val = object[key];
          target[key] = val;
        }
      }
      return target;
    };

    function Dropzone(element, options) {
      var elementOptions, fallback, _ref;
      this.element = element;
      this.version = Dropzone.version;
      this.defaultOptions.previewTemplate = this.defaultOptions.previewTemplate.replace(/\n*/g, "");
      this.clickableElements = [];
      this.listeners = [];
      this.files = [];
      if (typeof this.element === "string") {
        this.element = document.querySelector(this.element);
      }
      if (!(this.element && (this.element.nodeType != null))) {
        throw new Error("Invalid dropzone element.");
      }
      //if (this.element.dropzone) {
      //  throw new Error("Dropzone already attached.");
      //}
      Dropzone.instances.push(this);
      this.element.myDropzone = this;
      elementOptions = (_ref = Dropzone.optionsForElement(this.element)) != null ? _ref : {};
      this.options = extend({}, this.defaultOptions, elementOptions, options != null ? options : {});
      if (this.options.forceFallback || !Dropzone.isBrowserSupported()) {
        return this.options.fallback.call(this);
      }
      if (this.options.url == null) {
        this.options.url = this.element.getAttribute("action");
      }
      if (!this.options.url) {
        throw new Error("No URL provided.");
      }
      if (this.options.acceptedFiles && this.options.acceptedMimeTypes) {
        throw new Error("You can't provide both 'acceptedFiles' and 'acceptedMimeTypes'. 'acceptedMimeTypes' is deprecated.");
      }
      if (this.options.acceptedMimeTypes) {
        this.options.acceptedFiles = this.options.acceptedMimeTypes;
        delete this.options.acceptedMimeTypes;
      }
      this.options.method = this.options.method.toUpperCase();
      if ((fallback = this.getExistingFallback()) && fallback.parentNode) {
        fallback.parentNode.removeChild(fallback);
      }
      if (this.options.previewsContainer !== false) {
        if (this.options.previewsContainer) {
          this.previewsContainer = Dropzone.getElement(this.options.previewsContainer, "previewsContainer");
        } else {
          this.previewsContainer = this.element;
        }
      }
      if (this.options.clickable) {
        if (this.options.clickable === true) {
          this.clickableElements = [this.element];
        } else {
          this.clickableElements = Dropzone.getElements(this.options.clickable, "clickable");
        }
      }
      this.init();
    }

    Dropzone.prototype.getAcceptedFiles = function() {
      var file, _i, _len, _ref, _results;
      _ref = this.files;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        if (file.accepted) {
          _results.push(file);
        }
      }
      return _results;
    };

    Dropzone.prototype.getRejectedFiles = function() {
      var file, _i, _len, _ref, _results;
      _ref = this.files;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        if (!file.accepted) {
          _results.push(file);
        }
      }
      return _results;
    };

    Dropzone.prototype.getFilesWithStatus = function(status) {
      var file, _i, _len, _ref, _results;
      _ref = this.files;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        if (file.status === status) {
          _results.push(file);
        }
      }
      return _results;
    };

    Dropzone.prototype.getQueuedFiles = function() {
      return this.getFilesWithStatus(Dropzone.QUEUED);
    };

    Dropzone.prototype.getUploadingFiles = function() {
      return this.getFilesWithStatus(Dropzone.UPLOADING);
    };

    Dropzone.prototype.getActiveFiles = function() {
      var file, _i, _len, _ref, _results;
      _ref = this.files;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        if (file.status === Dropzone.UPLOADING || file.status === Dropzone.QUEUED) {
          _results.push(file);
        }
      }
      return _results;
    };

    Dropzone.prototype.init = function() {
      var eventName, noPropagation, setupHiddenFileInput, _i, _len, _ref, _ref1;
      if (this.element.tagName === "form") {
        this.element.setAttribute("enctype", "multipart/form-data");
      }
      if (this.element.classList.contains("dropzone") && !this.element.querySelector(".dz-message")) {
        this.element.appendChild(Dropzone.createElement("<div class=\"dz-default dz-message\"><span>" + this.options.dictDefaultMessage + "</span></div>"));
      }
      if (this.clickableElements.length) {
        setupHiddenFileInput = (function(_this) {
          return function() {
            if (_this.hiddenFileInput) {
              document.body.removeChild(_this.hiddenFileInput);
            }
            _this.hiddenFileInput = document.createElement("input");
            _this.hiddenFileInput.setAttribute("type", "file");
            if ((_this.options.maxFiles == null) || _this.options.maxFiles > 1) {
              _this.hiddenFileInput.setAttribute("multiple", "multiple");
            }
            _this.hiddenFileInput.className = "dz-hidden-input";
            if (_this.options.acceptedFiles != null) {
              _this.hiddenFileInput.setAttribute("accept", _this.options.acceptedFiles);
            }
            if (_this.options.capture != null) {
              _this.hiddenFileInput.setAttribute("capture", _this.options.capture);
            }
            _this.hiddenFileInput.style.visibility = "hidden";
            _this.hiddenFileInput.style.position = "absolute";
            _this.hiddenFileInput.style.top = "0";
            _this.hiddenFileInput.style.left = "0";
            _this.hiddenFileInput.style.height = "0";
            _this.hiddenFileInput.style.width = "0";
            document.body.appendChild(_this.hiddenFileInput);
            return _this.hiddenFileInput.addEventListener("change", function() {
              var file, files, _i, _len;
              files = _this.hiddenFileInput.files;
              if (files.length) {
                for (_i = 0, _len = files.length; _i < _len; _i++) {
                  file = files[_i];
                  _this.addFile(file);
                }
              }
              return setupHiddenFileInput();
            });
          };
        })(this);
        setupHiddenFileInput();
      }
      this.URL = (_ref = window.URL) != null ? _ref : window.webkitURL;
      _ref1 = this.events;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        eventName = _ref1[_i];
        this.on(eventName, this.options[eventName]);
      }
      this.on("uploadprogress", (function(_this) {
        return function() {
          return _this.updateTotalUploadProgress();
        };
      })(this));
      this.on("removedfile", (function(_this) {
        return function() {
          return _this.updateTotalUploadProgress();
        };
      })(this));
      this.on("canceled", (function(_this) {
        return function(file) {
          return _this.emit("complete", file);
        };
      })(this));
      this.on("complete", (function(_this) {
        return function(file) {
          if (_this.getUploadingFiles().length === 0 && _this.getQueuedFiles().length === 0) {
            return setTimeout((function() {
              return _this.emit("queuecomplete");
            }), 0);
          }
        };
      })(this));
      noPropagation = function(e) {
        e.stopPropagation();
        if (e.preventDefault) {
          return e.preventDefault();
        } else {
          return e.returnValue = false;
        }
      };
      this.listeners = [
        {
          element: this.element,
          events: {
            "dragstart": (function(_this) {
              return function(e) {
                return _this.emit("dragstart", e);
              };
            })(this),
            "dragenter": (function(_this) {
              return function(e) {
                noPropagation(e);
                return _this.emit("dragenter", e);
              };
            })(this),
            "dragover": (function(_this) {
              return function(e) {
                var efct;
                try {
                  efct = e.dataTransfer.effectAllowed;
                } catch (_error) {}
                e.dataTransfer.dropEffect = 'move' === efct || 'linkMove' === efct ? 'move' : 'copy';
                noPropagation(e);
                return _this.emit("dragover", e);
              };
            })(this),
            "dragleave": (function(_this) {
              return function(e) {
                return _this.emit("dragleave", e);
              };
            })(this),
            "drop": (function(_this) {
              return function(e) {
                noPropagation(e);
                return _this.drop(e);
              };
            })(this),
            "dragend": (function(_this) {
              return function(e) {
                return _this.emit("dragend", e);
              };
            })(this)
          }
        }
      ];
      this.clickableElements.forEach((function(_this) {
        return function(clickableElement) {
          return _this.listeners.push({
            element: clickableElement,
            events: {
              "click": function(evt) {
                if ((clickableElement !== _this.element) || (evt.target === _this.element || Dropzone.elementInside(evt.target, _this.element.querySelector(".dz-message")))) {
                  return _this.hiddenFileInput.click();
                }
              }
            }
          });
        };
      })(this));
      this.enable();
      return this.options.init.call(this);
    };

    Dropzone.prototype.destroy = function() {
      var _ref;
      this.disable();
      this.removeAllFiles(true);
      if ((_ref = this.hiddenFileInput) != null ? _ref.parentNode : void 0) {
        this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput);
        this.hiddenFileInput = null;
      }
      delete this.element.myDropzone;
      return Dropzone.instances.splice(Dropzone.instances.indexOf(this), 1);
    };

    Dropzone.prototype.updateTotalUploadProgress = function() {
      var activeFiles, file, totalBytes, totalBytesSent, totalUploadProgress, _i, _len, _ref;
      totalBytesSent = 0;
      totalBytes = 0;
      activeFiles = this.getActiveFiles();
      if (activeFiles.length) {
        _ref = this.getActiveFiles();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          file = _ref[_i];
          totalBytesSent += file.upload.bytesSent;
          totalBytes += file.upload.total;
        }
        totalUploadProgress = 100 * totalBytesSent / totalBytes;
      } else {
        totalUploadProgress = 100;
      }
      return this.emit("totaluploadprogress", totalUploadProgress, totalBytes, totalBytesSent);
    };

    Dropzone.prototype._getParamName = function(n) {
      if (typeof this.options.paramName === "function") {
        return this.options.paramName(n);
      } else {
        return "" + this.options.paramName + (this.options.uploadMultiple ? "[" + n + "]" : "");
      }
    };

    Dropzone.prototype.getFallbackForm = function() {
      var existingFallback, fields, fieldsString, form;
      if (existingFallback = this.getExistingFallback()) {
        return existingFallback;
      }
      fieldsString = "<div class=\"dz-fallback\">";
      if (this.options.dictFallbackText) {
        fieldsString += "<p>" + this.options.dictFallbackText + "</p>";
      }
      fieldsString += "<input type=\"file\" name=\"" + (this._getParamName(0)) + "\" " + (this.options.uploadMultiple ? 'multiple="multiple"' : void 0) + " /><input type=\"submit\" value=\"Upload!\"></div>";
      fields = Dropzone.createElement(fieldsString);
      if (this.element.tagName !== "FORM") {
        form = Dropzone.createElement("<form action=\"" + this.options.url + "\" enctype=\"multipart/form-data\" method=\"" + this.options.method + "\"></form>");
        form.appendChild(fields);
      } else {
        this.element.setAttribute("enctype", "multipart/form-data");
        this.element.setAttribute("method", this.options.method);
      }
      return form != null ? form : fields;
    };

    Dropzone.prototype.getExistingFallback = function() {
      var fallback, getFallback, tagName, _i, _len, _ref;
      getFallback = function(elements) {
        var el, _i, _len;
        for (_i = 0, _len = elements.length; _i < _len; _i++) {
          el = elements[_i];
          if (/(^| )fallback($| )/.test(el.className)) {
            return el;
          }
        }
      };
      _ref = ["div", "form"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tagName = _ref[_i];
        if (fallback = getFallback(this.element.getElementsByTagName(tagName))) {
          return fallback;
        }
      }
    };

    Dropzone.prototype.setupEventListeners = function() {
      var elementListeners, event, listener, _i, _len, _ref, _results;
      _ref = this.listeners;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elementListeners = _ref[_i];
        _results.push((function() {
          var _ref1, _results1;
          _ref1 = elementListeners.events;
          _results1 = [];
          for (event in _ref1) {
            listener = _ref1[event];
            _results1.push(elementListeners.element.addEventListener(event, listener, false));
          }
          return _results1;
        })());
      }
      return _results;
    };

    Dropzone.prototype.removeEventListeners = function() {
      var elementListeners, event, listener, _i, _len, _ref, _results;
      _ref = this.listeners;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elementListeners = _ref[_i];
        _results.push((function() {
          var _ref1, _results1;
          _ref1 = elementListeners.events;
          _results1 = [];
          for (event in _ref1) {
            listener = _ref1[event];
            _results1.push(elementListeners.element.removeEventListener(event, listener, false));
          }
          return _results1;
        })());
      }
      return _results;
    };

    Dropzone.prototype.disable = function() {
      var file, _i, _len, _ref, _results;
      this.clickableElements.forEach(function(element) {
        return element.classList.remove("dz-clickable");
      });
      this.removeEventListeners();
      _ref = this.files;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        _results.push(this.cancelUpload(file));
      }
      return _results;
    };

    Dropzone.prototype.enable = function() {
      this.clickableElements.forEach(function(element) {
        return element.classList.add("dz-clickable");
      });
      return this.setupEventListeners();
    };

    Dropzone.prototype.filesize = function(size) {
      var cutoff, i, selectedSize, selectedUnit, unit, units, _i, _len;
      units = ['TB', 'GB', 'MB', 'KB', 'b'];
      selectedSize = selectedUnit = null;
      for (i = _i = 0, _len = units.length; _i < _len; i = ++_i) {
        unit = units[i];
        cutoff = Math.pow(this.options.filesizeBase, 4 - i) / 10;
        if (size >= cutoff) {
          selectedSize = size / Math.pow(this.options.filesizeBase, 4 - i);
          selectedUnit = unit;
          break;
        }
      }
      selectedSize = Math.round(10 * selectedSize) / 10;
      return "<strong>" + selectedSize + "</strong> " + selectedUnit;
    };

    Dropzone.prototype._updateMaxFilesReachedClass = function() {
      if ((this.options.maxFiles != null) && this.getAcceptedFiles().length >= this.options.maxFiles) {
        if (this.getAcceptedFiles().length === this.options.maxFiles) {
          this.emit('maxfilesreached', this.files);
        }
        return this.element.classList.add("dz-max-files-reached");
      } else {
        return this.element.classList.remove("dz-max-files-reached");
      }
    };

    Dropzone.prototype.drop = function(e) {
      var files, items;
      if (!e.dataTransfer) {
        return;
      }
      this.emit("drop", e);
      files = e.dataTransfer.files;
      if (files.length) {
        items = e.dataTransfer.items;
        if (items && items.length && (items[0].webkitGetAsEntry != null)) {
          this._addFilesFromItems(items);
        } else {
          this.handleFiles(files);
        }
      }
    };

    Dropzone.prototype.paste = function(e) {
      var items, _ref;
      if ((e != null ? (_ref = e.clipboardData) != null ? _ref.items : void 0 : void 0) == null) {
        return;
      }
      this.emit("paste", e);
      items = e.clipboardData.items;
      if (items.length) {
        return this._addFilesFromItems(items);
      }
    };

    Dropzone.prototype.handleFiles = function(files) {
      var file, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        _results.push(this.addFile(file));
      }
      return _results;
    };

    Dropzone.prototype._addFilesFromItems = function(items) {
      var entry, item, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        if ((item.webkitGetAsEntry != null) && (entry = item.webkitGetAsEntry())) {
          if (entry.isFile) {
            _results.push(this.addFile(item.getAsFile()));
          } else if (entry.isDirectory) {
            _results.push(this._addFilesFromDirectory(entry, entry.name));
          } else {
            _results.push(void 0);
          }
        } else if (item.getAsFile != null) {
          if ((item.kind == null) || item.kind === "file") {
            _results.push(this.addFile(item.getAsFile()));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Dropzone.prototype._addFilesFromDirectory = function(directory, path) {
      var dirReader, entriesReader;
      dirReader = directory.createReader();
      entriesReader = (function(_this) {
        return function(entries) {
          var entry, _i, _len;
          for (_i = 0, _len = entries.length; _i < _len; _i++) {
            entry = entries[_i];
            if (entry.isFile) {
              entry.file(function(file) {
                if (_this.options.ignoreHiddenFiles && file.name.substring(0, 1) === '.') {
                  return;
                }
                file.fullPath = "" + path + "/" + file.name;
                return _this.addFile(file);
              });
            } else if (entry.isDirectory) {
              _this._addFilesFromDirectory(entry, "" + path + "/" + entry.name);
            }
          }
        };
      })(this);
      return dirReader.readEntries(entriesReader, function(error) {
        return typeof console !== "undefined" && console !== null ? typeof console.log === "function" ? console.log(error) : void 0 : void 0;
      });
    };

    Dropzone.prototype.accept = function(file, done) {
      if (file.size > this.options.maxFilesize * 1024 * 1024) {
        return done(this.options.dictFileTooBig.replace("{{filesize}}", Math.round(file.size / 1024 / 10.24) / 100).replace("{{maxFilesize}}", this.options.maxFilesize));
      } else if (!Dropzone.isValidFile(file, this.options.acceptedFiles)) {
        return done(this.options.dictInvalidFileType);
      } else if ((this.options.maxFiles != null) && this.getAcceptedFiles().length >= this.options.maxFiles) {
        done(this.options.dictMaxFilesExceeded.replace("{{maxFiles}}", this.options.maxFiles));
        return this.emit("maxfilesexceeded", file);
      } else {
        return this.options.accept.call(this, file, done);
      }
    };

    Dropzone.prototype.addFile = function(file) {
      file.upload = {
        progress: 0,
        total: file.size,
        bytesSent: 0
      };
      this.files.push(file);
      file.status = Dropzone.ADDED;
      this.emit("addedfile", file);
      this._enqueueThumbnail(file);
      return this.accept(file, (function(_this) {
        return function(error) {
          if (error) {
            file.accepted = false;
            _this._errorProcessing([file], error);
          } else {
            file.accepted = true;
            if (_this.options.autoQueue) {
              _this.enqueueFile(file);
            }
          }
          return _this._updateMaxFilesReachedClass();
        };
      })(this));
    };

    Dropzone.prototype.enqueueFiles = function(files) {
      var file, _i, _len;
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        this.enqueueFile(file);
      }
      return null;
    };

    Dropzone.prototype.enqueueFile = function(file) {
      if (file.status === Dropzone.ADDED && file.accepted === true) {
        file.status = Dropzone.QUEUED;
        if (this.options.autoProcessQueue) {
          return setTimeout(((function(_this) {
            return function() {
              return _this.processQueue();
            };
          })(this)), 0);
        }
      } else {
        throw new Error("This file can't be queued because it has already been processed or was rejected.");
      }
    };

    Dropzone.prototype._thumbnailQueue = [];

    Dropzone.prototype._processingThumbnail = false;

    Dropzone.prototype._enqueueThumbnail = function(file) {
      if (this.options.createImageThumbnails && file.type.match(/image.*/) && file.size <= this.options.maxThumbnailFilesize * 1024 * 1024) {
        this._thumbnailQueue.push(file);
        return setTimeout(((function(_this) {
          return function() {
            return _this._processThumbnailQueue();
          };
        })(this)), 0);
      }
    };

    Dropzone.prototype._processThumbnailQueue = function() {
      if (this._processingThumbnail || this._thumbnailQueue.length === 0) {
        return;
      }
      this._processingThumbnail = true;
      return this.createThumbnail(this._thumbnailQueue.shift(), (function(_this) {
        return function() {
          _this._processingThumbnail = false;
          return _this._processThumbnailQueue();
        };
      })(this));
    };

    Dropzone.prototype.removeFile = function(file) {
      if (file.status === Dropzone.UPLOADING) {
        this.cancelUpload(file);
      }
      this.files = without(this.files, file);
      this.emit("removedfile", file);
      if (this.files.length === 0) {
        return this.emit("reset");
      }
    };

    Dropzone.prototype.removeAllFiles = function(cancelIfNecessary) {
      var file, _i, _len, _ref;
      if (cancelIfNecessary == null) {
        cancelIfNecessary = false;
      }
      _ref = this.files.slice();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        if (file.status !== Dropzone.UPLOADING || cancelIfNecessary) {
          this.removeFile(file);
        }
      }
      return null;
    };

    Dropzone.prototype.createThumbnail = function(file, callback) {
      var fileReader;
      fileReader = new FileReader;
      fileReader.onload = (function(_this) {
        return function() {
          if (file.type === "image/svg+xml") {
            _this.emit("thumbnail", file, fileReader.result);
            if (callback != null) {
              callback();
            }
            return;
          }
          return _this.createThumbnailFromUrl(file, fileReader.result, callback);
        };
      })(this);
      return fileReader.readAsDataURL(file);
    };

    Dropzone.prototype.createThumbnailFromUrl = function(file, imageUrl, callback) {
      var img;
      img = document.createElement("img");
      img.onload = (function(_this) {
        return function() {
          var canvas, ctx, resizeInfo, thumbnail, _ref, _ref1, _ref2, _ref3;
          file.width = img.width;
          file.height = img.height;
          resizeInfo = _this.options.resize.call(_this, file);
          if (resizeInfo.trgWidth == null) {
            resizeInfo.trgWidth = resizeInfo.optWidth;
          }
          if (resizeInfo.trgHeight == null) {
            resizeInfo.trgHeight = resizeInfo.optHeight;
          }
          canvas = document.createElement("canvas");
          ctx = canvas.getContext("2d");
          canvas.width = resizeInfo.trgWidth;
          canvas.height = resizeInfo.trgHeight;
          drawImageIOSFix(ctx, img, (_ref = resizeInfo.srcX) != null ? _ref : 0, (_ref1 = resizeInfo.srcY) != null ? _ref1 : 0, resizeInfo.srcWidth, resizeInfo.srcHeight, (_ref2 = resizeInfo.trgX) != null ? _ref2 : 0, (_ref3 = resizeInfo.trgY) != null ? _ref3 : 0, resizeInfo.trgWidth, resizeInfo.trgHeight);
          thumbnail = canvas.toDataURL("image/png");
          _this.emit("thumbnail", file, thumbnail);
          if (callback != null) {
            return callback();
          }
        };
      })(this);
      if (callback != null) {
        img.onerror = callback;
      }
      return img.src = imageUrl;
    };

    Dropzone.prototype.processQueue = function() {
      var i, parallelUploads, processingLength, queuedFiles;
      parallelUploads = this.options.parallelUploads;
      processingLength = this.getUploadingFiles().length;
      i = processingLength;
      if (processingLength >= parallelUploads) {
        return;
      }
      queuedFiles = this.getQueuedFiles();
      if (!(queuedFiles.length > 0)) {
        return;
      }
      if (this.options.uploadMultiple) {
        return this.processFiles(queuedFiles.slice(0, parallelUploads - processingLength));
      } else {
        while (i < parallelUploads) {
          if (!queuedFiles.length) {
            return;
          }
          this.processFile(queuedFiles.shift());
          i++;
        }
      }
    };

    Dropzone.prototype.processFile = function(file) {
      return this.processFiles([file]);
    };

    Dropzone.prototype.processFiles = function(files) {
      var file, _i, _len;
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        file.processing = true;
        file.status = Dropzone.UPLOADING;
        this.emit("processing", file);
      }
      if (this.options.uploadMultiple) {
        this.emit("processingmultiple", files);
      }
      return this.uploadFiles(files);
    };

    Dropzone.prototype._getFilesWithXhr = function(xhr) {
      var file, files;
      return files = (function() {
        var _i, _len, _ref, _results;
        _ref = this.files;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          file = _ref[_i];
          if (file.xhr === xhr) {
            _results.push(file);
          }
        }
        return _results;
      }).call(this);
    };

    Dropzone.prototype.cancelUpload = function(file) {
      var groupedFile, groupedFiles, _i, _j, _len, _len1, _ref;
      if (file.status === Dropzone.UPLOADING) {
        groupedFiles = this._getFilesWithXhr(file.xhr);
        for (_i = 0, _len = groupedFiles.length; _i < _len; _i++) {
          groupedFile = groupedFiles[_i];
          groupedFile.status = Dropzone.CANCELED;
        }
        file.xhr.abort();
        for (_j = 0, _len1 = groupedFiles.length; _j < _len1; _j++) {
          groupedFile = groupedFiles[_j];
          this.emit("canceled", groupedFile);
        }
        if (this.options.uploadMultiple) {
          this.emit("canceledmultiple", groupedFiles);
        }
      } else if ((_ref = file.status) === Dropzone.ADDED || _ref === Dropzone.QUEUED) {
        file.status = Dropzone.CANCELED;
        this.emit("canceled", file);
        if (this.options.uploadMultiple) {
          this.emit("canceledmultiple", [file]);
        }
      }
      if (this.options.autoProcessQueue) {
        return this.processQueue();
      }
    };

    resolveOption = function() {
      var args, option;
      option = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (typeof option === 'function') {
        return option.apply(this, args);
      }
      return option;
    };

    Dropzone.prototype.uploadFile = function(file) {
      return this.uploadFiles([file]);
    };

    Dropzone.prototype.uploadFiles = function(files) {
      var file, formData, handleError, headerName, headerValue, headers, i, input, inputName, inputType, key, method, option, progressObj, response, updateProgress, url, value, xhr, _i, _j, _k, _l, _len, _len1, _len2, _len3, _m, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      xhr = new XMLHttpRequest();
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        file.xhr = xhr;
      }
      method = resolveOption(this.options.method, files);
      url = resolveOption(this.options.url, files);
      xhr.open(method, url, true);
      xhr.withCredentials = !!this.options.withCredentials;
      response = null;
      handleError = (function(_this) {
        return function() {
          var _j, _len1, _results;
          _results = [];
          for (_j = 0, _len1 = files.length; _j < _len1; _j++) {
            file = files[_j];
            _results.push(_this._errorProcessing(files, response || _this.options.dictResponseError.replace("{{statusCode}}", xhr.status), xhr));
          }
          return _results;
        };
      })(this);
      updateProgress = (function(_this) {
        return function(e) {
          var allFilesFinished, progress, _j, _k, _l, _len1, _len2, _len3, _results;
          if (e != null) {
            progress = 100 * e.loaded / e.total;
            for (_j = 0, _len1 = files.length; _j < _len1; _j++) {
              file = files[_j];
              file.upload = {
                progress: progress,
                total: e.total,
                bytesSent: e.loaded
              };
            }
          } else {
            allFilesFinished = true;
            progress = 100;
            for (_k = 0, _len2 = files.length; _k < _len2; _k++) {
              file = files[_k];
              if (!(file.upload.progress === 100 && file.upload.bytesSent === file.upload.total)) {
                allFilesFinished = false;
              }
              file.upload.progress = progress;
              file.upload.bytesSent = file.upload.total;
            }
            if (allFilesFinished) {
              return;
            }
          }
          _results = [];
          for (_l = 0, _len3 = files.length; _l < _len3; _l++) {
            file = files[_l];
            _results.push(_this.emit("uploadprogress", file, progress, file.upload.bytesSent));
          }
          return _results;
        };
      })(this);
      xhr.onload = (function(_this) {
        return function(e) {
          var _ref;
          if (files[0].status === Dropzone.CANCELED) {
            return;
          }
          if (xhr.readyState !== 4) {
            return;
          }
          response = xhr.responseText;
          if (xhr.getResponseHeader("content-type") && ~xhr.getResponseHeader("content-type").indexOf("application/json")) {
            try {
              response = JSON.parse(response);
            } catch (_error) {
              e = _error;
              response = "Invalid JSON response from server.";
            }
          }
          updateProgress();
          if (!((200 <= (_ref = xhr.status) && _ref < 300))) {
            return handleError();
          } else {
            return _this._finished(files, response, e);
          }
        };
      })(this);
      xhr.onerror = (function(_this) {
        return function() {
          if (files[0].status === Dropzone.CANCELED) {
            return;
          }
          return handleError();
        };
      })(this);
      progressObj = (_ref = xhr.upload) != null ? _ref : xhr;
      progressObj.onprogress = updateProgress;
      headers = {
        "Accept": "application/json",
        "Cache-Control": "no-cache",
        "X-Requested-With": "XMLHttpRequest"
      };
      if (this.options.headers) {
        extend(headers, this.options.headers);
      }
      for (headerName in headers) {
        headerValue = headers[headerName];
        xhr.setRequestHeader(headerName, headerValue);
      }
      formData = new FormData();
      if (this.options.params) {
        _ref1 = this.options.params;
        for (key in _ref1) {
          value = _ref1[key];
          formData.append(key, value);
        }
      }
      for (_j = 0, _len1 = files.length; _j < _len1; _j++) {
        file = files[_j];
        this.emit("sending", file, xhr, formData);
      }
      if (this.options.uploadMultiple) {
        this.emit("sendingmultiple", files, xhr, formData);
      }
      if (this.element.tagName === "FORM") {
        _ref2 = this.element.querySelectorAll("input, textarea, select, button");
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          input = _ref2[_k];
          inputName = input.getAttribute("name");
          inputType = input.getAttribute("type");
          if (input.tagName === "SELECT" && input.hasAttribute("multiple")) {
            _ref3 = input.options;
            for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
              option = _ref3[_l];
              if (option.selected) {
                formData.append(inputName, option.value);
              }
            }
          } else if (!inputType || ((_ref4 = inputType.toLowerCase()) !== "checkbox" && _ref4 !== "radio") || input.checked) {
            formData.append(inputName, input.value);
          }
        }
      }
      for (i = _m = 0, _ref5 = files.length - 1; 0 <= _ref5 ? _m <= _ref5 : _m >= _ref5; i = 0 <= _ref5 ? ++_m : --_m) {
        formData.append(this._getParamName(i), files[i], files[i].name);
      }
      return xhr.send(formData);
    };

    Dropzone.prototype._finished = function(files, responseText, e) {
      var file, _i, _len;
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        file.status = Dropzone.SUCCESS;
        this.emit("success", file, responseText, e);
        this.emit("complete", file);
      }
      if (this.options.uploadMultiple) {
        this.emit("successmultiple", files, responseText, e);
        this.emit("completemultiple", files);
      }
      if (this.options.autoProcessQueue) {
        return this.processQueue();
      }
    };

    Dropzone.prototype._errorProcessing = function(files, message, xhr) {
      var file, _i, _len;
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        file.status = Dropzone.ERROR;
        this.emit("error", file, message, xhr);
        this.emit("complete", file);
      }
      if (this.options.uploadMultiple) {
        this.emit("errormultiple", files, message, xhr);
        this.emit("completemultiple", files);
      }
      if (this.options.autoProcessQueue) {
        return this.processQueue();
      }
    };

    return Dropzone;

  })(Emitter);

  Dropzone.version = "4.0.1";

  Dropzone.options = {};

  Dropzone.optionsForElement = function(element) {
    if (element.getAttribute("id")) {
      return Dropzone.options[camelize(element.getAttribute("id"))];
    } else {
      return void 0;
    }
  };

  Dropzone.instances = [];

  Dropzone.forElement = function(element) {
    if (typeof element === "string") {
      element = document.querySelector(element);
    }
    if ((element != null ? element.myDropzone : void 0) == null) {
      throw new Error("No Dropzone found for given element. This is probably because you're trying to access it before Dropzone had the time to initialize. Use the `init` option to setup any additional observers on your Dropzone.");
    }
    return element.myDropzone;
  };

  Dropzone.autoDiscover = true;

  Dropzone.discover = function() {
    var checkElements, dropzone, dropzones, _i, _len, _results;
    if (document.querySelectorAll) {
      dropzones = document.querySelectorAll(".dropzone");
    } else {
      dropzones = [];
      checkElements = function(elements) {
        var el, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = elements.length; _i < _len; _i++) {
          el = elements[_i];
          if (/(^| )dropzone($| )/.test(el.className)) {
            _results.push(dropzones.push(el));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      checkElements(document.getElementsByTagName("div"));
      checkElements(document.getElementsByTagName("form"));
    }
    _results = [];
    for (_i = 0, _len = dropzones.length; _i < _len; _i++) {
      dropzone = dropzones[_i];
      if (Dropzone.optionsForElement(dropzone) !== false) {
        _results.push(new Dropzone(dropzone));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Dropzone.blacklistedBrowsers = [/opera.*Macintosh.*version\/12/i];

  Dropzone.isBrowserSupported = function() {
    var capableBrowser, regex, _i, _len, _ref;
    capableBrowser = true;
    if (window.File && window.FileReader && window.FileList && window.Blob && window.FormData && document.querySelector) {
      if (!("classList" in document.createElement("a"))) {
        capableBrowser = false;
      } else {
        _ref = Dropzone.blacklistedBrowsers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          regex = _ref[_i];
          if (regex.test(navigator.userAgent)) {
            capableBrowser = false;
            continue;
          }
        }
      }
    } else {
      capableBrowser = false;
    }
    return capableBrowser;
  };

  without = function(list, rejectedItem) {
    var item, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      item = list[_i];
      if (item !== rejectedItem) {
        _results.push(item);
      }
    }
    return _results;
  };

  camelize = function(str) {
    return str.replace(/[\-_](\w)/g, function(match) {
      return match.charAt(1).toUpperCase();
    });
  };

  Dropzone.createElement = function(string) {
    var div;
    div = document.createElement("div");
    div.innerHTML = string;
    return div.childNodes[0];
  };

  Dropzone.elementInside = function(element, container) {
    if (element === container) {
      return true;
    }
    while (element = element.parentNode) {
      if (element === container) {
        return true;
      }
    }
    return false;
  };

  Dropzone.getElement = function(el, name) {
    var element;
    if (typeof el === "string") {
      element = document.querySelector(el);
    } else if (el.nodeType != null) {
      element = el;
    }
    if (element == null) {
      throw new Error("Invalid `" + name + "` option provided. Please provide a CSS selector or a plain HTML element.");
    }
    return element;
  };

  Dropzone.getElements = function(els, name) {
    var e, el, elements, _i, _j, _len, _len1, _ref;
    if (els instanceof Array) {
      elements = [];
      try {
        for (_i = 0, _len = els.length; _i < _len; _i++) {
          el = els[_i];
          elements.push(this.getElement(el, name));
        }
      } catch (_error) {
        e = _error;
        elements = null;
      }
    } else if (typeof els === "string") {
      elements = [];
      _ref = document.querySelectorAll(els);
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        el = _ref[_j];
        elements.push(el);
      }
    } else if (els.nodeType != null) {
      elements = [els];
    }
    if (!((elements != null) && elements.length)) {
      throw new Error("Invalid `" + name + "` option provided. Please provide a CSS selector, a plain HTML element or a list of those.");
    }
    return elements;
  };

  Dropzone.confirm = function(question, accepted, rejected) {
    if (window.confirm(question)) {
      return accepted();
    } else if (rejected != null) {
      return rejected();
    }
  };

  Dropzone.isValidFile = function(file, acceptedFiles) {
    var baseMimeType, mimeType, validType, _i, _len;
    if (!acceptedFiles) {
      return true;
    }
    acceptedFiles = acceptedFiles.split(",");
    mimeType = file.type;
    baseMimeType = mimeType.replace(/\/.*$/, "");
    for (_i = 0, _len = acceptedFiles.length; _i < _len; _i++) {
      validType = acceptedFiles[_i];
      validType = validType.trim();
      if (validType.charAt(0) === ".") {
        if (file.name.toLowerCase().indexOf(validType.toLowerCase(), file.name.length - validType.length) !== -1) {
          return true;
        }
      } else if (/\/\*$/.test(validType)) {
        if (baseMimeType === validType.replace(/\/.*$/, "")) {
          return true;
        }
      } else {
        if (mimeType === validType) {
          return true;
        }
      }
    }
    return false;
  };

  if (typeof jQuery !== "undefined" && jQuery !== null) {
    jQuery.fn.myDropzone = function(options) {
      return this.each(function() {
        return new Dropzone(this, options);
      });
    };
  }

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Dropzone;
  } else {
    window.Dropzone = Dropzone;
  }

  Dropzone.ADDED = "added";

  Dropzone.QUEUED = "queued";

  Dropzone.ACCEPTED = Dropzone.QUEUED;

  Dropzone.UPLOADING = "uploading";

  Dropzone.PROCESSING = Dropzone.UPLOADING;

  Dropzone.CANCELED = "canceled";

  Dropzone.ERROR = "error";

  Dropzone.SUCCESS = "success";


  /*
  
  Bugfix for iOS 6 and 7
  Source: http://stackoverflow.com/questions/11929099/html5-canvas-drawimage-ratio-bug-ios
  based on the work of https://github.com/stomita/ios-imagefile-megapixel
   */

  detectVerticalSquash = function(img) {
    var alpha, canvas, ctx, data, ey, ih, iw, py, ratio, sy;
    iw = img.naturalWidth;
    ih = img.naturalHeight;
    canvas = document.createElement("canvas");
    canvas.width = 1;
    canvas.height = ih;
    ctx = canvas.getContext("2d");
    ctx.drawImage(img, 0, 0);
    data = ctx.getImageData(0, 0, 1, ih).data;
    sy = 0;
    ey = ih;
    py = ih;
    while (py > sy) {
      alpha = data[(py - 1) * 4 + 3];
      if (alpha === 0) {
        ey = py;
      } else {
        sy = py;
      }
      py = (ey + sy) >> 1;
    }
    ratio = py / ih;
    if (ratio === 0) {
      return 1;
    } else {
      return ratio;
    }
  };

  drawImageIOSFix = function(ctx, img, sx, sy, sw, sh, dx, dy, dw, dh) {
    var vertSquashRatio;
    vertSquashRatio = detectVerticalSquash(img);
    return ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh / vertSquashRatio);
  };


  /*
   * contentloaded.js
   *
   * Author: Diego Perini (diego.perini at gmail.com)
   * Summary: cross-browser wrapper for DOMContentLoaded
   * Updated: 20101020
   * License: MIT
   * Version: 1.2
   *
   * URL:
   * http://javascript.nwbox.com/ContentLoaded/
   * http://javascript.nwbox.com/ContentLoaded/MIT-LICENSE
   */

  contentLoaded = function(win, fn) {
    var add, doc, done, init, poll, pre, rem, root, top;
    done = false;
    top = true;
    doc = win.document;
    root = doc.documentElement;
    add = (doc.addEventListener ? "addEventListener" : "attachEvent");
    rem = (doc.addEventListener ? "removeEventListener" : "detachEvent");
    pre = (doc.addEventListener ? "" : "on");
    init = function(e) {
      if (e.type === "readystatechange" && doc.readyState !== "complete") {
        return;
      }
      (e.type === "load" ? win : doc)[rem](pre + e.type, init, false);
      if (!done && (done = true)) {
        return fn.call(win, e.type || e);
      }
    };
    poll = function() {
      var e;
      try {
        root.doScroll("left");
      } catch (_error) {
        e = _error;
        setTimeout(poll, 50);
        return;
      }
      return init("poll");
    };
    if (doc.readyState !== "complete") {
      if (doc.createEventObject && root.doScroll) {
        try {
          top = !win.frameElement;
        } catch (_error) {}
        if (top) {
          poll();
        }
      }
      doc[add](pre + "DOMContentLoaded", init, false);
      doc[add](pre + "readystatechange", init, false);
      return win[add](pre + "load", init, false);
    }
  };

  Dropzone._autoDiscoverFunction = function() {
    if (Dropzone.autoDiscover) {
      return Dropzone.discover();
    }
  };

  contentLoaded(window, Dropzone._autoDiscoverFunction);

}).call(this);

    return module.exports;
}));


/***/ }),
/* 566 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************!*\
  !*** ./src/Pim/Bundle/UIBundle/Resources/public/lib/jstree/jquery.hotkeys.js ***!
  \*******************************************************************************/
/***/ (function(module, exports) {

/*
 * jQuery Hotkeys Plugin
 * Copyright 2010, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 *
 * Based upon the plugin by Tzury Bar Yochay:
 * http://github.com/tzuryby/hotkeys
 *
 * Original idea by:
 * Binny V A, http://www.openjs.com/scripts/events/keyboard_shortcuts/
*/

/*
 * One small change is: now keys are passed by object { keys: '...' }
 * Might be useful, when you want to pass some other data to your handler
 */

(function(jQuery){
	
	jQuery.hotkeys = {
		version: "0.8",

		specialKeys: {
			8: "backspace", 9: "tab", 10: "return", 13: "return", 16: "shift", 17: "ctrl", 18: "alt", 19: "pause",
			20: "capslock", 27: "esc", 32: "space", 33: "pageup", 34: "pagedown", 35: "end", 36: "home",
			37: "left", 38: "up", 39: "right", 40: "down", 45: "insert", 46: "del", 
			96: "0", 97: "1", 98: "2", 99: "3", 100: "4", 101: "5", 102: "6", 103: "7",
			104: "8", 105: "9", 106: "*", 107: "+", 109: "-", 110: ".", 111 : "/", 
			112: "f1", 113: "f2", 114: "f3", 115: "f4", 116: "f5", 117: "f6", 118: "f7", 119: "f8", 
			120: "f9", 121: "f10", 122: "f11", 123: "f12", 144: "numlock", 145: "scroll", 186: ";", 191: "/",
			220: "\\", 222: "'", 224: "meta"
		},
	
		shiftNums: {
			"`": "~", "1": "!", "2": "@", "3": "#", "4": "$", "5": "%", "6": "^", "7": "&", 
			"8": "*", "9": "(", "0": ")", "-": "_", "=": "+", ";": ": ", "'": "\"", ",": "<", 
			".": ">",  "/": "?",  "\\": "|"
		}
	};

	function keyHandler( handleObj ) {
		if ( typeof handleObj.data === "string" ) {
			handleObj.data = { keys: handleObj.data };
		}

		// Only care when a possible input has been specified
		if ( !handleObj.data || !handleObj.data.keys || typeof handleObj.data.keys !== "string" ) {
			return;
		}

		var origHandler = handleObj.handler,
			keys = handleObj.data.keys.toLowerCase().split(" "),
			textAcceptingInputTypes = ["text", "password", "number", "email", "url", "range", "date", "month", "week", "time", "datetime", "datetime-local", "search", "color", "tel"];
	
		handleObj.handler = function( event ) {
			// Don't fire in text-accepting inputs that we didn't directly bind to
			if ( this !== event.target && (/textarea|select/i.test( event.target.nodeName ) ||
				jQuery.inArray(event.target.type, textAcceptingInputTypes) > -1 ) ) {
				return;
			}

			var special = jQuery.hotkeys.specialKeys[ event.keyCode ],
				// character codes are available only in keypress
				character = event.type === "keypress" && String.fromCharCode( event.which ).toLowerCase(),
				modif = "", possible = {};

			// check combinations (alt|ctrl|shift+anything)
			if ( event.altKey && special !== "alt" ) {
				modif += "alt+";
			}

			if ( event.ctrlKey && special !== "ctrl" ) {
				modif += "ctrl+";
			}
			
			// TODO: Need to make sure this works consistently across platforms
			if ( event.metaKey && !event.ctrlKey && special !== "meta" ) {
				modif += "meta+";
			}

			if ( event.shiftKey && special !== "shift" ) {
				modif += "shift+";
			}

			if ( special ) {
				possible[ modif + special ] = true;
			}

			if ( character ) {
				possible[ modif + character ] = true;
				possible[ modif + jQuery.hotkeys.shiftNums[ character ] ] = true;

				// "$" can be triggered as "Shift+4" or "Shift+$" or just "$"
				if ( modif === "shift+" ) {
					possible[ jQuery.hotkeys.shiftNums[ character ] ] = true;
				}
			}

			for ( var i = 0, l = keys.length; i < l; i++ ) {
				if ( possible[ keys[i] ] ) {
					return origHandler.apply( this, arguments );
				}
			}
		};
	}

	jQuery.each([ "keydown", "keyup", "keypress" ], function() {
		jQuery.event.special[ this ] = { add: keyHandler };
	});

})( this.jQuery );


/***/ })
]));
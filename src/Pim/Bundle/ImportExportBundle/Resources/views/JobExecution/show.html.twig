{% extends 'PimEnrichBundle::layout.html.twig' %}

{% block content %}

    {% set title = "execution details"|trans ~ ' - ' ~ execution.jobInstance.label %}
    {% set subtitle = execution.jobInstance.label  %}
    {% set isRunning = execution.exitStatus.exitCode not in [
            constant('Akeneo\\Bundle\\BatchBundle\\Job\\ExitStatus::COMPLETED'),
            constant('Akeneo\\Bundle\\BatchBundle\\Job\\ExitStatus::STOPPED'),
            constant('Akeneo\\Bundle\\BatchBundle\\Job\\ExitStatus::FAILED')
        ]
    %}

    {% set buttons %}
        {% if isRunning %}
            {{ elements.link('Refresh', path(refresh_route, { 'id': execution.id }), { icon: 'refresh' }) }}
        {% else %}
            {% for archiver,files in archives %}
                {% if files|length == 1 %}
                    {% for key,file in files %}
                        {{ elements.link(
                            ('pim_import_export.download_archive.' ~ archiver),
                            path(download_file_route, { 'id': execution.id, 'archiver': archiver, 'key': key }), { icon: 'download', class:'no-hash' }
                        ) }}
                    {% endfor %}
                {% endif %}
            {% endfor %}

            {% if existingLog %}
                {{ elements.link(
                    'Download log',
                    path(download_log_route, { 'id': execution.id }), { icon: 'download', class:'no-hash' }
                ) }}
            {% endif %}
        {% endif %}
        {{ elements.link('Show profile', path(show_profile_route, { 'id': execution.jobInstance.id })) }}
    {% endset %}

    {% set left %}
        <ul class="inline" id="status">
           <li>{{ 'Status'|trans }}: ...</li>
       </ul>
    {% endset %}

    {{ elements.page_header(title, buttons, subtitle, left) }}

    <div class="container-fluid grid-container">
        <img src="{{ asset('bundles/pimimportexport/images/loading.gif') }}" alt="Loading" id="loading" class="transparent" />
        <table class="table table-bordered groups" id="job-execution">
            <thead>
                <th>{{ 'Step' | trans | upper }}</th>
                <th>{{ 'Status' | trans | upper }}</th>
                <th>{{ 'Summary' | trans | upper }}</th>
                <th>{{ 'Start' | trans | upper }}</th>
                <th>{{ 'End' | trans | upper }}</th>
            </thead>
            <tbody>
                <tr>
                    <td colspan="5">Collecting data about job execution...</td>
                </tr>
            </tbody>
        </table>
    </div>

{% endblock %}

{% block head_script %}
    {{ parent() }}

    <script type="text/javascript">
        require(
            ['jquery', 'backbone', 'underscore',],
            function($, Backbone, _){
                'use strict';

                var keepPolling = true;

                var JobExecution = Backbone.Model.extend({
                    url: function() {
                        return  "{{ path('pim_importexport_export_execution_show', {id: execution.id, _format: 'json'}) }}";
                    }
                });

                var JobExecutionView = Backbone.View.extend({
                    initialize: function () {
                        this.listenTo(this.model, "change", this.render);
                        this.model.bind('request', this.ajaxStart, this);
                        this.model.bind('sync', this.ajaxComplete, this);
                    },

                    ajaxStart: function(){
                        $('#loading').css('opacity', 1);
                    },

                    ajaxComplete: function(model, job){
                        $('#loading').css('opacity', 0);
                        if (!job.isRunning) {
                            keepPolling = false;
                        }
                    },

                    template: _.template(
                        {# Step execution information #}
                        '<% _.each(stepExecutions, function(stepExecution) { %>' +
                            '<tr>' +
                                '<td><%= stepExecution.label %></td>' +
                                '<td><%= stepExecution.status %></td>' +
                                '<td>' +
                                    '<table class="table-striped table-bordered table-hover">' +
                                        '<% _.each(stepExecution.summary, function(value, key) { %>' +
                                            '<tr>' +
                                                '<td><%= key %></td>' +
                                                '<td><%= value %></td>' +
                                            '</tr>' +
                                        '<% }); %>' +
                                    '</table>' +
                                '</td>' +
                                '<td><%= stepExecution.startedAt %></td>' +
                                '<td><%= stepExecution.endedAt %></td>' +
                            '</tr>' +

                            {# Step execution warnings #}
                            '<% _.each(stepExecution.warnings, function(warning) { %>' +
                                '<tr class="warning">' +
                                    '<td colspan="7">' +
                                        '<span class="title"><%= warning.label.toUpperCase() %></span>&nbsp;' +
                                        '<%= warning.reason %><br />' +
                                        '<a class="data" href="#"' +
                                            'data-display-label="{{ "Display item"|trans }}"' +
                                            'data-hide-label="{{ "Hide item"|trans }}">' +
                                            '{{ "Display item"|trans }}' +
                                        '</a>' +
                                        '<table class="hide table-striped table-bordered table-hover">' +
                                            '<% _.each(warning.items, function(value, key) { %>' +
                                                '<tr>' +
                                                    '<td><%= key %></td>' +
                                                    '<td><%= value %></td>' +
                                                '</tr>' +
                                            '<% }); %>' +
                                        '</table>' +
                                    '</td>' +
                                '</tr>' +
                            '<% }); %>' +

                            {# Step execution failures #}
                            '<% _.each(stepExecution.failures, function(failure) { %>' +
                                '<tr class="error">' +
                                    '<td colspan="7">' +
                                        '<span class="title"><%= stepExecution.label.toUpperCase() %></span>&nbsp;' +
                                        '<%= failure %>' +
                                    '</td>' +
                                '</tr>' +
                            '<% }); %>' +

                        '<% }); %>' +

                        {# Job execution failuresÂ #}
                        '<% _.each(failures, function(failure) { %>' +
                            '<tr class="error">' +
                                '<td colspan="7">' +
                                    '<span class="title"><%= label.toUpperCase() %></span>&nbsp;' +
                                    '<%= failure %>' +
                                '</td>' +
                            '</tr>' +
                        '<% }); %>'
                    ),

                    render: function() {
                        this.$el.html(this.template(this.model.toJSON()));
                        return this;
                    }
                });

                var JobExecutionStatusView = Backbone.View.extend({
                    initialize: function () {
                        this.listenTo(this.model, 'change', this.render);
                    },

                    template: _.template('<li>{{ "Status"|trans }}: <%= status.toUpperCase() %></li>'),

                    render: function() {
                        this.$el.html(this.template(this.model.toJSON()));
                        return this;
                    }

                });

                var jobExecution = new JobExecution();
                jobExecution.fetch();

                new JobExecutionView({ model: jobExecution, el: '#job-execution tbody' });
                new JobExecutionStatusView({ model: jobExecution, el: '#status' });

                var interval = setInterval(function() {
                    jobExecution.fetch();
                    if (!keepPolling) {
                        clearInterval(interval);
                    }
                }, 1000);

                setTimeout(function() {
                    clearInterval(interval);
                }, 100000);
            }
        );
    </script>
{% endblock %}

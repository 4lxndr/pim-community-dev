<?php

namespace Pim\Bundle\CatalogBundle\Doctrine\MongoDBODM;

use Pim\Bundle\CatalogBundle\Doctrine\CompletenessGeneratorInterface;
use Pim\Bundle\CatalogBundle\Model\ProductInterface;
use Pim\Bundle\CatalogBundle\Model\Completeness;
use Doctrine\Common\Collections\ArrayCollection;
use Symfony\Bridge\Doctrine\ManagerRegistry;
use Doctrine\ODM\MongoDB\DocumentManager;

/**
 * Generate the completeness when Product are in MongoDBODM
 * storage. Please note that the generation for several products
 * is done on the MongoDB via a JS generated by the application via HTTP.
 *
 * This generator is only able to generate completeness for one product
 *
 * @author    Benoit Jacquemont <benoit@akeneo.com>
 * @copyright 2013 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
class CompletenessGenerator implements CompletenessGeneratorInterface
{
    /**
     * @var DocumentManager;
     */
    protected $documentManager;

    /**
     * Constructor
     *
     * @param DocumentManager $documentManager
     */
    public function __construct(DocumentManager $documentManager)
    {
        $this->documentManager = $documentManager;
    }

    /**
     * {@inheritdoc}
     */
    public function generateProductCompletenesses(ProductInterface $product)
    {
        $requirements = $product->getFamily()->getAttributeRequirements();

        $completenesses = new ArrayCollection();
        $channels = array();
        $channelObjects = array();
        $localeObjects = array();

        foreach ($requirements as $req) {
            $channel = $req->getChannel()->getCode();
            $locales = $req->getChannel()->getLocales();
            $currencies = $req->getChannel()->getCurrencies();
            $attribute = $req->getAttribute();

            if (!isset($channels[$channel])) {
                $channels[$channel] = array();
                $channelObjects[$channel] = $req->getChannel();
            }

            foreach ($locales as $locale) {
                if (!isset($channels[$channel][$locale->getCode()])) {
                    $channels[$channel][$locale->getCode()] = array();
                    $channels[$channel][$locale->getCode()]['missing_count'] = 0;
                    $channels[$channel][$locale->getCode()]['required_count'] = 0;
                    $localeObjects[$locale->getCode()] = $locale;
                }

                $channels[$channel][$locale->getCode()]['required_count']++;

                $value = $product->getValue($req->getAttribute()->getCode(), $locale->getCode(), $channel);
                if (($value === null) || ($value->getData() === null)) {
                    $channels[$channel][$locale->getCode()]['missing_count'] ++;
                } elseif ($attribute->getBackendType() == "prices") {
                    $filledPrice = true;
                    foreach ($currencies as $currency) {
                        $priceFound = false;
                        foreach ($value-getData() as $price) {
                            if ($price->getCurrency() === $currency) {
                                $priceFound = true;
                            }
                        }
                        if (!$priceFound) {
                            $filledPrice = false;
                        }
                    }
                    $channels[$channel][$locale]['missing_count'] ++;
                }

            }
        }

        foreach ($channels as $channel=>$locales) {
            foreach ($locales as $locale => $data) {
                $completeness = new Completeness();
                $completeness->setChannel($channelObjects[$channel]);
                $completeness->setLocale($localeObjects[$locale]);

                $completeness->setMissingCount($data['missing_count']);
                $completeness->setRequiredCount($data['required_count']);
                $completeness->setRatio(($data['required_count'] - $data['missing_count'])/$data['required_count']*100);

                $completenesses->add($completeness);
            }
        }
        $product->setCompletenesses($completenesses);

        $this->documentManager->flush($product);

    }

    /**
     * {@inheritdoc}
     */
    public function generate(array $criteria = array(), $limit = null)
    {
        // @TODO Not implemented yet
        return;
    }

    /**
     * {@inheritdoc}
     */
    public function schedule(ProductInterface $product)
    {
        // @TODO Not implemented yet
        return;
    }
}

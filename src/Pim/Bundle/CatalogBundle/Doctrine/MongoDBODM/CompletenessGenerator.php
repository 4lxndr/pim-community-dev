<?php

namespace Pim\Bundle\CatalogBundle\Doctrine\MongoDBODM;

use Pim\Bundle\CatalogBundle\Doctrine\CompletenessGeneratorInterface;
use Pim\Bundle\CatalogBundle\Model\ProductInterface;
use Pim\Bundle\CatalogBundle\Model\Completeness;
use Doctrine\Common\Collections\ArrayCollection;
use Symfony\Bridge\Doctrine\ManagerRegistry;
use Doctrine\ODM\MongoDB\DocumentManager;

/**
 * Generate the completeness when Product are in MongoDBODM
 * storage. Please note that the generation for several products
 * is done on the MongoDB via a JS generated by the application via HTTP.
 *
 * This generator is only able to generate completeness for one product
 *
 * @author    Benoit Jacquemont <benoit@akeneo.com>
 * @copyright 2013 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
class CompletenessGenerator implements CompletenessGeneratorInterface
{
    /**
     * @var DocumentManager;
     */
    protected $documentManager;

    /**
     * Constructor
     *
     * @param DocumentManager $documentManager
     */
    public function __construct(DocumentManager $documentManager)
    {
        $this->documentManager = $documentManager;
    }

    /**
     * {@inheritdoc}
     */
    public function generateProductCompletenesses(ProductInterface $product)
    {
        $stats = $this->collectCompletenessStats($product);

        $completenesses = new ArrayCollection();

        foreach ($stats as $channelStats) {
            $channel = $channelStats['object'];
            $channelData = $channelStats['data'];

            foreach ($channelData as $localeStats) {
                $locale = $localeStats['object'];
                $localeData = $localeStats['data'];

                $completeness = new Completeness();
                $completeness->setChannel($channel);
                $completeness->setLocale($locale);

                $completeness->setMissingCount($localeData['missing_count']);
                $completeness->setRequiredCount($localeData['required_count']);
                $completeness->setRatio(
                    ($localeData['required_count'] - $localeData['missing_count'])
                    /$localeData['required_count']*100
                );

                $completenesses->add($completeness);
            }
        }
        $product->setCompletenesses($completenesses);

        $this->documentManager->flush($product);
    }

    /**
     * Generate statistics on the product completeness
     *
     * @param ProductInterface $product
     * @param ArrayCollection  $attributeRequirements
     *
     * @return array $stats
     */
    protected function collectStats(ProductInterface $product)
    {
        $stats = array();

        $requirements = $product->getFamily()->getAttributeRequirements();

        foreach ($requirements as $req) {
            $channel = $req->getChannel()->getCode();
            $locales = $req->getChannel()->getLocales();
            $currencies = $req->getChannel()->getCurrencies();
            $attribute = $req->getAttribute();

            if (!isset($stats[$channel])) {
                $stats[$channel]['object'] = $req->getChannel();
                $stats[$channel]['data'] = array();
            }

            foreach ($locales as $localeObject) {
                $locale = $localeObject->getCode();
                if (!isset($stats[$channel]['data'][$locale])) {
                    $stats[$channel]['data'][$locale] = array();
                    $stats[$channel]['data'][$locale]['object'] = $localeObject;
                    $stats[$channel]['data'][$locale]['data'] = array();
                    $stats[$channel]['data'][$locale]['data']['missing_count'] = 0;
                    $stats[$channel]['data'][$locale]['data']['required_count'] = 0;
                }

                $stats[$channel]['data'][$locale]['data']['required_count']++;

                $value = $product->getValue($req->getAttribute()->getCode(), $locale->getCode(), $channel);

                if (($value === null) || ($value->getData() === null)) {

                    $stats[$channel]['data'][$locale]['data']['missing_count'] ++;

                } elseif (($attribute->getBackendType() == "prices") &&
                    (!$this->isPriceComplete($value, $currencies))) {

                    $stats[$channel]['data'][$locale]['data']['missing_count'] ++;
                }
            }
        }

        return $stats;
    }

    /**
     * Determine if the value price provided is complete, i.e. a price
     * exists for all currencies provided
     *
     * @param ProductValueInterface $value
     * @param ArrayCollection       $currencies
     *
     * @return boolean
     */
    protected function isPriceComplete(ProductValueInterface $value, ArrayCollection $currencies)
    {
        $completePrice = true;

        foreach ($currencies as $currency) {
            $priceFound = false;

            foreach ($value->getData() as $price) {
                if ($price->getCurrency() === $currency) {
                    $priceFound = true;
                }
            }
            if (!$priceFound) {
                $completePrice = false;
            }
        }

        return $completePrice;
    }

    /**
     * {@inheritdoc}
     */
    public function generate(array $criteria = array(), $limit = null)
    {
        // @TODO Not implemented yet
        return;
    }

    /**
     * {@inheritdoc}
     */
    public function schedule(ProductInterface $product)
    {
        $product->setCompletenesses(new ArrayCollection());

        $this->documentManager->flush($product);
    }
}

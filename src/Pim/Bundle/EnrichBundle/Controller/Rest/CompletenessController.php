<?php

namespace Pim\Bundle\EnrichBundle\Controller\Rest;

use Akeneo\Bundle\StorageUtilsBundle\DependencyInjection\AkeneoStorageUtilsExtension;
use Doctrine\Common\Persistence\ObjectManager;
use Pim\Bundle\CatalogBundle\Filter\CollectionFilterInterface;
use Pim\Bundle\UserBundle\Context\UserContext;
use Pim\Component\Catalog\Completeness\CompletenessCalculatorInterface;
use Pim\Component\Catalog\Repository\ChannelRepositoryInterface;
use Pim\Component\Catalog\Repository\ProductRepositoryInterface;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

/**
 * Completeness rest controller
 *
 * @author    Julien Sanchez <julien@akeneo.com>
 * @copyright 2015 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
class CompletenessController
{
    /** @var CompletenessCalculatorInterface */
    protected $completenessCalculator;

    /** @var ProductRepositoryInterface */
    protected $productRepository;

    /** @var ChannelRepositoryInterface */
    protected $channelRepository;

    /** @var UserContext */
    protected $userContext;

    /** @var NormalizerInterface */
    protected $compNormalizer;

    /** @var CollectionFilterInterface */
    protected $collectionFilter;

    /** @var ObjectManager */
    protected $productManager;

    /** @var string */
    protected $storageDriver;

    /**
     * @param CompletenessCalculatorInterface $completenessCalculator
     * @param ProductRepositoryInterface      $productRepository
     * @param ChannelRepositoryInterface      $channelRepository
     * @param UserContext                     $userContext
     * @param NormalizerInterface             $compNormalizer
     * @param CollectionFilterInterface       $collectionFilter
     * @param ObjectManager                   $productManager
     * @param string                          $storageDriver
     */
    public function __construct(
        CompletenessCalculatorInterface $completenessCalculator,
        ProductRepositoryInterface $productRepository,
        ChannelRepositoryInterface $channelRepository,
        UserContext $userContext,
        NormalizerInterface $compNormalizer,
        CollectionFilterInterface $collectionFilter,
        ObjectManager $productManager,
        $storageDriver
    ) {
        $this->completenessCalculator = $completenessCalculator;
        $this->productRepository = $productRepository;
        $this->channelRepository = $channelRepository;
        $this->userContext = $userContext;
        $this->compNormalizer = $compNormalizer;
        $this->collectionFilter = $collectionFilter;
        $this->productManager = $productManager;
        $this->storageDriver = $storageDriver;
    }

    /**
     * Get completeness for a product
     *
     * @param int|string $id
     *
     * @return JSONResponse
     */
    public function getAction($id)
    {
        $product = $this->productRepository->find($id);
        if (null === $product->getFamily()) {
            return new JsonResponse();
        }

        // TODO: TIP-694: Set completenesses into product
        $this->completenessCalculator->calculate($product);

        // Product have to be refreshed to have the completeness values generated by generateMissingForProduct()
        // (on ORM, completeness is not calculated the same way and product doesn't need to be refreshed)
        if (AkeneoStorageUtilsExtension::DOCTRINE_MONGODB_ODM === $this->storageDriver) {
            $this->productManager->refresh($product);
        }

        $channels = $this->channelRepository->getFullChannels();
        $locales = $this->userContext->getUserLocales();

        $filteredLocales = $this->collectionFilter->filterCollection($locales, 'pim.internal_api.locale.view');

        // TODO: TIP-694: Get completenesses according to channels and filtered locales
        $completenesses = $product->getCompletenesses()->toArray();

        return new JsonResponse($this->compNormalizer->normalize($completenesses, 'internal_api'));
    }
}
